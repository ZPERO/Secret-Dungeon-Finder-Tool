package com.google.firebase.database.core;

import com.google.firebase.FirebaseApp;
import com.google.firebase.database.DatabaseException;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.android.AndroidPlatform;
import com.google.firebase.database.connection.ConnectionAuthTokenProvider;
import com.google.firebase.database.connection.ConnectionAuthTokenProvider.GetTokenCallback;
import com.google.firebase.database.connection.ConnectionContext;
import com.google.firebase.database.connection.HostInfo;
import com.google.firebase.database.connection.PersistentConnection;
import com.google.firebase.database.connection.PersistentConnection.Delegate;
import com.google.firebase.database.core.persistence.NoopPersistenceManager;
import com.google.firebase.database.core.persistence.PersistenceManager;
import com.google.firebase.database.core.utilities.DefaultRunLoop;
import com.google.firebase.database.logging.LogWrapper;
import com.google.firebase.database.logging.Logger;
import com.google.firebase.database.logging.Logger.Level;
import java.io.File;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;

public class Context
{
  private static final long DEFAULT_CACHE_SIZE = 10485760L;
  protected AuthTokenProvider authTokenProvider;
  protected long cacheSize = 10485760L;
  protected EventTarget eventTarget;
  protected FirebaseApp firebaseApp;
  private PersistenceManager forcedPersistenceManager;
  private boolean frozen = false;
  protected Logger.Level logLevel = Logger.Level.INFO;
  protected List<String> loggedComponents;
  protected Logger logger;
  protected boolean persistenceEnabled;
  protected String persistenceKey;
  private Platform platform;
  protected RunLoop runLoop;
  private boolean stopped = false;
  protected String userAgent;
  
  public Context() {}
  
  private String buildUserAgent(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Firebase/");
    localStringBuilder.append("5");
    localStringBuilder.append("/");
    localStringBuilder.append(FirebaseDatabase.getSdkVersion());
    localStringBuilder.append("/");
    localStringBuilder.append(paramString);
    return localStringBuilder.toString();
  }
  
  private void ensureAuthTokenProvider()
  {
    if (authTokenProvider == null) {
      authTokenProvider = getPlatform().newAuthTokenProvider(getExecutorService());
    }
  }
  
  private void ensureEventTarget()
  {
    if (eventTarget == null) {
      eventTarget = getPlatform().newEventTarget(this);
    }
  }
  
  private void ensureLogger()
  {
    if (logger == null) {
      logger = getPlatform().newLogger(this, logLevel, loggedComponents);
    }
  }
  
  private void ensureRunLoop()
  {
    if (runLoop == null) {
      runLoop = platform.newRunLoop(this);
    }
  }
  
  private void ensureSessionIdentifier()
  {
    if (persistenceKey == null) {
      persistenceKey = "default";
    }
  }
  
  private void ensureUserAgent()
  {
    if (userAgent == null) {
      userAgent = buildUserAgent(getPlatform().getUserAgent(this));
    }
  }
  
  private ScheduledExecutorService getExecutorService()
  {
    RunLoop localRunLoop = getRunLoop();
    if ((localRunLoop instanceof DefaultRunLoop)) {
      return ((DefaultRunLoop)localRunLoop).getExecutorService();
    }
    throw new RuntimeException("Custom run loops are not supported!");
  }
  
  private Platform getPlatform()
  {
    if (platform == null) {
      initializeAndroidPlatform();
    }
    return platform;
  }
  
  private void initServices()
  {
    ensureLogger();
    getPlatform();
    ensureUserAgent();
    ensureEventTarget();
    ensureRunLoop();
    ensureSessionIdentifier();
    ensureAuthTokenProvider();
  }
  
  private void initializeAndroidPlatform()
  {
    try
    {
      platform = new AndroidPlatform(firebaseApp);
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  private void restartServices()
  {
    eventTarget.restart();
    runLoop.restart();
  }
  
  private static ConnectionAuthTokenProvider wrapAuthTokenProvider(AuthTokenProvider paramAuthTokenProvider)
  {
    new ConnectionAuthTokenProvider()
    {
      public void getToken(boolean paramAnonymousBoolean, final ConnectionAuthTokenProvider.GetTokenCallback paramAnonymousGetTokenCallback)
      {
        getToken(paramAnonymousBoolean, new AuthTokenProvider.GetTokenCompletionListener()
        {
          public void onError(String paramAnonymous2String)
          {
            paramAnonymousGetTokenCallback.onError(paramAnonymous2String);
          }
          
          public void onSuccess(String paramAnonymous2String)
          {
            paramAnonymousGetTokenCallback.onSuccess(paramAnonymous2String);
          }
        });
      }
    };
  }
  
  protected void assertUnfrozen()
  {
    if (!isFrozen()) {
      return;
    }
    throw new DatabaseException("Modifications to DatabaseConfig objects must occur before they are in use");
  }
  
  void forcePersistenceManager(PersistenceManager paramPersistenceManager)
  {
    forcedPersistenceManager = paramPersistenceManager;
  }
  
  void freeze()
  {
    try
    {
      if (!frozen)
      {
        frozen = true;
        initServices();
      }
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public AuthTokenProvider getAuthTokenProvider()
  {
    return authTokenProvider;
  }
  
  public ConnectionContext getConnectionContext()
  {
    return new ConnectionContext(getLogger(), wrapAuthTokenProvider(getAuthTokenProvider()), getExecutorService(), isPersistenceEnabled(), FirebaseDatabase.getSdkVersion(), getUserAgent(), getSSLCacheDirectory().getAbsolutePath());
  }
  
  public EventTarget getEventTarget()
  {
    return eventTarget;
  }
  
  public Logger.Level getLogLevel()
  {
    return logLevel;
  }
  
  public LogWrapper getLogger(String paramString)
  {
    return new LogWrapper(logger, paramString);
  }
  
  public LogWrapper getLogger(String paramString1, String paramString2)
  {
    return new LogWrapper(logger, paramString1, paramString2);
  }
  
  public Logger getLogger()
  {
    return logger;
  }
  
  public List<String> getOptDebugLogComponents()
  {
    return loggedComponents;
  }
  
  public long getPersistenceCacheSizeBytes()
  {
    return cacheSize;
  }
  
  PersistenceManager getPersistenceManager(String paramString)
  {
    PersistenceManager localPersistenceManager = forcedPersistenceManager;
    if (localPersistenceManager != null) {
      return localPersistenceManager;
    }
    if (persistenceEnabled)
    {
      paramString = platform.createPersistenceManager(this, paramString);
      if (paramString != null) {
        return paramString;
      }
      throw new IllegalArgumentException("You have enabled persistence, but persistence is not supported on this platform.");
    }
    return new NoopPersistenceManager();
  }
  
  public String getPlatformVersion()
  {
    return getPlatform().getPlatformVersion();
  }
  
  public RunLoop getRunLoop()
  {
    return runLoop;
  }
  
  public File getSSLCacheDirectory()
  {
    return getPlatform().getSSLCacheDirectory();
  }
  
  public String getSessionPersistenceKey()
  {
    return persistenceKey;
  }
  
  public String getUserAgent()
  {
    return userAgent;
  }
  
  public boolean isFrozen()
  {
    return frozen;
  }
  
  public boolean isPersistenceEnabled()
  {
    return persistenceEnabled;
  }
  
  public boolean isStopped()
  {
    return stopped;
  }
  
  public PersistentConnection newPersistentConnection(HostInfo paramHostInfo, PersistentConnection.Delegate paramDelegate)
  {
    return getPlatform().newPersistentConnection(this, getConnectionContext(), paramHostInfo, paramDelegate);
  }
  
  public void requireStarted()
  {
    if (stopped)
    {
      restartServices();
      stopped = false;
    }
  }
  
  void stop()
  {
    stopped = true;
    eventTarget.shutdown();
    runLoop.shutdown();
  }
}
