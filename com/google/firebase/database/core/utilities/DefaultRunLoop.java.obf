package com.google.firebase.database.core.utilities;

import com.google.firebase.database.DatabaseException;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.core.RunLoop;
import com.google.firebase.database.core.ThreadInitializer;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;

public abstract class DefaultRunLoop
  implements RunLoop
{
  private ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1, new FirebaseThreadFactory(null))
  {
    /* Error */
    protected void afterExecute(Runnable paramAnonymousRunnable, Throwable paramAnonymousThrowable)
    {
      // Byte code:
      //   0: aload_0
      //   1: aload_1
      //   2: aload_2
      //   3: invokespecial 28	java/util/concurrent/ScheduledThreadPoolExecutor:afterExecute	(Ljava/lang/Runnable;Ljava/lang/Throwable;)V
      //   6: aload_2
      //   7: astore_3
      //   8: aload_2
      //   9: ifnonnull +60 -> 69
      //   12: aload_2
      //   13: astore_3
      //   14: aload_1
      //   15: instanceof 30
      //   18: ifeq +51 -> 69
      //   21: aload_1
      //   22: checkcast 30	java/util/concurrent/Future
      //   25: astore_1
      //   26: aload_2
      //   27: astore_3
      //   28: aload_1
      //   29: invokeinterface 34 1 0
      //   34: ifeq +35 -> 69
      //   37: aload_1
      //   38: invokeinterface 38 1 0
      //   43: pop
      //   44: aload_2
      //   45: astore_3
      //   46: goto +23 -> 69
      //   49: invokestatic 44	java/lang/Thread:currentThread	()Ljava/lang/Thread;
      //   52: invokevirtual 47	java/lang/Thread:interrupt	()V
      //   55: aload_2
      //   56: astore_3
      //   57: goto +12 -> 69
      //   60: astore_1
      //   61: aload_1
      //   62: invokevirtual 51	java/util/concurrent/ExecutionException:getCause	()Ljava/lang/Throwable;
      //   65: astore_3
      //   66: goto +3 -> 69
      //   69: aload_3
      //   70: ifnull +11 -> 81
      //   73: aload_0
      //   74: getfield 14	com/google/firebase/database/core/utilities/DefaultRunLoop$1:this$0	Lcom/google/firebase/database/core/utilities/DefaultRunLoop;
      //   77: aload_3
      //   78: invokevirtual 55	com/google/firebase/database/core/utilities/DefaultRunLoop:handleException	(Ljava/lang/Throwable;)V
      //   81: return
      //   82: astore_1
      //   83: aload_2
      //   84: astore_3
      //   85: goto -16 -> 69
      //   88: astore_1
      //   89: goto -40 -> 49
      // Local variable table:
      //   start	length	slot	name	signature
      //   0	92	0	this	1
      //   0	92	1	paramAnonymousRunnable	Runnable
      //   0	92	2	paramAnonymousThrowable	Throwable
      //   7	78	3	localThrowable	Throwable
      // Exception table:
      //   from	to	target	type
      //   28	44	60	java/util/concurrent/ExecutionException
      //   28	44	82	java/util/concurrent/CancellationException
      //   28	44	88	java/lang/InterruptedException
    }
  };
  
  public DefaultRunLoop()
  {
    executor.setKeepAliveTime(3L, TimeUnit.SECONDS);
  }
  
  public static String messageForException(Throwable paramThrowable)
  {
    if ((paramThrowable instanceof OutOfMemoryError)) {
      return "Firebase Database encountered an OutOfMemoryError. You may need to reduce the amount of data you are syncing to the client (e.g. by using queries or syncing a deeper path). See https://firebase.google.com/docs/database/ios/structure-data#best_practices_for_data_structure and https://firebase.google.com/docs/database/android/retrieve-data#filtering_data";
    }
    if ((paramThrowable instanceof DatabaseException)) {
      return "";
    }
    paramThrowable = new StringBuilder();
    paramThrowable.append("Uncaught exception in Firebase Database runloop (");
    paramThrowable.append(FirebaseDatabase.getSdkVersion());
    paramThrowable.append("). Please report to firebase-database-client@google.com");
    return paramThrowable.toString();
  }
  
  public ScheduledExecutorService getExecutorService()
  {
    return executor;
  }
  
  protected ThreadFactory getThreadFactory()
  {
    return Executors.defaultThreadFactory();
  }
  
  protected ThreadInitializer getThreadInitializer()
  {
    return ThreadInitializer.defaultInstance;
  }
  
  public abstract void handleException(Throwable paramThrowable);
  
  public void restart()
  {
    executor.setCorePoolSize(1);
  }
  
  public ScheduledFuture schedule(Runnable paramRunnable, long paramLong)
  {
    return executor.schedule(paramRunnable, paramLong, TimeUnit.MILLISECONDS);
  }
  
  public void scheduleNow(Runnable paramRunnable)
  {
    executor.execute(paramRunnable);
  }
  
  public void shutdown()
  {
    executor.setCorePoolSize(0);
  }
  
  private class FirebaseThreadFactory
    implements ThreadFactory
  {
    private FirebaseThreadFactory() {}
    
    public Thread newThread(Runnable paramRunnable)
    {
      paramRunnable = getThreadFactory().newThread(paramRunnable);
      ThreadInitializer localThreadInitializer = getThreadInitializer();
      localThreadInitializer.setName(paramRunnable, "FirebaseDatabaseWorker");
      localThreadInitializer.setDaemon(paramRunnable, true);
      localThreadInitializer.setUncaughtExceptionHandler(paramRunnable, new Thread.UncaughtExceptionHandler()
      {
        public void uncaughtException(Thread paramAnonymousThread, Throwable paramAnonymousThrowable)
        {
          handleException(paramAnonymousThrowable);
        }
      });
      return paramRunnable;
    }
  }
}
