package com.google.firebase.database.core.persistence;

import com.google.firebase.database.core.view.QuerySpec;

public class TrackedQuery
{
  public final boolean active;
  public final boolean complete;
  public final long id;
  public final long lastUse;
  public final QuerySpec querySpec;
  
  public TrackedQuery(long paramLong1, QuerySpec paramQuerySpec, long paramLong2, boolean paramBoolean1, boolean paramBoolean2)
  {
    id = paramLong1;
    if ((paramQuerySpec.loadsAllData()) && (!paramQuerySpec.isDefault())) {
      throw new IllegalArgumentException("Can't create TrackedQuery for a non-default query that loads all data");
    }
    querySpec = paramQuerySpec;
    lastUse = paramLong2;
    complete = paramBoolean1;
    active = paramBoolean2;
  }
  
  public boolean equals(Object paramObject)
  {
    if (paramObject == this) {
      return true;
    }
    if (paramObject != null)
    {
      if (paramObject.getClass() != getClass()) {
        return false;
      }
      paramObject = (TrackedQuery)paramObject;
      return (id == id) && (querySpec.equals(querySpec)) && (lastUse == lastUse) && (complete == complete) && (active == active);
    }
    return false;
  }
  
  public int hashCode()
  {
    return (((Long.valueOf(id).hashCode() * 31 + querySpec.hashCode()) * 31 + Long.valueOf(lastUse).hashCode()) * 31 + Boolean.valueOf(complete).hashCode()) * 31 + Boolean.valueOf(active).hashCode();
  }
  
  public TrackedQuery setActiveState(boolean paramBoolean)
  {
    return new TrackedQuery(id, querySpec, lastUse, complete, paramBoolean);
  }
  
  public TrackedQuery setComplete()
  {
    return new TrackedQuery(id, querySpec, lastUse, true, active);
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("TrackedQuery{id=");
    localStringBuilder.append(id);
    localStringBuilder.append(", querySpec=");
    localStringBuilder.append(querySpec);
    localStringBuilder.append(", lastUse=");
    localStringBuilder.append(lastUse);
    localStringBuilder.append(", complete=");
    localStringBuilder.append(complete);
    localStringBuilder.append(", active=");
    localStringBuilder.append(active);
    localStringBuilder.append("}");
    return localStringBuilder.toString();
  }
  
  public TrackedQuery updateLastUse(long paramLong)
  {
    return new TrackedQuery(id, querySpec, paramLong, complete, active);
  }
}
