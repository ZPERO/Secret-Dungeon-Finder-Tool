package com.google.firebase.database.logging;

import java.io.PrintStream;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class DefaultLogger
  implements Logger
{
  private final Set<String> enabledComponents;
  private final Logger.Level minLevel;
  
  public DefaultLogger(Logger.Level paramLevel, List<String> paramList)
  {
    if (paramList != null) {
      enabledComponents = new HashSet(paramList);
    } else {
      enabledComponents = null;
    }
    minLevel = paramLevel;
  }
  
  protected String buildLogMessage(Logger.Level paramLevel, String paramString1, String paramString2, long paramLong)
  {
    Date localDate = new Date(paramLong);
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(localDate.toString());
    localStringBuilder.append(" [");
    localStringBuilder.append(paramLevel);
    localStringBuilder.append("] ");
    localStringBuilder.append(paramString1);
    localStringBuilder.append(": ");
    localStringBuilder.append(paramString2);
    return localStringBuilder.toString();
  }
  
  protected void debug(String paramString1, String paramString2)
  {
    System.out.println(paramString2);
  }
  
  protected void error(String paramString1, String paramString2)
  {
    System.err.println(paramString2);
  }
  
  public Logger.Level getLogLevel()
  {
    return minLevel;
  }
  
  protected void info(String paramString1, String paramString2)
  {
    System.out.println(paramString2);
  }
  
  public void onLogMessage(Logger.Level paramLevel, String paramString1, String paramString2, long paramLong)
  {
    if (shouldLog(paramLevel, paramString1))
    {
      paramString2 = buildLogMessage(paramLevel, paramString1, paramString2, paramLong);
      int i = 1.$SwitchMap$com$google$firebase$database$logging$Logger$Level[paramLevel.ordinal()];
      if (i != 1)
      {
        if (i != 2)
        {
          if (i != 3)
          {
            if (i == 4)
            {
              debug(paramString1, paramString2);
              return;
            }
            throw new RuntimeException("Should not reach here!");
          }
          info(paramString1, paramString2);
          return;
        }
        warn(paramString1, paramString2);
        return;
      }
      error(paramString1, paramString2);
    }
  }
  
  protected boolean shouldLog(Logger.Level paramLevel, String paramString)
  {
    return (paramLevel.ordinal() >= minLevel.ordinal()) && ((enabledComponents == null) || (paramLevel.ordinal() > Logger.Level.DEBUG.ordinal()) || (enabledComponents.contains(paramString)));
  }
  
  protected void warn(String paramString1, String paramString2)
  {
    System.out.println(paramString2);
  }
}
