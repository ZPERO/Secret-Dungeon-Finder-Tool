package com.google.firebase.messaging;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.KeyguardManager;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.graphics.Color;
import android.graphics.drawable.AdaptiveIconDrawable;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Parcelable;
import android.os.Process;
import android.os.SystemClock;
import android.text.TextUtils;
import android.util.Log;
import androidx.core.app.NotificationCompat.BigTextStyle;
import androidx.core.app.NotificationCompat.Builder;
import androidx.core.content.ContextCompat;
import com.google.android.gms.common.util.PlatformVersion;
import com.google.firebase.iid.zzav;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.MissingFormatArgumentException;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import org.json.JSONArray;
import org.json.JSONException;

final class zza
{
  private static final AtomicInteger zzdn = new AtomicInteger((int)SystemClock.elapsedRealtime());
  private Bundle zzdo;
  private final Context zzx;
  
  public zza(Context paramContext)
  {
    zzx = paramContext.getApplicationContext();
  }
  
  static String zza(Bundle paramBundle, String paramString)
  {
    String str2 = paramBundle.getString(paramString);
    String str1 = str2;
    if (str2 == null) {
      str1 = paramBundle.getString(paramString.replace("gcm.n.", "gcm.notification."));
    }
    return str1;
  }
  
  private static void zza(Intent paramIntent, Bundle paramBundle)
  {
    Iterator localIterator = paramBundle.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      if ((str.startsWith("google.c.a.")) || (str.equals("from"))) {
        paramIntent.putExtra(str, paramBundle.getString(str));
      }
    }
  }
  
  private final Bundle zzas()
  {
    Object localObject = zzdo;
    if (localObject != null) {
      return localObject;
    }
    localObject = null;
    try
    {
      ApplicationInfo localApplicationInfo = zzx.getPackageManager().getApplicationInfo(zzx.getPackageName(), 128);
      localObject = localApplicationInfo;
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      for (;;) {}
    }
    if ((localObject != null) && (metaData != null))
    {
      zzdo = metaData;
      return zzdo;
    }
    return Bundle.EMPTY;
  }
  
  static String zzb(Bundle paramBundle, String paramString)
  {
    paramString = String.valueOf(paramString);
    if ("_loc_key".length() != 0) {
      paramString = paramString.concat("_loc_key");
    } else {
      paramString = new String(paramString);
    }
    return zza(paramBundle, paramString);
  }
  
  private final boolean zzb(int paramInt)
  {
    if (Build.VERSION.SDK_INT != 26) {
      return true;
    }
    try
    {
      if ((zzx.getResources().getDrawable(paramInt, null) instanceof AdaptiveIconDrawable))
      {
        StringBuilder localStringBuilder = new StringBuilder(77);
        localStringBuilder.append("Adaptive icons cannot be used in notifications. Ignoring icon id: ");
        localStringBuilder.append(paramInt);
        Log.e("FirebaseMessaging", localStringBuilder.toString());
        return false;
      }
      return true;
    }
    catch (Resources.NotFoundException localNotFoundException) {}
    return false;
  }
  
  static Object[] zzc(Bundle paramBundle, String paramString)
  {
    String str = String.valueOf(paramString);
    if ("_loc_args".length() != 0) {
      str = str.concat("_loc_args");
    } else {
      str = new String(str);
    }
    str = zza(paramBundle, str);
    if (TextUtils.isEmpty(str)) {
      return null;
    }
    try
    {
      paramBundle = new JSONArray(str);
      String[] arrayOfString = new String[paramBundle.length()];
      int i = 0;
      while (i < arrayOfString.length)
      {
        arrayOfString[i] = paramBundle.opt(i);
        i += 1;
      }
      return arrayOfString;
    }
    catch (JSONException paramBundle)
    {
      for (;;) {}
    }
    paramBundle = String.valueOf(paramString);
    if ("_loc_args".length() != 0) {
      paramBundle = paramBundle.concat("_loc_args");
    } else {
      paramBundle = new String(paramBundle);
    }
    paramBundle = paramBundle.substring(6);
    paramString = new StringBuilder(String.valueOf(paramBundle).length() + 41 + String.valueOf(str).length());
    paramString.append("Malformed ");
    paramString.append(paramBundle);
    paramString.append(": ");
    paramString.append(str);
    paramString.append("  Default value will be used.");
    Log.w("FirebaseMessaging", paramString.toString());
    return null;
  }
  
  private final String zzd(Bundle paramBundle, String paramString)
  {
    String str = zza(paramBundle, paramString);
    if (!TextUtils.isEmpty(str)) {
      return str;
    }
    str = zzb(paramBundle, paramString);
    if (TextUtils.isEmpty(str)) {
      return null;
    }
    Object localObject = zzx.getResources();
    int i = ((Resources)localObject).getIdentifier(str, "string", zzx.getPackageName());
    if (i == 0)
    {
      paramBundle = String.valueOf(paramString);
      if ("_loc_key".length() != 0) {
        paramBundle = paramBundle.concat("_loc_key");
      } else {
        paramBundle = new String(paramBundle);
      }
      paramBundle = paramBundle.substring(6);
      paramString = new StringBuilder(String.valueOf(paramBundle).length() + 49 + String.valueOf(str).length());
      paramString.append(paramBundle);
      paramString.append(" resource not found: ");
      paramString.append(str);
      paramString.append(" Default value will be used.");
      Log.w("FirebaseMessaging", paramString.toString());
      return null;
    }
    paramBundle = zzc(paramBundle, paramString);
    if (paramBundle == null) {
      return ((Resources)localObject).getString(i);
    }
    try
    {
      paramString = ((Resources)localObject).getString(i, paramBundle);
      return paramString;
    }
    catch (MissingFormatArgumentException paramString)
    {
      paramBundle = Arrays.toString(paramBundle);
      localObject = new StringBuilder(String.valueOf(str).length() + 58 + String.valueOf(paramBundle).length());
      ((StringBuilder)localObject).append("Missing format argument for ");
      ((StringBuilder)localObject).append(str);
      ((StringBuilder)localObject).append(": ");
      ((StringBuilder)localObject).append(paramBundle);
      ((StringBuilder)localObject).append(" Default value will be used.");
      Log.w("FirebaseMessaging", ((StringBuilder)localObject).toString(), paramString);
    }
    return null;
  }
  
  static boolean zzf(Bundle paramBundle)
  {
    return ("1".equals(zza(paramBundle, "gcm.n.e"))) || (zza(paramBundle, "gcm.n.icon") != null);
  }
  
  static Uri zzg(Bundle paramBundle)
  {
    String str2 = zza(paramBundle, "gcm.n.link_android");
    String str1 = str2;
    if (TextUtils.isEmpty(str2)) {
      str1 = zza(paramBundle, "gcm.n.link");
    }
    if (!TextUtils.isEmpty(str1)) {
      return Uri.parse(str1);
    }
    return null;
  }
  
  static String zzi(Bundle paramBundle)
  {
    String str2 = zza(paramBundle, "gcm.n.sound2");
    String str1 = str2;
    if (TextUtils.isEmpty(str2)) {
      str1 = zza(paramBundle, "gcm.n.sound");
    }
    return str1;
  }
  
  private final Integer zzl(String paramString)
  {
    if (Build.VERSION.SDK_INT < 21) {
      return null;
    }
    if (!TextUtils.isEmpty(paramString)) {}
    try
    {
      i = Color.parseColor(paramString);
      return Integer.valueOf(i);
    }
    catch (IllegalArgumentException localIllegalArgumentException)
    {
      int i;
      StringBuilder localStringBuilder;
      for (;;) {}
    }
    localStringBuilder = new StringBuilder(String.valueOf(paramString).length() + 54);
    localStringBuilder.append("Color ");
    localStringBuilder.append(paramString);
    localStringBuilder.append(" not valid. Notification will use default color.");
    Log.w("FirebaseMessaging", localStringBuilder.toString());
    i = zzas().getInt("com.google.firebase.messaging.default_notification_color", 0);
    if (i != 0) {}
    try
    {
      i = ContextCompat.getColor(zzx, i);
      return Integer.valueOf(i);
    }
    catch (Resources.NotFoundException paramString)
    {
      for (;;) {}
    }
    Log.w("FirebaseMessaging", "Cannot find the color resource referenced in AndroidManifest.");
    return null;
  }
  
  final boolean zzh(Bundle paramBundle)
  {
    if ("1".equals(zza(paramBundle, "gcm.n.noui"))) {
      return true;
    }
    if (!((KeyguardManager)zzx.getSystemService("keyguard")).inKeyguardRestrictedInputMode())
    {
      if (!PlatformVersion.isAtLeastLollipop()) {
        SystemClock.sleep(10L);
      }
      i = Process.myPid();
      localObject1 = ((ActivityManager)zzx.getSystemService("activity")).getRunningAppProcesses();
      if (localObject1 != null)
      {
        localObject1 = ((List)localObject1).iterator();
        while (((Iterator)localObject1).hasNext())
        {
          localObject2 = (ActivityManager.RunningAppProcessInfo)((Iterator)localObject1).next();
          if (pid == i) {
            if (importance == 100)
            {
              i = 1;
              break label132;
            }
          }
        }
      }
    }
    int i = 0;
    label132:
    if (i != 0) {
      return false;
    }
    Object localObject1 = zzd(paramBundle, "gcm.n.title");
    Object localObject3 = localObject1;
    if (TextUtils.isEmpty((CharSequence)localObject1)) {
      localObject3 = zzx.getApplicationInfo().loadLabel(zzx.getPackageManager());
    }
    String str = zzd(paramBundle, "gcm.n.body");
    localObject1 = zza(paramBundle, "gcm.n.icon");
    if (!TextUtils.isEmpty((CharSequence)localObject1))
    {
      localObject2 = zzx.getResources();
      i = ((Resources)localObject2).getIdentifier((String)localObject1, "drawable", zzx.getPackageName());
      if ((i == 0) || (!zzb(i)))
      {
        i = ((Resources)localObject2).getIdentifier((String)localObject1, "mipmap", zzx.getPackageName());
        if ((i == 0) || (!zzb(i)))
        {
          localObject2 = new StringBuilder(String.valueOf(localObject1).length() + 61);
          ((StringBuilder)localObject2).append("Icon resource ");
          ((StringBuilder)localObject2).append((String)localObject1);
          ((StringBuilder)localObject2).append(" not found. Notification will use default icon.");
          Log.w("FirebaseMessaging", ((StringBuilder)localObject2).toString());
        }
      }
    }
    else
    {
      int j = zzas().getInt("com.google.firebase.messaging.default_notification_icon", 0);
      if (j != 0)
      {
        i = j;
        if (zzb(j)) {}
      }
      else
      {
        i = zzx.getApplicationInfo().icon;
      }
      if ((i != 0) && (zzb(i))) {
        break label397;
      }
      i = 17301651;
    }
    label397:
    Integer localInteger = zzl(zza(paramBundle, "gcm.n.color"));
    localObject1 = zzi(paramBundle);
    Object localObject4;
    if (TextUtils.isEmpty((CharSequence)localObject1))
    {
      localObject2 = null;
    }
    else if ((!"default".equals(localObject1)) && (zzx.getResources().getIdentifier((String)localObject1, "raw", zzx.getPackageName()) != 0))
    {
      localObject2 = zzx.getPackageName();
      localObject4 = new StringBuilder(String.valueOf(localObject2).length() + 24 + String.valueOf(localObject1).length());
      ((StringBuilder)localObject4).append("android.resource://");
      ((StringBuilder)localObject4).append((String)localObject2);
      ((StringBuilder)localObject4).append("/raw/");
      ((StringBuilder)localObject4).append((String)localObject1);
      localObject2 = Uri.parse(((StringBuilder)localObject4).toString());
    }
    else
    {
      localObject2 = RingtoneManager.getDefaultUri(2);
    }
    localObject1 = zza(paramBundle, "gcm.n.click_action");
    if (!TextUtils.isEmpty((CharSequence)localObject1))
    {
      localObject1 = new Intent((String)localObject1);
      ((Intent)localObject1).setPackage(zzx.getPackageName());
      ((Intent)localObject1).setFlags(268435456);
    }
    else
    {
      localObject4 = zzg(paramBundle);
      if (localObject4 != null)
      {
        localObject1 = new Intent("android.intent.action.VIEW");
        ((Intent)localObject1).setPackage(zzx.getPackageName());
        ((Intent)localObject1).setData((Uri)localObject4);
      }
      else
      {
        localObject4 = zzx.getPackageManager().getLaunchIntentForPackage(zzx.getPackageName());
        localObject1 = localObject4;
        if (localObject4 == null)
        {
          Log.w("FirebaseMessaging", "No activity found to launch app");
          localObject1 = localObject4;
        }
      }
    }
    Object localObject5;
    if (localObject1 == null)
    {
      localObject1 = null;
    }
    else
    {
      ((Intent)localObject1).addFlags(67108864);
      localObject4 = new Bundle(paramBundle);
      FirebaseMessagingService.zzj((Bundle)localObject4);
      ((Intent)localObject1).putExtras((Bundle)localObject4);
      localObject4 = ((Bundle)localObject4).keySet().iterator();
      while (((Iterator)localObject4).hasNext())
      {
        localObject5 = (String)((Iterator)localObject4).next();
        if ((((String)localObject5).startsWith("gcm.n.")) || (((String)localObject5).startsWith("gcm.notification."))) {
          ((Intent)localObject1).removeExtra((String)localObject5);
        }
      }
      localObject1 = PendingIntent.getActivity(zzx, zzdn.incrementAndGet(), (Intent)localObject1, 1073741824);
    }
    if (paramBundle == null) {
      bool = false;
    } else {
      bool = "1".equals(paramBundle.getString("google.c.a.e"));
    }
    if (bool)
    {
      localObject4 = new Intent("com.google.firebase.messaging.NOTIFICATION_OPEN");
      zza((Intent)localObject4, paramBundle);
      ((Intent)localObject4).putExtra("pending_intent", (Parcelable)localObject1);
      localObject5 = zzav.zza(zzx, zzdn.incrementAndGet(), (Intent)localObject4, 1073741824);
      localObject1 = new Intent("com.google.firebase.messaging.NOTIFICATION_DISMISS");
      zza((Intent)localObject1, paramBundle);
      localObject4 = zzav.zza(zzx, zzdn.incrementAndGet(), (Intent)localObject1, 1073741824);
    }
    else
    {
      localObject4 = null;
      localObject5 = localObject1;
    }
    localObject1 = zza(paramBundle, "gcm.n.android_channel_id");
    boolean bool = PlatformVersion.isAtLeastO();
    Object localObject6 = "fcm_fallback_notification_channel";
    if ((bool) && (zzx.getApplicationInfo().targetSdkVersion >= 26))
    {
      NotificationManager localNotificationManager = (NotificationManager)zzx.getSystemService(NotificationManager.class);
      if (!TextUtils.isEmpty((CharSequence)localObject1))
      {
        if (localNotificationManager.getNotificationChannel((String)localObject1) == null)
        {
          StringBuilder localStringBuilder = new StringBuilder(String.valueOf(localObject1).length() + 122);
          localStringBuilder.append("Notification Channel requested (");
          localStringBuilder.append((String)localObject1);
          localStringBuilder.append(") has not been created by the app. Manifest configuration, or default, value will be used.");
          Log.w("FirebaseMessaging", localStringBuilder.toString());
        }
      }
      else
      {
        localObject1 = zzas().getString("com.google.firebase.messaging.default_notification_channel_id");
        if (!TextUtils.isEmpty((CharSequence)localObject1))
        {
          if (localNotificationManager.getNotificationChannel((String)localObject1) != null) {
            break label1191;
          }
          Log.w("FirebaseMessaging", "Notification Channel set in AndroidManifest.xml has not been created by the app. Default value will be used.");
        }
        else
        {
          Log.w("FirebaseMessaging", "Missing Default Notification Channel metadata in AndroidManifest. Default value will be used.");
        }
        localObject1 = localObject6;
        if (localNotificationManager.getNotificationChannel("fcm_fallback_notification_channel") == null)
        {
          localNotificationManager.createNotificationChannel(new NotificationChannel("fcm_fallback_notification_channel", zzx.getString(R.string.fcm_fallback_notification_channel_label), 3));
          localObject1 = localObject6;
        }
      }
    }
    else
    {
      localObject1 = null;
    }
    label1191:
    localObject6 = new NotificationCompat.Builder(zzx).setAutoCancel(true).setSmallIcon(i);
    if (!TextUtils.isEmpty((CharSequence)localObject3)) {
      ((NotificationCompat.Builder)localObject6).setContentTitle((CharSequence)localObject3);
    }
    if (!TextUtils.isEmpty(str))
    {
      ((NotificationCompat.Builder)localObject6).setContentText(str);
      ((NotificationCompat.Builder)localObject6).setStyle(new NotificationCompat.BigTextStyle().bigText(str));
    }
    if (localInteger != null) {
      ((NotificationCompat.Builder)localObject6).setColor(localInteger.intValue());
    }
    if (localObject2 != null) {
      ((NotificationCompat.Builder)localObject6).setSound((Uri)localObject2);
    }
    if (localObject5 != null) {
      ((NotificationCompat.Builder)localObject6).setContentIntent((PendingIntent)localObject5);
    }
    if (localObject4 != null) {
      ((NotificationCompat.Builder)localObject6).setDeleteIntent((PendingIntent)localObject4);
    }
    if (localObject1 != null) {
      ((NotificationCompat.Builder)localObject6).setChannelId((String)localObject1);
    }
    Object localObject2 = ((NotificationCompat.Builder)localObject6).build();
    localObject1 = zza(paramBundle, "gcm.n.tag");
    if (Log.isLoggable("FirebaseMessaging", 3)) {
      Log.d("FirebaseMessaging", "Showing notification");
    }
    localObject3 = (NotificationManager)zzx.getSystemService("notification");
    paramBundle = (Bundle)localObject1;
    if (TextUtils.isEmpty((CharSequence)localObject1))
    {
      long l = SystemClock.uptimeMillis();
      paramBundle = new StringBuilder(37);
      paramBundle.append("FCM-Notification:");
      paramBundle.append(l);
      paramBundle = paramBundle.toString();
    }
    ((NotificationManager)localObject3).notify(paramBundle, 0, (Notification)localObject2);
    return true;
  }
}
