package com.google.android.gms.common.api.internal;

import com.google.android.gms.common.Feature;
import com.google.android.gms.common.api.Api.AnyClient;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.BiConsumer;
import com.google.android.gms.tasks.TaskCompletionSource;

public class RegistrationMethods<A extends Api.AnyClient, L>
{
  public final RegisterListenerMethod<A, L> zajy;
  public final UnregisterListenerMethod<A, L> zajz;
  
  private RegistrationMethods(RegisterListenerMethod<A, L> paramRegisterListenerMethod, UnregisterListenerMethod<A, L> paramUnregisterListenerMethod)
  {
    zajy = paramRegisterListenerMethod;
    zajz = paramUnregisterListenerMethod;
  }
  
  public static <A extends Api.AnyClient, L> Builder<A, L> builder()
  {
    return new Builder(null);
  }
  
  public static class Builder<A extends Api.AnyClient, L>
  {
    private boolean zajv = true;
    private RemoteCall<A, TaskCompletionSource<Void>> zaka;
    private RemoteCall<A, TaskCompletionSource<Boolean>> zakb;
    private ListenerHolder<L> zakc;
    private Feature[] zakd;
    
    private Builder() {}
    
    public RegistrationMethods<A, L> build()
    {
      RemoteCall localRemoteCall = zaka;
      boolean bool2 = true;
      boolean bool1;
      if (localRemoteCall != null) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      Preconditions.checkArgument(bool1, "Must set register function");
      if (zakb != null) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      Preconditions.checkArgument(bool1, "Must set unregister function");
      if (zakc != null) {
        bool1 = bool2;
      } else {
        bool1 = false;
      }
      Preconditions.checkArgument(bool1, "Must set holder");
      return new RegistrationMethods(new zaca(this, zakc, zakd, zajv), new zacb(this, zakc.getListenerKey()), null);
    }
    
    public Builder<A, L> register(RemoteCall<A, TaskCompletionSource<Void>> paramRemoteCall)
    {
      zaka = paramRemoteCall;
      return this;
    }
    
    @Deprecated
    public Builder<A, L> register(BiConsumer<A, TaskCompletionSource<Void>> paramBiConsumer)
    {
      zaka = new zaby(paramBiConsumer);
      return this;
    }
    
    public Builder<A, L> setAutoResolveMissingFeatures(boolean paramBoolean)
    {
      zajv = paramBoolean;
      return this;
    }
    
    public Builder<A, L> setFeatures(Feature[] paramArrayOfFeature)
    {
      zakd = paramArrayOfFeature;
      return this;
    }
    
    public Builder<A, L> unregister(RemoteCall<A, TaskCompletionSource<Boolean>> paramRemoteCall)
    {
      zakb = paramRemoteCall;
      return this;
    }
    
    @Deprecated
    public Builder<A, L> unregister(BiConsumer<A, TaskCompletionSource<Boolean>> paramBiConsumer)
    {
      zaka = new zabz(this);
      return this;
    }
    
    public Builder<A, L> withHolder(ListenerHolder<L> paramListenerHolder)
    {
      zakc = paramListenerHolder;
      return this;
    }
  }
}
