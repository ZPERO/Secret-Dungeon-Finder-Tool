package com.airbnb.lottie.network;

import android.content.Context;
import androidx.core.util.Pair;
import com.airbnb.lottie.utils.Logger;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

class NetworkCache
{
  private final Context appContext;
  private final String url;
  
  NetworkCache(Context paramContext, String paramString)
  {
    appContext = paramContext.getApplicationContext();
    url = paramString;
  }
  
  private static String filenameForUrl(String paramString, FileExtension paramFileExtension, boolean paramBoolean)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("lottie_cache_");
    localStringBuilder.append(paramString.replaceAll("\\W+", ""));
    if (paramBoolean) {
      paramString = paramFileExtension.tempExtension();
    } else {
      paramString = extension;
    }
    localStringBuilder.append(paramString);
    return localStringBuilder.toString();
  }
  
  private File getCachedFile(String paramString)
    throws FileNotFoundException
  {
    File localFile = new File(appContext.getCacheDir(), filenameForUrl(paramString, FileExtension.JSON, false));
    if (localFile.exists()) {
      return localFile;
    }
    paramString = new File(appContext.getCacheDir(), filenameForUrl(paramString, FileExtension.ZIP, false));
    if (paramString.exists()) {
      return paramString;
    }
    return null;
  }
  
  Pair<FileExtension, InputStream> fetch()
  {
    try
    {
      File localFile = getCachedFile(url);
      if (localFile == null) {
        return null;
      }
      FileInputStream localFileInputStream = new FileInputStream(localFile);
      FileExtension localFileExtension;
      if (localFile.getAbsolutePath().endsWith(".zip")) {
        localFileExtension = FileExtension.ZIP;
      } else {
        localFileExtension = FileExtension.JSON;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Cache hit for ");
      localStringBuilder.append(url);
      localStringBuilder.append(" at ");
      localStringBuilder.append(localFile.getAbsolutePath());
      Logger.debug(localStringBuilder.toString());
      return new Pair(localFileExtension, localFileInputStream);
    }
    catch (FileNotFoundException localFileNotFoundException) {}
    return null;
  }
  
  void renameTempFile(FileExtension paramFileExtension)
  {
    paramFileExtension = filenameForUrl(url, paramFileExtension, true);
    paramFileExtension = new File(appContext.getCacheDir(), paramFileExtension);
    File localFile = new File(paramFileExtension.getAbsolutePath().replace(".temp", ""));
    boolean bool = paramFileExtension.renameTo(localFile);
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Copying temp file to real file (");
    localStringBuilder.append(localFile);
    localStringBuilder.append(")");
    Logger.debug(localStringBuilder.toString());
    if (!bool)
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("Unable to rename cache file ");
      localStringBuilder.append(paramFileExtension.getAbsolutePath());
      localStringBuilder.append(" to ");
      localStringBuilder.append(localFile.getAbsolutePath());
      localStringBuilder.append(".");
      Logger.warning(localStringBuilder.toString());
    }
  }
  
  File writeTempCacheFile(InputStream paramInputStream, FileExtension paramFileExtension)
    throws IOException
  {
    paramFileExtension = filenameForUrl(url, paramFileExtension, true);
    File localFile = new File(appContext.getCacheDir(), paramFileExtension);
    try
    {
      paramFileExtension = new FileOutputStream(localFile);
      try
      {
        byte[] arrayOfByte = new byte['?'];
        for (;;)
        {
          int i = paramInputStream.read(arrayOfByte);
          if (i == -1) {
            break;
          }
          paramFileExtension.write(arrayOfByte, 0, i);
        }
        paramFileExtension.flush();
        paramFileExtension.close();
        return localFile;
      }
      finally
      {
        paramFileExtension.close();
      }
      throw paramFileExtension;
    }
    finally
    {
      paramInputStream.close();
    }
    for (;;) {}
  }
}
