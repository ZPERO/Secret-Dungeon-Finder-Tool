package com.squareup.okhttp.internal.http;

import com.squareup.okhttp.Address;
import com.squareup.okhttp.CertificatePinner;
import com.squareup.okhttp.Connection;
import com.squareup.okhttp.Headers;
import com.squareup.okhttp.Headers.Builder;
import com.squareup.okhttp.HttpUrl;
import com.squareup.okhttp.Interceptor;
import com.squareup.okhttp.Interceptor.Chain;
import com.squareup.okhttp.MediaType;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Protocol;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.Request.Builder;
import com.squareup.okhttp.RequestBody;
import com.squareup.okhttp.Response;
import com.squareup.okhttp.Response.Builder;
import com.squareup.okhttp.ResponseBody;
import com.squareup.okhttp.Route;
import com.squareup.okhttp.internal.Internal;
import com.squareup.okhttp.internal.InternalCache;
import com.squareup.okhttp.internal.Util;
import com.squareup.okhttp.internal.Version;
import com.squareup.okhttp.internal.io.RealConnection;
import java.io.Closeable;
import java.io.IOException;
import java.net.CookieHandler;
import java.net.ProtocolException;
import java.net.Proxy;
import java.net.Proxy.Type;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLSocketFactory;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.GzipSource;
import okio.Okio;
import okio.Sink;
import okio.Source;
import okio.Timeout;

public final class HttpEngine
{
  private static final ResponseBody EMPTY_BODY = new ResponseBody()
  {
    public long contentLength()
    {
      return 0L;
    }
    
    public MediaType contentType()
    {
      return null;
    }
    
    public BufferedSource source()
    {
      return new Buffer();
    }
  };
  public static final int MAX_FOLLOW_UPS = 20;
  public final boolean bufferRequestBody;
  private BufferedSink bufferedRequestBody;
  private Response cacheResponse;
  private CacheStrategy cacheStrategy;
  private final boolean callerWritesRequestBody;
  final OkHttpClient client;
  private final boolean forWebSocket;
  private HttpStream httpStream;
  private Request networkRequest;
  private final Response priorResponse;
  private Sink requestBodyOut;
  long sentRequestMillis = -1L;
  private CacheRequest storeRequest;
  public final StreamAllocation streamAllocation;
  private boolean transparentGzip;
  private final Request userRequest;
  private Response userResponse;
  
  public HttpEngine(OkHttpClient paramOkHttpClient, Request paramRequest, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, StreamAllocation paramStreamAllocation, RetryableSink paramRetryableSink, Response paramResponse)
  {
    client = paramOkHttpClient;
    userRequest = paramRequest;
    bufferRequestBody = paramBoolean1;
    callerWritesRequestBody = paramBoolean2;
    forWebSocket = paramBoolean3;
    if (paramStreamAllocation == null) {
      paramStreamAllocation = new StreamAllocation(paramOkHttpClient.getConnectionPool(), createAddress(paramOkHttpClient, paramRequest));
    }
    streamAllocation = paramStreamAllocation;
    requestBodyOut = paramRetryableSink;
    priorResponse = paramResponse;
  }
  
  private Response cacheWritingResponse(final CacheRequest paramCacheRequest, Response paramResponse)
    throws IOException
  {
    if (paramCacheRequest == null) {
      return paramResponse;
    }
    Sink localSink = paramCacheRequest.body();
    if (localSink == null) {
      return paramResponse;
    }
    paramCacheRequest = new Source()
    {
      boolean cacheRequestClosed;
      
      public void close()
        throws IOException
      {
        if ((!cacheRequestClosed) && (!Util.discard(this, 100, TimeUnit.MILLISECONDS)))
        {
          cacheRequestClosed = true;
          paramCacheRequest.abort();
        }
        val$source.close();
      }
      
      public long read(Buffer paramAnonymousBuffer, long paramAnonymousLong)
        throws IOException
      {
        try
        {
          paramAnonymousLong = val$source.read(paramAnonymousBuffer, paramAnonymousLong);
          if (paramAnonymousLong == -1L)
          {
            if (!cacheRequestClosed)
            {
              cacheRequestClosed = true;
              val$cacheBody.close();
            }
            return -1L;
          }
          paramAnonymousBuffer.copyTo(val$cacheBody.buffer(), paramAnonymousBuffer.size() - paramAnonymousLong, paramAnonymousLong);
          val$cacheBody.emitCompleteSegments();
          return paramAnonymousLong;
        }
        catch (IOException paramAnonymousBuffer)
        {
          if (!cacheRequestClosed)
          {
            cacheRequestClosed = true;
            paramCacheRequest.abort();
          }
          throw paramAnonymousBuffer;
        }
      }
      
      public Timeout timeout()
      {
        return val$source.timeout();
      }
    };
    return paramResponse.newBuilder().body(new RealResponseBody(paramResponse.headers(), Okio.buffer(paramCacheRequest))).build();
  }
  
  private static Headers combine(Headers paramHeaders1, Headers paramHeaders2)
    throws IOException
  {
    Headers.Builder localBuilder = new Headers.Builder();
    int k = paramHeaders1.size();
    int j = 0;
    int i = 0;
    while (i < k)
    {
      String str1 = paramHeaders1.name(i);
      String str2 = paramHeaders1.value(i);
      if (((!"Warning".equalsIgnoreCase(str1)) || (!str2.startsWith("1"))) && ((!OkHeaders.isEndToEnd(str1)) || (paramHeaders2.get(str1) == null))) {
        localBuilder.add(str1, str2);
      }
      i += 1;
    }
    k = paramHeaders2.size();
    i = j;
    while (i < k)
    {
      paramHeaders1 = paramHeaders2.name(i);
      if ((!"Content-Length".equalsIgnoreCase(paramHeaders1)) && (OkHeaders.isEndToEnd(paramHeaders1))) {
        localBuilder.add(paramHeaders1, paramHeaders2.value(i));
      }
      i += 1;
    }
    return localBuilder.build();
  }
  
  private HttpStream connect()
    throws RouteException, RequestException, IOException
  {
    boolean bool = networkRequest.method().equals("GET");
    return streamAllocation.newStream(client.getConnectTimeout(), client.getReadTimeout(), client.getWriteTimeout(), client.getRetryOnConnectionFailure(), bool ^ true);
  }
  
  private static Address createAddress(OkHttpClient paramOkHttpClient, Request paramRequest)
  {
    Object localObject2;
    Object localObject1;
    CertificatePinner localCertificatePinner;
    Object localObject3;
    if (paramRequest.isHttps())
    {
      localObject2 = paramOkHttpClient.getSslSocketFactory();
      localObject1 = paramOkHttpClient.getHostnameVerifier();
      localCertificatePinner = paramOkHttpClient.getCertificatePinner();
      localObject3 = localCertificatePinner;
    }
    else
    {
      localCertificatePinner = null;
      localObject1 = localCertificatePinner;
      localObject3 = localObject1;
      localObject2 = localCertificatePinner;
    }
    return new Address(paramRequest.httpUrl().host(), paramRequest.httpUrl().port(), paramOkHttpClient.getDns(), paramOkHttpClient.getSocketFactory(), (SSLSocketFactory)localObject2, (HostnameVerifier)localObject1, (CertificatePinner)localObject3, paramOkHttpClient.getAuthenticator(), paramOkHttpClient.getProxy(), paramOkHttpClient.getProtocols(), paramOkHttpClient.getConnectionSpecs(), paramOkHttpClient.getProxySelector());
  }
  
  public static boolean hasBody(Response paramResponse)
  {
    if (paramResponse.request().method().equals("HEAD")) {
      return false;
    }
    int i = paramResponse.code();
    if (((i < 100) || (i >= 200)) && (i != 204) && (i != 304)) {
      return true;
    }
    if (OkHeaders.contentLength(paramResponse) == -1L) {
      return "chunked".equalsIgnoreCase(paramResponse.header("Transfer-Encoding"));
    }
    return true;
  }
  
  private void maybeCache()
    throws IOException
  {
    InternalCache localInternalCache = Internal.instance.internalCache(client);
    if (localInternalCache == null) {
      return;
    }
    if ((CacheStrategy.isCacheable(userResponse, networkRequest)) || (HttpMethod.invalidatesCache(networkRequest.method()))) {}
    try
    {
      localInternalCache.remove(networkRequest);
      return;
    }
    catch (IOException localIOException) {}
    storeRequest = localInternalCache.put(stripBody(userResponse));
    return;
  }
  
  private Request networkRequest(Request paramRequest)
    throws IOException
  {
    Request.Builder localBuilder = paramRequest.newBuilder();
    if (paramRequest.header("Host") == null) {
      localBuilder.header("Host", Util.hostHeader(paramRequest.httpUrl()));
    }
    if (paramRequest.header("Connection") == null) {
      localBuilder.header("Connection", "Keep-Alive");
    }
    if (paramRequest.header("Accept-Encoding") == null)
    {
      transparentGzip = true;
      localBuilder.header("Accept-Encoding", "gzip");
    }
    CookieHandler localCookieHandler = client.getCookieHandler();
    if (localCookieHandler != null)
    {
      Map localMap = OkHeaders.toMultimap(localBuilder.build().headers(), null);
      OkHeaders.addCookies(localBuilder, localCookieHandler.get(paramRequest.uri(), localMap));
    }
    if (paramRequest.header("User-Agent") == null) {
      localBuilder.header("User-Agent", Version.userAgent());
    }
    return localBuilder.build();
  }
  
  private Response readNetworkResponse()
    throws IOException
  {
    httpStream.finishRequest();
    Response localResponse2 = httpStream.readResponseHeaders().request(networkRequest).handshake(streamAllocation.connection().getHandshake()).header(OkHeaders.SENT_MILLIS, Long.toString(sentRequestMillis)).header(OkHeaders.RECEIVED_MILLIS, Long.toString(System.currentTimeMillis())).build();
    Response localResponse1 = localResponse2;
    if (!forWebSocket) {
      localResponse1 = localResponse2.newBuilder().body(httpStream.openResponseBody(localResponse2)).build();
    }
    if (("close".equalsIgnoreCase(localResponse1.request().header("Connection"))) || ("close".equalsIgnoreCase(localResponse1.header("Connection")))) {
      streamAllocation.noNewStreams();
    }
    return localResponse1;
  }
  
  private static Response stripBody(Response paramResponse)
  {
    Response localResponse = paramResponse;
    if (paramResponse != null)
    {
      localResponse = paramResponse;
      if (paramResponse.body() != null) {
        localResponse = paramResponse.newBuilder().body(null).build();
      }
    }
    return localResponse;
  }
  
  private Response unzip(Response paramResponse)
    throws IOException
  {
    Object localObject = paramResponse;
    if (transparentGzip)
    {
      if (!"gzip".equalsIgnoreCase(userResponse.header("Content-Encoding"))) {
        return paramResponse;
      }
      if (paramResponse.body() == null) {
        return paramResponse;
      }
      localObject = new GzipSource(paramResponse.body().source());
      Headers localHeaders = paramResponse.headers().newBuilder().removeAll("Content-Encoding").removeAll("Content-Length").build();
      localObject = paramResponse.newBuilder().headers(localHeaders).body(new RealResponseBody(localHeaders, Okio.buffer((Source)localObject))).build();
    }
    return localObject;
  }
  
  private static boolean validate(Response paramResponse1, Response paramResponse2)
  {
    if (paramResponse2.code() == 304) {
      return true;
    }
    paramResponse1 = paramResponse1.headers().getDate("Last-Modified");
    if (paramResponse1 != null)
    {
      paramResponse2 = paramResponse2.headers().getDate("Last-Modified");
      if ((paramResponse2 != null) && (paramResponse2.getTime() < paramResponse1.getTime())) {
        return true;
      }
    }
    return false;
  }
  
  public void cancel()
  {
    streamAllocation.cancel();
  }
  
  public StreamAllocation close()
  {
    Object localObject = bufferedRequestBody;
    if (localObject != null)
    {
      Util.closeQuietly((Closeable)localObject);
    }
    else
    {
      localObject = requestBodyOut;
      if (localObject != null) {
        Util.closeQuietly((Closeable)localObject);
      }
    }
    localObject = userResponse;
    if (localObject != null) {
      Util.closeQuietly(((Response)localObject).body());
    } else {
      streamAllocation.connectionFailed();
    }
    return streamAllocation;
  }
  
  public Request followUpRequest()
    throws IOException
  {
    if (userResponse != null)
    {
      Object localObject = streamAllocation.connection();
      if (localObject != null) {
        localObject = ((Connection)localObject).getRoute();
      } else {
        localObject = null;
      }
      if (localObject != null) {
        localObject = ((Route)localObject).getProxy();
      } else {
        localObject = client.getProxy();
      }
      int i = userResponse.code();
      String str = userRequest.method();
      if ((i != 307) && (i != 308)) {
        if (i != 401) {
          if (i == 407) {}
        }
      }
      switch (i)
      {
      default: 
        return null;
        if (((Proxy)localObject).type() != Proxy.Type.HTTP) {
          throw new ProtocolException("Received HTTP_PROXY_AUTH (407) code while not using proxy");
        }
        return OkHeaders.processAuthHeader(client.getAuthenticator(), userResponse, (Proxy)localObject);
        if ((!str.equals("GET")) && (!str.equals("HEAD"))) {
          return null;
        }
        break;
      }
      if (!client.getFollowRedirects()) {
        return null;
      }
      localObject = userResponse.header("Location");
      if (localObject == null) {
        return null;
      }
      localObject = userRequest.httpUrl().resolve((String)localObject);
      if (localObject == null) {
        return null;
      }
      if ((!((HttpUrl)localObject).scheme().equals(userRequest.httpUrl().scheme())) && (!client.getFollowSslRedirects())) {
        return null;
      }
      Request.Builder localBuilder = userRequest.newBuilder();
      if (HttpMethod.permitsRequestBody(str))
      {
        if (HttpMethod.redirectsToGet(str)) {
          localBuilder.method("GET", null);
        } else {
          localBuilder.method(str, null);
        }
        localBuilder.removeHeader("Transfer-Encoding");
        localBuilder.removeHeader("Content-Length");
        localBuilder.removeHeader("Content-Type");
      }
      if (!sameConnection((HttpUrl)localObject)) {
        localBuilder.removeHeader("Authorization");
      }
      return localBuilder.url((HttpUrl)localObject).build();
    }
    throw new IllegalStateException();
  }
  
  public BufferedSink getBufferedRequestBody()
  {
    Object localObject = bufferedRequestBody;
    if (localObject != null) {
      return localObject;
    }
    localObject = getRequestBody();
    if (localObject != null)
    {
      localObject = Okio.buffer((Sink)localObject);
      bufferedRequestBody = ((BufferedSink)localObject);
      return localObject;
    }
    return null;
  }
  
  public Connection getConnection()
  {
    return streamAllocation.connection();
  }
  
  public Request getRequest()
  {
    return userRequest;
  }
  
  public Sink getRequestBody()
  {
    if (cacheStrategy != null) {
      return requestBodyOut;
    }
    throw new IllegalStateException();
  }
  
  public Response getResponse()
  {
    Response localResponse = userResponse;
    if (localResponse != null) {
      return localResponse;
    }
    throw new IllegalStateException();
  }
  
  public boolean hasResponse()
  {
    return userResponse != null;
  }
  
  boolean permitsRequestBody(Request paramRequest)
  {
    return HttpMethod.permitsRequestBody(paramRequest.method());
  }
  
  public void readResponse()
    throws IOException
  {
    if (userResponse != null) {
      return;
    }
    if ((networkRequest == null) && (cacheResponse == null)) {
      throw new IllegalStateException("call sendRequest() first!");
    }
    Object localObject1 = networkRequest;
    if (localObject1 == null) {
      return;
    }
    if (forWebSocket)
    {
      httpStream.writeRequestHeaders((Request)localObject1);
      localObject1 = readNetworkResponse();
    }
    else if (!callerWritesRequestBody)
    {
      localObject1 = new NetworkInterceptorChain(0, (Request)localObject1).proceed(networkRequest);
    }
    else
    {
      localObject1 = bufferedRequestBody;
      if ((localObject1 != null) && (((BufferedSink)localObject1).buffer().size() > 0L)) {
        bufferedRequestBody.emit();
      }
      if (sentRequestMillis == -1L)
      {
        if (OkHeaders.contentLength(networkRequest) == -1L)
        {
          localObject1 = requestBodyOut;
          if ((localObject1 instanceof RetryableSink))
          {
            long l = ((RetryableSink)localObject1).contentLength();
            networkRequest = networkRequest.newBuilder().header("Content-Length", Long.toString(l)).build();
          }
        }
        httpStream.writeRequestHeaders(networkRequest);
      }
      localObject1 = requestBodyOut;
      if (localObject1 != null)
      {
        localObject2 = bufferedRequestBody;
        if (localObject2 != null) {
          ((BufferedSink)localObject2).close();
        } else {
          ((Sink)localObject1).close();
        }
        localObject1 = requestBodyOut;
        if ((localObject1 instanceof RetryableSink)) {
          httpStream.writeRequestBody((RetryableSink)localObject1);
        }
      }
      localObject1 = readNetworkResponse();
    }
    receiveHeaders(((Response)localObject1).headers());
    Object localObject2 = cacheResponse;
    if (localObject2 != null)
    {
      if (validate((Response)localObject2, (Response)localObject1))
      {
        userResponse = cacheResponse.newBuilder().request(userRequest).priorResponse(stripBody(priorResponse)).headers(combine(cacheResponse.headers(), ((Response)localObject1).headers())).cacheResponse(stripBody(cacheResponse)).networkResponse(stripBody((Response)localObject1)).build();
        ((Response)localObject1).body().close();
        releaseStreamAllocation();
        localObject1 = Internal.instance.internalCache(client);
        ((InternalCache)localObject1).trackConditionalCacheHit();
        ((InternalCache)localObject1).update(cacheResponse, stripBody(userResponse));
        userResponse = unzip(userResponse);
        return;
      }
      Util.closeQuietly(cacheResponse.body());
    }
    userResponse = ((Response)localObject1).newBuilder().request(userRequest).priorResponse(stripBody(priorResponse)).cacheResponse(stripBody(cacheResponse)).networkResponse(stripBody((Response)localObject1)).build();
    if (hasBody(userResponse))
    {
      maybeCache();
      userResponse = unzip(cacheWritingResponse(storeRequest, userResponse));
    }
  }
  
  public void receiveHeaders(Headers paramHeaders)
    throws IOException
  {
    CookieHandler localCookieHandler = client.getCookieHandler();
    if (localCookieHandler != null) {
      localCookieHandler.put(userRequest.uri(), OkHeaders.toMultimap(paramHeaders, null));
    }
  }
  
  public HttpEngine recover(RouteException paramRouteException)
  {
    if (!streamAllocation.recover(paramRouteException)) {
      return null;
    }
    if (!client.getRetryOnConnectionFailure()) {
      return null;
    }
    paramRouteException = close();
    return new HttpEngine(client, userRequest, bufferRequestBody, callerWritesRequestBody, forWebSocket, paramRouteException, (RetryableSink)requestBodyOut, priorResponse);
  }
  
  public HttpEngine recover(IOException paramIOException)
  {
    return recover(paramIOException, requestBodyOut);
  }
  
  public HttpEngine recover(IOException paramIOException, Sink paramSink)
  {
    if (!streamAllocation.recover(paramIOException, paramSink)) {
      return null;
    }
    if (!client.getRetryOnConnectionFailure()) {
      return null;
    }
    paramIOException = close();
    return new HttpEngine(client, userRequest, bufferRequestBody, callerWritesRequestBody, forWebSocket, paramIOException, (RetryableSink)paramSink, priorResponse);
  }
  
  public void releaseStreamAllocation()
    throws IOException
  {
    streamAllocation.release();
  }
  
  public boolean sameConnection(HttpUrl paramHttpUrl)
  {
    HttpUrl localHttpUrl = userRequest.httpUrl();
    return (localHttpUrl.host().equals(paramHttpUrl.host())) && (localHttpUrl.port() == paramHttpUrl.port()) && (localHttpUrl.scheme().equals(paramHttpUrl.scheme()));
  }
  
  public void sendRequest()
    throws RequestException, RouteException, IOException
  {
    if (cacheStrategy != null) {
      return;
    }
    if (httpStream == null)
    {
      Request localRequest = networkRequest(userRequest);
      InternalCache localInternalCache = Internal.instance.internalCache(client);
      Response localResponse;
      if (localInternalCache != null) {
        localResponse = localInternalCache.get(localRequest);
      } else {
        localResponse = null;
      }
      cacheStrategy = new CacheStrategy.Factory(System.currentTimeMillis(), localRequest, localResponse).get();
      networkRequest = cacheStrategy.networkRequest;
      cacheResponse = cacheStrategy.cacheResponse;
      if (localInternalCache != null) {
        localInternalCache.trackResponse(cacheStrategy);
      }
      if ((localResponse != null) && (cacheResponse == null)) {
        Util.closeQuietly(localResponse.body());
      }
      if (networkRequest != null)
      {
        httpStream = connect();
        httpStream.setHttpEngine(this);
        if ((callerWritesRequestBody) && (permitsRequestBody(networkRequest)) && (requestBodyOut == null))
        {
          long l = OkHeaders.contentLength(localRequest);
          if (bufferRequestBody)
          {
            if (l <= 2147483647L)
            {
              if (l != -1L)
              {
                httpStream.writeRequestHeaders(networkRequest);
                requestBodyOut = new RetryableSink((int)l);
                return;
              }
              requestBodyOut = new RetryableSink();
              return;
            }
            throw new IllegalStateException("Use setFixedLengthStreamingMode() or setChunkedStreamingMode() for requests larger than 2 GiB.");
          }
          httpStream.writeRequestHeaders(networkRequest);
          requestBodyOut = httpStream.createRequestBody(networkRequest, l);
        }
      }
      else
      {
        localResponse = cacheResponse;
        if (localResponse != null) {
          userResponse = localResponse.newBuilder().request(userRequest).priorResponse(stripBody(priorResponse)).cacheResponse(stripBody(cacheResponse)).build();
        } else {
          userResponse = new Response.Builder().request(userRequest).priorResponse(stripBody(priorResponse)).protocol(Protocol.HTTP_1_1).code(504).message("Unsatisfiable Request (only-if-cached)").body(EMPTY_BODY).build();
        }
        userResponse = unzip(userResponse);
      }
      return;
    }
    throw new IllegalStateException();
  }
  
  public void writingRequestHeaders()
  {
    if (sentRequestMillis == -1L)
    {
      sentRequestMillis = System.currentTimeMillis();
      return;
    }
    throw new IllegalStateException();
  }
  
  class NetworkInterceptorChain
    implements Interceptor.Chain
  {
    private int calls;
    private final int index;
    private final Request request;
    
    NetworkInterceptorChain(int paramInt, Request paramRequest)
    {
      index = paramInt;
      request = paramRequest;
    }
    
    public Connection connection()
    {
      return streamAllocation.connection();
    }
    
    public Response proceed(Request paramRequest)
      throws IOException
    {
      calls += 1;
      Object localObject2;
      if (index > 0)
      {
        localObject1 = (Interceptor)client.networkInterceptors().get(index - 1);
        localObject2 = connection().getRoute().getAddress();
        if ((paramRequest.httpUrl().host().equals(((Address)localObject2).getUriHost())) && (paramRequest.httpUrl().port() == ((Address)localObject2).getUriPort()))
        {
          if (calls > 1)
          {
            paramRequest = new StringBuilder();
            paramRequest.append("network interceptor ");
            paramRequest.append(localObject1);
            paramRequest.append(" must call proceed() exactly once");
            throw new IllegalStateException(paramRequest.toString());
          }
        }
        else
        {
          paramRequest = new StringBuilder();
          paramRequest.append("network interceptor ");
          paramRequest.append(localObject1);
          paramRequest.append(" must retain the same host and port");
          throw new IllegalStateException(paramRequest.toString());
        }
      }
      if (index < client.networkInterceptors().size())
      {
        localObject1 = new NetworkInterceptorChain(HttpEngine.this, index + 1, paramRequest);
        paramRequest = (Interceptor)client.networkInterceptors().get(index);
        localObject2 = paramRequest.intercept((Interceptor.Chain)localObject1);
        if (calls == 1)
        {
          if (localObject2 != null) {
            return localObject2;
          }
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append("network interceptor ");
          ((StringBuilder)localObject1).append(paramRequest);
          ((StringBuilder)localObject1).append(" returned null");
          throw new NullPointerException(((StringBuilder)localObject1).toString());
        }
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("network interceptor ");
        ((StringBuilder)localObject1).append(paramRequest);
        ((StringBuilder)localObject1).append(" must call proceed() exactly once");
        throw new IllegalStateException(((StringBuilder)localObject1).toString());
      }
      httpStream.writeRequestHeaders(paramRequest);
      HttpEngine.access$102(HttpEngine.this, paramRequest);
      if ((permitsRequestBody(paramRequest)) && (paramRequest.body() != null))
      {
        localObject1 = Okio.buffer(httpStream.createRequestBody(paramRequest, paramRequest.body().contentLength()));
        paramRequest.body().writeTo((BufferedSink)localObject1);
        ((BufferedSink)localObject1).close();
      }
      paramRequest = HttpEngine.this.readNetworkResponse();
      int i = paramRequest.code();
      if (((i != 204) && (i != 205)) || (paramRequest.body().contentLength() <= 0L)) {
        return paramRequest;
      }
      Object localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("HTTP ");
      ((StringBuilder)localObject1).append(i);
      ((StringBuilder)localObject1).append(" had non-zero Content-Length: ");
      ((StringBuilder)localObject1).append(paramRequest.body().contentLength());
      throw new ProtocolException(((StringBuilder)localObject1).toString());
    }
    
    public Request request()
    {
      return request;
    }
  }
}
