package kotlin.collections;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.RandomAccess;
import java.util.Set;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.TuplesKt;
import kotlin.TypeCastException;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt.compareBy.2;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt.compareByDescending.1;
import kotlin.internal.PlatformImplementationsKt;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Lambda;
import kotlin.random.Random;
import kotlin.ranges.IntRange;
import kotlin.ranges.RangesKt___RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt___SequencesKt;
import kotlin.text.StringsKt__StringBuilderKt;

@Metadata(bv={1, 0, 3}, d1={"\000?\002\n\000\n\002\020\013\n\000\n\002\020\034\n\000\n\002\030\002\n\002\b\003\n\002\030\002\n\000\n\002\020$\n\002\b\003\n\002\030\002\n\002\b\005\n\002\020%\n\002\b\b\n\002\020\006\n\002\020\005\n\002\b\002\n\002\020\007\n\000\n\002\020\b\n\000\n\002\020\t\n\000\n\002\020\n\n\002\b\002\n\002\020 \n\002\b\t\n\002\030\002\n\002\b\003\n\002\020\036\n\002\b\023\n\002\030\002\n\002\030\002\n\002\b\003\n\002\020\037\n\002\b\002\n\002\030\002\n\002\b\004\n\002\020\000\n\002\b\023\n\002\030\002\n\002\b\006\n\002\020\002\n\002\b\006\n\002\020!\n\000\n\002\030\002\n\002\b\006\n\002\020\"\n\002\b\003\n\002\030\002\n\002\030\002\n\002\b\002\n\002\020\r\n\002\b\006\n\002\020\016\n\002\b\f\n\002\020\017\n\002\b\006\n\002\030\002\n\002\030\002\n\002\b\007\n\002\020\021\n\002\b\f\n\002\030\002\n\002\b\020\n\002\030\002\n\002\b\027\n\002\020\030\n\000\n\002\020\022\n\000\n\002\020\031\n\002\020\f\n\002\b\002\n\002\020\023\n\000\n\002\020\024\n\000\n\002\030\002\n\002\030\002\n\000\n\002\020\025\n\002\b\002\n\002\020\026\n\002\b\002\n\002\020#\n\002\b\002\n\002\020\027\n\002\b\005\n\002\030\002\n\002\b\006\032-\020\000\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\032\026\020\006\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032-\020\006\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\032\037\020\007\032\b\022\004\022\002H\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\003H?\b\032\034\020\b\032\b\022\004\022\002H\0020\t\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032Q\020\n\032\016\022\004\022\002H\f\022\004\022\002H\r0\013\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\036\020\016\032\032\022\004\022\002H\002\022\020\022\016\022\004\022\002H\f\022\004\022\002H\r0\0170\005H?\b\032?\020\020\032\016\022\004\022\002H\f\022\004\022\002H\0020\013\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H?\b\032Y\020\020\032\016\022\004\022\002H\f\022\004\022\002H\r0\013\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H?\b\032Z\020\023\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\030\b\002\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\0020\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H?\b?\006\002\020\027\032t\020\023\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r\"\030\b\003\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\r0\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H?\b?\006\002\020\030\032l\020\031\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r\"\030\b\003\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\r0\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\036\020\016\032\032\022\004\022\002H\002\022\020\022\016\022\004\022\002H\f\022\004\022\002H\r0\0170\005H?\b?\006\002\020\027\032?\020\032\032\016\022\004\022\002H\f\022\004\022\002H\r0\013\"\004\b\000\020\f\"\004\b\001\020\r*\b\022\004\022\002H\f0\0032\022\020\033\032\016\022\004\022\002H\f\022\004\022\002H\r0\005H?\b\032Z\020\034\032\002H\024\"\004\b\000\020\f\"\004\b\001\020\r\"\030\b\002\020\024*\022\022\006\b\000\022\002H\f\022\006\b\000\022\002H\r0\025*\b\022\004\022\002H\f0\0032\006\020\026\032\002H\0242\022\020\033\032\016\022\004\022\002H\f\022\004\022\002H\r0\005H?\b?\006\002\020\027\032\027\020\035\032\0020\036*\b\022\004\022\0020\0370\003H\007?\006\002\b \032\027\020\035\032\0020\036*\b\022\004\022\0020\0360\003H\007?\006\002\b!\032\027\020\035\032\0020\036*\b\022\004\022\0020\"0\003H\007?\006\002\b#\032\027\020\035\032\0020\036*\b\022\004\022\0020$0\003H\007?\006\002\b%\032\027\020\035\032\0020\036*\b\022\004\022\0020&0\003H\007?\006\002\b'\032\027\020\035\032\0020\036*\b\022\004\022\0020(0\003H\007?\006\002\b)\032,\020*\032\016\022\n\022\b\022\004\022\002H\0020+0+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020,\032\0020$H\007\032F\020*\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020,\032\0020$2\030\020\016\032\024\022\n\022\b\022\004\022\002H\0020+\022\004\022\002H-0\005H\007\032\036\020.\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+H?\n?\006\002\020/\032\036\0200\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+H?\n?\006\002\020/\032\036\0201\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+H?\n?\006\002\020/\032\036\0202\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+H?\n?\006\002\020/\032\036\0203\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+H?\n?\006\002\020/\032+\0204\032\0020\001\"\t\b\000\020\002?\006\002\b5*\b\022\004\022\002H\0020\0032\006\0206\032\002H\002H?\002?\006\002\0207\032\031\0208\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\00209H?\b\032\026\0208\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032-\0208\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\032\034\020:\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\0329\020;\032\b\022\004\022\002H\0020+\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H?\b\032$\020=\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020>\032\0020$\032$\020?\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\006\020>\032\0020$\0323\020@\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\0323\020A\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\032#\020B\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020C\032\0020$?\006\002\020D\032&\020B\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\006\020C\032\0020$H?\b?\006\002\020E\0327\020F\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020C\032\0020$2\022\020G\032\016\022\004\022\0020$\022\004\022\002H\0020\005?\006\002\020H\032:\020F\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\006\020C\032\0020$2\022\020G\032\016\022\004\022\0020$\022\004\022\002H\0020\005H?\b?\006\002\020I\032%\020J\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020C\032\0020$?\006\002\020D\032(\020J\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\006\020C\032\0020$H?\b?\006\002\020E\0323\020K\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\032H\020L\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032'\020\004\032#\022\023\022\0210$?\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\004\022\0020\0010MH?\b\032a\020P\032\002HQ\"\004\b\000\020\002\"\020\b\001\020Q*\n\022\006\b\000\022\002H\0020R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2'\020\004\032#\022\023\022\0210$?\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\004\022\0020\0010MH?\b?\006\002\020S\032$\020T\032\r\022\t\022\007H-?\006\002\bU0+\"\006\b\000\020-\030\001*\006\022\002\b\0030\003H?\b\0328\020V\032\002HQ\"\006\b\000\020-\030\001\"\020\b\001\020Q*\n\022\006\b\000\022\002H-0R*\006\022\002\b\0030\0032\006\020\026\032\002HQH?\b?\006\002\020W\0323\020X\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\032\"\020Y\032\b\022\004\022\002H\0020+\"\b\b\000\020\002*\0020Z*\n\022\006\022\004\030\001H\0020\003\032;\020[\032\002HQ\"\020\b\000\020Q*\n\022\006\b\000\022\002H\0020R\"\b\b\001\020\002*\0020Z*\n\022\006\022\004\030\001H\0020\0032\006\020\026\032\002HQ?\006\002\020W\032L\020\\\032\002HQ\"\004\b\000\020\002\"\020\b\001\020Q*\n\022\006\b\000\022\002H\0020R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b?\006\002\020]\032L\020^\032\002HQ\"\004\b\000\020\002\"\020\b\001\020Q*\n\022\006\b\000\022\002H\0020R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b?\006\002\020]\0324\020_\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b?\006\002\020`\0324\020a\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b?\006\002\020`\0324\020a\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b?\006\002\020b\032\033\020c\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003?\006\002\020d\0322\020c\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b?\006\002\020`\032\033\020c\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+?\006\002\020/\032\035\020e\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003?\006\002\020d\0324\020e\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b?\006\002\020`\032\035\020e\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+?\006\002\020/\032?\020f\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\030\020\016\032\024\022\004\022\002H\002\022\n\022\b\022\004\022\002H-0\0030\005H?\b\032X\020g\032\002HQ\"\004\b\000\020\002\"\004\b\001\020-\"\020\b\002\020Q*\n\022\006\b\000\022\002H-0R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2\030\020\016\032\024\022\004\022\002H\002\022\n\022\b\022\004\022\002H-0\0030\005H?\b?\006\002\020]\032U\020h\032\002H-\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020i\032\002H-2'\020j\032#\022\023\022\021H-?\006\f\bN\022\b\bO\022\004\b\b(k\022\004\022\002H\002\022\004\022\002H-0MH?\b?\006\002\020l\032j\020m\032\002H-\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020i\032\002H-2<\020j\0328\022\023\022\0210$?\006\f\bN\022\b\bO\022\004\b\b(C\022\023\022\021H-?\006\f\bN\022\b\bO\022\004\b\b(k\022\004\022\002H\002\022\004\022\002H-0nH?\b?\006\002\020o\032U\020p\032\002H-\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020+2\006\020i\032\002H-2'\020j\032#\022\004\022\002H\002\022\023\022\021H-?\006\f\bN\022\b\bO\022\004\b\b(k\022\004\022\002H-0MH?\b?\006\002\020q\032j\020r\032\002H-\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020+2\006\020i\032\002H-2<\020j\0328\022\023\022\0210$?\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\023\022\021H-?\006\f\bN\022\b\bO\022\004\b\b(k\022\004\022\002H-0nH?\b?\006\002\020s\032-\020t\032\0020u\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020v\032\016\022\004\022\002H\002\022\004\022\0020u0\005H?\b\032B\020w\032\0020u\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032'\020v\032#\022\023\022\0210$?\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\004\022\0020u0MH?\b\032:\020x\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\006\020C\032\0020$2\022\020G\032\016\022\004\022\0020$\022\004\022\002H\0020\005H?\b?\006\002\020I\032%\020y\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\006\020C\032\0020$?\006\002\020E\032E\020z\032\024\022\004\022\002H\f\022\n\022\b\022\004\022\002H\0020+0\013\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H?\b\032_\020z\032\024\022\004\022\002H\f\022\n\022\b\022\004\022\002H\r0+0\013\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H?\b\032^\020{\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\034\b\002\020\024*\026\022\006\b\000\022\002H\f\022\n\022\b\022\004\022\002H\0020|0\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H?\b?\006\002\020\027\032x\020{\032\002H\024\"\004\b\000\020\002\"\004\b\001\020\f\"\004\b\002\020\r\"\034\b\003\020\024*\026\022\006\b\000\022\002H\f\022\n\022\b\022\004\022\002H\r0|0\025*\b\022\004\022\002H\0020\0032\006\020\026\032\002H\0242\022\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\0052\022\020\022\032\016\022\004\022\002H\002\022\004\022\002H\r0\005H?\b?\006\002\020\030\032A\020}\032\016\022\004\022\002H\002\022\004\022\002H\f0~\"\004\b\000\020\002\"\004\b\001\020\f*\b\022\004\022\002H\0020\0032\024\b\004\020\021\032\016\022\004\022\002H\002\022\004\022\002H\f0\005H?\b\032)\020\032\0020$\"\t\b\000\020\002?\006\002\b5*\b\022\004\022\002H\0020\0032\006\0206\032\002H\002?\006\003\020?\001\032)\020\032\0020$\"\t\b\000\020\002?\006\002\b5*\b\022\004\022\002H\0020+2\006\0206\032\002H\002?\006\003\020?\001\032.\020?\001\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\032.\020?\001\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\032.\020?\001\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\032.\020?\001\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\0320\020?\001\032\t\022\004\022\002H\0020?\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020?\001\032\b\022\004\022\002H\0020\003H?\004\032?\001\020?\001\032\003H?\001\"\004\b\000\020\002\"\017\b\001\020?\001*\b0?\001j\003`?\001*\b\022\004\022\002H\0020\0032\b\020?\001\032\003H?\0012\n\b\002\020?\001\032\0030?\0012\n\b\002\020?\001\032\0030?\0012\n\b\002\020?\001\032\0030?\0012\t\b\002\020?\001\032\0020$2\n\b\002\020?\001\032\0030?\0012\027\b\002\020\016\032\021\022\004\022\002H\002\022\005\022\0030?\001\030\0010\005?\006\003\020?\001\032l\020?\001\032\0030?\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\n\b\002\020?\001\032\0030?\0012\n\b\002\020?\001\032\0030?\0012\n\b\002\020?\001\032\0030?\0012\t\b\002\020?\001\032\0020$2\n\b\002\020?\001\032\0030?\0012\027\b\002\020\016\032\021\022\004\022\002H\002\022\005\022\0030?\001\030\0010\005\032\034\020?\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003?\006\002\020d\0323\020?\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b?\006\002\020`\032\034\020?\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+?\006\002\020/\0323\020?\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b?\006\002\020b\032*\020?\001\032\0020$\"\t\b\000\020\002?\006\002\b5*\b\022\004\022\002H\0020\0032\006\0206\032\002H\002?\006\003\020?\001\032*\020?\001\032\0020$\"\t\b\000\020\002?\006\002\b5*\b\022\004\022\002H\0020+2\006\0206\032\002H\002?\006\003\020?\001\032\036\020?\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003?\006\002\020d\0325\020?\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b?\006\002\020`\032\036\020?\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+?\006\002\020/\0325\020?\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b?\006\002\020b\032:\020?\001\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\022\020\016\032\016\022\004\022\002H\002\022\004\022\002H-0\005H?\b\032O\020?\001\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032'\020\016\032#\022\023\022\0210$?\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\004\022\002H-0MH?\b\032U\020?\001\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\b\b\001\020-*\0020Z*\b\022\004\022\002H\0020\0032)\020\016\032%\022\023\022\0210$?\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\006\022\004\030\001H-0MH?\b\032n\020?\001\032\002HQ\"\004\b\000\020\002\"\b\b\001\020-*\0020Z\"\020\b\002\020Q*\n\022\006\b\000\022\002H-0R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2)\020\016\032%\022\023\022\0210$?\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\006\022\004\030\001H-0MH?\b?\006\002\020S\032h\020?\001\032\002HQ\"\004\b\000\020\002\"\004\b\001\020-\"\020\b\002\020Q*\n\022\006\b\000\022\002H-0R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2'\020\016\032#\022\023\022\0210$?\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\004\022\002H-0MH?\b?\006\002\020S\032@\020?\001\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\b\b\001\020-*\0020Z*\b\022\004\022\002H\0020\0032\024\020\016\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H?\b\032Y\020?\001\032\002HQ\"\004\b\000\020\002\"\b\b\001\020-*\0020Z\"\020\b\002\020Q*\n\022\006\b\000\022\002H-0R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2\024\020\016\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H?\b?\006\002\020]\032S\020?\001\032\002HQ\"\004\b\000\020\002\"\004\b\001\020-\"\020\b\002\020Q*\n\022\006\b\000\022\002H-0R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ2\022\020\016\032\016\022\004\022\002H\002\022\004\022\002H-0\005H?\b?\006\002\020]\032*\020?\001\032\004\030\001H\002\"\017\b\000\020\002*\t\022\004\022\002H\0020?\001*\b\022\004\022\002H\0020\003?\006\003\020?\001\032\033\020?\001\032\004\030\0010\036*\b\022\004\022\0020\0360\003H\007?\006\003\020?\001\032\033\020?\001\032\004\030\0010\"*\b\022\004\022\0020\"0\003H\007?\006\003\020?\001\032F\020?\001\032\004\030\001H\002\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0?\001*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\002H-0\005H?\b?\006\002\020`\032>\020?\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020?\001\032\030\022\006\b\000\022\002H\0020?\001j\013\022\006\b\000\022\002H\002`?\001?\006\003\020?\001\032*\020?\001\032\004\030\001H\002\"\017\b\000\020\002*\t\022\004\022\002H\0020?\001*\b\022\004\022\002H\0020\003?\006\003\020?\001\032\033\020?\001\032\004\030\0010\036*\b\022\004\022\0020\0360\003H\007?\006\003\020?\001\032\033\020?\001\032\004\030\0010\"*\b\022\004\022\0020\"0\003H\007?\006\003\020?\001\032F\020?\001\032\004\030\001H\002\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0?\001*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\002H-0\005H?\b?\006\002\020`\032>\020?\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020?\001\032\030\022\006\b\000\022\002H\0020?\001j\013\022\006\b\000\022\002H\002`?\001?\006\003\020?\001\032.\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0206\032\002H\002H?\002?\006\003\020?\001\0328\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\020\020?\001\032\013\022\006\b\001\022\002H\0020?\001H?\002?\006\003\020?\001\032/\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020?\001\032\b\022\004\022\002H\0020\003H?\002\032/\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020?\001\032\b\022\004\022\002H\0020\tH?\002\032.\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0206\032\002H\002H?\b?\006\003\020?\001\032\027\020?\001\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032.\020?\001\032\0020\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\032>\020?\001\032\002HQ\"\004\b\000\020\002\"\016\b\001\020Q*\b\022\004\022\002H\0020\003*\002HQ2\022\020v\032\016\022\004\022\002H\002\022\004\022\0020u0\005H?\b?\006\003\020?\001\032F\020?\001\032\032\022\n\022\b\022\004\022\002H\0020+\022\n\022\b\022\004\022\002H\0020+0\017\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\032.\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\002092\006\0206\032\002H\002H?\002?\006\003\020?\001\0328\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\002092\020\020?\001\032\013\022\006\b\001\022\002H\0020?\001H?\002?\006\003\020?\001\032/\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\002092\r\020?\001\032\b\022\004\022\002H\0020\003H?\002\032/\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\002092\r\020?\001\032\b\022\004\022\002H\0020\tH?\002\032.\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0206\032\002H\002H?\002?\006\003\020?\001\0328\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\020\020?\001\032\013\022\006\b\001\022\002H\0020?\001H?\002?\006\003\020?\001\032/\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020?\001\032\b\022\004\022\002H\0020\003H?\002\032/\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020?\001\032\b\022\004\022\002H\0020\tH?\002\032.\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\002092\006\0206\032\002H\002H?\b?\006\003\020?\001\032.\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\0206\032\002H\002H?\b?\006\003\020?\001\032 \020?\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\00209H?\b?\006\003\020?\001\032)\020?\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\002092\b\020?\001\032\0030?\001H\007?\006\003\020?\001\032X\020?\001\032\003H?\001\"\005\b\000\020?\001\"\t\b\001\020\002*\003H?\001*\b\022\004\022\002H\0020\0032)\020j\032%\022\024\022\022H?\001?\006\f\bN\022\b\bO\022\004\b\b(k\022\004\022\002H\002\022\005\022\003H?\0010MH?\b?\006\003\020?\001\032m\020?\001\032\003H?\001\"\005\b\000\020?\001\"\t\b\001\020\002*\003H?\001*\b\022\004\022\002H\0020\0032>\020j\032:\022\023\022\0210$?\006\f\bN\022\b\bO\022\004\b\b(C\022\024\022\022H?\001?\006\f\bN\022\b\bO\022\004\b\b(k\022\004\022\002H\002\022\005\022\003H?\0010nH?\b?\006\003\020?\001\032X\020?\001\032\003H?\001\"\005\b\000\020?\001\"\t\b\001\020\002*\003H?\001*\b\022\004\022\002H\0020+2)\020j\032%\022\004\022\002H\002\022\024\022\022H?\001?\006\f\bN\022\b\bO\022\004\b\b(k\022\005\022\003H?\0010MH?\b?\006\003\020?\001\032m\020?\001\032\003H?\001\"\005\b\000\020?\001\"\t\b\001\020\002*\003H?\001*\b\022\004\022\002H\0020+2>\020j\032:\022\023\022\0210$?\006\f\bN\022\b\bO\022\004\b\b(C\022\004\022\002H\002\022\024\022\022H?\001?\006\f\bN\022\b\bO\022\004\b\b(k\022\005\022\003H?\0010nH?\b?\006\003\020?\001\032#\020?\001\032\b\022\004\022\002H\0020\003\"\b\b\000\020\002*\0020Z*\n\022\006\022\004\030\001H\0020\003\032#\020?\001\032\b\022\004\022\002H\0020+\"\b\b\000\020\002*\0020Z*\n\022\006\022\004\030\001H\0020+\032\035\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\034\020?\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003?\006\002\020d\0323\020?\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b?\006\002\020`\032\034\020?\001\032\002H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+?\006\002\020/\032\036\020?\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\003?\006\002\020d\0325\020?\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b?\006\002\020`\032\036\020?\001\032\004\030\001H\002\"\004\b\000\020\002*\b\022\004\022\002H\0020+?\006\002\020/\032,\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\r\020?\001\032\b\022\004\022\0020$0\003\032'\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\b\020?\001\032\0030?\001\032C\020?\001\032\0020u\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0?\001*\b\022\004\022\002H\0020|2\026\b\004\020<\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H?\b\032C\020?\001\032\0020u\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0?\001*\b\022\004\022\002H\0020|2\026\b\004\020<\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H?\b\032\"\020?\001\032\0020u\"\017\b\000\020\002*\t\022\004\022\002H\0020?\001*\b\022\004\022\002H\0020|\032(\020?\001\032\b\022\004\022\002H\0020+\"\017\b\000\020\002*\t\022\004\022\002H\0020?\001*\b\022\004\022\002H\0020\003\032I\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0?\001*\b\022\004\022\002H\0020\0032\026\b\004\020<\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H?\b\032I\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002\"\017\b\001\020-*\t\022\004\022\002H-0?\001*\b\022\004\022\002H\0020\0032\026\b\004\020<\032\020\022\004\022\002H\002\022\006\022\004\030\001H-0\005H?\b\032(\020?\001\032\b\022\004\022\002H\0020+\"\017\b\000\020\002*\t\022\004\022\002H\0020?\001*\b\022\004\022\002H\0020\003\032<\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\035\020?\001\032\030\022\006\b\000\022\002H\0020?\001j\013\022\006\b\000\022\002H\002`?\001\0320\020?\001\032\t\022\004\022\002H\0020?\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020?\001\032\b\022\004\022\002H\0020\003H?\004\032\031\020?\001\032\0020$*\b\022\004\022\0020\0370\003H\007?\006\003\b?\001\032\031\020?\001\032\0020\036*\b\022\004\022\0020\0360\003H\007?\006\003\b?\001\032\031\020?\001\032\0020\"*\b\022\004\022\0020\"0\003H\007?\006\003\b?\001\032\031\020?\001\032\0020$*\b\022\004\022\0020$0\003H\007?\006\003\b?\001\032\031\020?\001\032\0020&*\b\022\004\022\0020&0\003H\007?\006\003\b?\001\032\031\020?\001\032\0020$*\b\022\004\022\0020(0\003H\007?\006\003\b?\001\032.\020?\001\032\0020$\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020$0\005H?\b\032.\020?\001\032\0020\036\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020<\032\016\022\004\022\002H\002\022\004\022\0020\0360\005H?\b\032%\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020>\032\0020$\032%\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\006\020>\032\0020$\0324\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020+2\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\0324\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\022\020\004\032\016\022\004\022\002H\002\022\004\022\0020\0010\005H?\b\032\022\020?\001\032\0030?\001*\b\022\004\022\0020\00109\032\022\020?\001\032\0030?\001*\b\022\004\022\0020\03709\032\023\020?\001\032\0030?\001*\t\022\005\022\0030?\00109\0326\020?\001\032\002HQ\"\004\b\000\020\002\"\020\b\001\020Q*\n\022\006\b\000\022\002H\0020R*\b\022\004\022\002H\0020\0032\006\020\026\032\002HQ?\006\002\020W\032\022\020?\001\032\0030?\001*\b\022\004\022\0020\03609\032\022\020?\001\032\0030?\001*\b\022\004\022\0020\"09\032)\020?\001\032\024\022\004\022\002H\0020?\001j\t\022\004\022\002H\002`?\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\022\020?\001\032\0030?\001*\b\022\004\022\0020$09\032\035\020?\001\032\b\022\004\022\002H\0020+\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\022\020?\001\032\0030?\001*\b\022\004\022\0020&09\032\035\020?\001\032\b\022\004\022\002H\0020|\"\004\b\000\020\002*\b\022\004\022\002H\00209\032\035\020?\001\032\b\022\004\022\002H\0020|\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\036\020?\001\032\t\022\004\022\002H\0020?\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\036\020?\001\032\t\022\004\022\002H\0020?\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032\022\020?\001\032\0030?\001*\b\022\004\022\0020(09\0320\020?\002\032\t\022\004\022\002H\0020?\001\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\r\020?\001\032\b\022\004\022\002H\0020\003H?\004\032C\020?\002\032\016\022\n\022\b\022\004\022\002H\0020+0+\"\004\b\000\020\002*\b\022\004\022\002H\0020\0032\006\020,\032\0020$2\t\b\002\020?\002\032\0020$2\t\b\002\020?\002\032\0020\001H\007\032]\020?\002\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\006\020,\032\0020$2\t\b\002\020?\002\032\0020$2\t\b\002\020?\002\032\0020\0012\030\020\016\032\024\022\n\022\b\022\004\022\002H\0020+\022\004\022\002H-0\005H\007\032$\020?\002\032\017\022\013\022\t\022\004\022\002H\0020?\0020\003\"\004\b\000\020\002*\b\022\004\022\002H\0020\003\032J\020?\002\032\024\022\020\022\016\022\004\022\002H\002\022\004\022\002H-0\0170+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\020\020?\001\032\013\022\006\b\001\022\002H-0?\001H?\004?\006\003\020?\001\032~\020?\002\032\b\022\004\022\002H\r0+\"\004\b\000\020\002\"\004\b\001\020-\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\020\020?\001\032\013\022\006\b\001\022\002H-0?\00128\020\016\0324\022\024\022\022H\002?\006\r\bN\022\t\bO\022\005\b\b(?\002\022\024\022\022H-?\006\r\bN\022\t\bO\022\005\b\b(?\002\022\004\022\002H\r0MH?\b?\006\003\020?\002\032A\020?\002\032\024\022\020\022\016\022\004\022\002H\002\022\004\022\002H-0\0170+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\0032\r\020?\001\032\b\022\004\022\002H-0\003H?\004\032u\020?\002\032\b\022\004\022\002H\r0+\"\004\b\000\020\002\"\004\b\001\020-\"\004\b\002\020\r*\b\022\004\022\002H\0020\0032\r\020?\001\032\b\022\004\022\002H-0\00328\020\016\0324\022\024\022\022H\002?\006\r\bN\022\t\bO\022\005\b\b(?\002\022\024\022\022H-?\006\r\bN\022\t\bO\022\005\b\b(?\002\022\004\022\002H\r0MH?\b\032+\020?\002\032\024\022\020\022\016\022\004\022\002H\002\022\004\022\002H\0020\0170+\"\004\b\000\020\002*\b\022\004\022\002H\0020\003H\007\032`\020?\002\032\b\022\004\022\002H-0+\"\004\b\000\020\002\"\004\b\001\020-*\b\022\004\022\002H\0020\00328\020\016\0324\022\024\022\022H\002?\006\r\bN\022\t\bO\022\005\b\b(?\002\022\024\022\022H\002?\006\r\bN\022\t\bO\022\005\b\b(?\002\022\004\022\002H-0MH?\b?\006?\002"}, d2={"all", "", "T", "", "predicate", "Lkotlin/Function1;", "any", "asIterable", "asSequence", "Lkotlin/sequences/Sequence;", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "associateWith", "valueSelector", "associateWithTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "component1", "(Ljava/util/List;)Ljava/lang/Object;", "component2", "component3", "component4", "component5", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Ljava/lang/Iterable;Ljava/lang/Object;)Z", "count", "", "distinct", "distinctBy", "selector", "drop", "n", "dropLast", "dropLastWhile", "dropWhile", "elementAt", "index", "(Ljava/lang/Iterable;I)Ljava/lang/Object;", "(Ljava/util/List;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "(Ljava/util/List;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Ljava/lang/Iterable;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "first", "(Ljava/lang/Iterable;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "fold", "initial", "operation", "acc", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldRightIndexed", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "getOrElse", "getOrNull", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Ljava/lang/Iterable;Ljava/lang/Object;)I", "(Ljava/util/List;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "intersect", "", "other", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Ljava/lang/Iterable;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Ljava/lang/Iterable;)Ljava/lang/Comparable;", "(Ljava/lang/Iterable;)Ljava/lang/Double;", "(Ljava/lang/Iterable;)Ljava/lang/Float;", "maxBy", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/util/List;", "elements", "", "(Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/util/List;", "minusElement", "none", "onEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Iterable;", "partition", "plus", "(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;[Ljava/lang/Object;)Ljava/util/List;", "plusElement", "random", "(Ljava/util/Collection;)Ljava/lang/Object;", "Lkotlin/random/Random;", "(Ljava/util/Collection;Lkotlin/random/Random;)Ljava/lang/Object;", "reduce", "S", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceRight", "(Ljava/util/List;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceRightIndexed", "(Ljava/util/List;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "requireNoNulls", "reversed", "single", "singleOrNull", "slice", "indices", "Lkotlin/ranges/IntRange;", "sortBy", "sortByDescending", "sortDescending", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "subtract", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "take", "takeLast", "takeLastWhile", "takeWhile", "toBooleanArray", "", "toByteArray", "", "toCharArray", "", "", "toCollection", "toDoubleArray", "", "toFloatArray", "", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toIntArray", "", "toList", "toLongArray", "", "toMutableList", "toMutableSet", "", "toSet", "toShortArray", "", "union", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "a", "b", "(Ljava/lang/Iterable;[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "zipWithNext", "kotlin-stdlib"}, k=5, mv={1, 1, 15}, xi=1, xs="kotlin/collections/CollectionsKt")
class CollectionsKt___CollectionsKt
  extends CollectionsKt___CollectionsJvmKt
{
  public CollectionsKt___CollectionsKt() {}
  
  public static final boolean all(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$all");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    if (((paramIterable instanceof Collection)) && (((Collection)paramIterable).isEmpty())) {
      return true;
    }
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      if (!((Boolean)paramFunction1.invoke(paramIterable.next())).booleanValue()) {
        return false;
      }
    }
    return true;
  }
  
  public static final boolean any(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$any");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    if (((paramIterable instanceof Collection)) && (((Collection)paramIterable).isEmpty())) {
      return false;
    }
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      if (((Boolean)paramFunction1.invoke(paramIterable.next())).booleanValue()) {
        return true;
      }
    }
    return false;
  }
  
  private static final Iterable asIterable(Iterable paramIterable)
  {
    return paramIterable;
  }
  
  public static final Sequence asSequence(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$asSequence");
    (Sequence)new Sequence()
    {
      public Iterator iterator()
      {
        return CollectionsKt___CollectionsKt.this.iterator();
      }
    };
  }
  
  public static final Map associate(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$associate");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    Map localMap = (Map)new LinkedHashMap(RangesKt___RangesKt.coerceAtLeast(MapsKt__MapsKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable, 10)), 16));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Pair localPair = (Pair)paramFunction1.invoke(paramIterable.next());
      localMap.put(localPair.getFirst(), localPair.getSecond());
    }
    return localMap;
  }
  
  public static final Map associateBy(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$associateBy");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "keySelector");
    Map localMap = (Map)new LinkedHashMap(RangesKt___RangesKt.coerceAtLeast(MapsKt__MapsKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable, 10)), 16));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      localMap.put(paramFunction1.invoke(localObject), localObject);
    }
    return localMap;
  }
  
  public static final Map associateBy(Iterable paramIterable, Function1 paramFunction11, Function1 paramFunction12)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$associateBy");
    Intrinsics.checkParameterIsNotNull(paramFunction11, "keySelector");
    Intrinsics.checkParameterIsNotNull(paramFunction12, "valueTransform");
    Map localMap = (Map)new LinkedHashMap(RangesKt___RangesKt.coerceAtLeast(MapsKt__MapsKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable, 10)), 16));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      localMap.put(paramFunction11.invoke(localObject), paramFunction12.invoke(localObject));
    }
    return localMap;
  }
  
  public static final Map associateByTo(Iterable paramIterable, Map paramMap, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$associateByTo");
    Intrinsics.checkParameterIsNotNull(paramMap, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "keySelector");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      paramMap.put(paramFunction1.invoke(localObject), localObject);
    }
    return paramMap;
  }
  
  public static final Map associateByTo(Iterable paramIterable, Map paramMap, Function1 paramFunction11, Function1 paramFunction12)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$associateByTo");
    Intrinsics.checkParameterIsNotNull(paramMap, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction11, "keySelector");
    Intrinsics.checkParameterIsNotNull(paramFunction12, "valueTransform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      paramMap.put(paramFunction11.invoke(localObject), paramFunction12.invoke(localObject));
    }
    return paramMap;
  }
  
  public static final Map associateTo(Iterable paramIterable, Map paramMap, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$associateTo");
    Intrinsics.checkParameterIsNotNull(paramMap, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Pair localPair = (Pair)paramFunction1.invoke(paramIterable.next());
      paramMap.put(localPair.getFirst(), localPair.getSecond());
    }
    return paramMap;
  }
  
  public static final Map associateWith(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$associateWith");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "valueSelector");
    LinkedHashMap localLinkedHashMap = new LinkedHashMap(RangesKt___RangesKt.coerceAtLeast(MapsKt__MapsKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable, 10)), 16));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      ((Map)localLinkedHashMap).put(localObject, paramFunction1.invoke(localObject));
    }
    return (Map)localLinkedHashMap;
  }
  
  public static final Map associateWithTo(Iterable paramIterable, Map paramMap, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$associateWithTo");
    Intrinsics.checkParameterIsNotNull(paramMap, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "valueSelector");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      paramMap.put(localObject, paramFunction1.invoke(localObject));
    }
    return paramMap;
  }
  
  public static final double averageOfByte(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$average");
    paramIterable = paramIterable.iterator();
    double d1 = 0.0D;
    int i = 0;
    while (paramIterable.hasNext())
    {
      d2 = ((Number)paramIterable.next()).byteValue();
      Double.isNaN(d2);
      d2 = d1 + d2;
      int j = i + 1;
      d1 = d2;
      i = j;
      if (j < 0)
      {
        CollectionsKt__CollectionsKt.throwCountOverflow();
        d1 = d2;
        i = j;
      }
    }
    if (i == 0) {
      return DoubleCompanionObject.INSTANCE.getNaN();
    }
    double d2 = i;
    Double.isNaN(d2);
    return d1 / d2;
  }
  
  public static final double averageOfDouble(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$average");
    paramIterable = paramIterable.iterator();
    double d1 = 0.0D;
    int i = 0;
    while (paramIterable.hasNext())
    {
      d2 = d1 + ((Number)paramIterable.next()).doubleValue();
      int j = i + 1;
      d1 = d2;
      i = j;
      if (j < 0)
      {
        CollectionsKt__CollectionsKt.throwCountOverflow();
        d1 = d2;
        i = j;
      }
    }
    if (i == 0) {
      return DoubleCompanionObject.INSTANCE.getNaN();
    }
    double d2 = i;
    Double.isNaN(d2);
    return d1 / d2;
  }
  
  public static final double averageOfFloat(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$average");
    paramIterable = paramIterable.iterator();
    double d1 = 0.0D;
    int i = 0;
    while (paramIterable.hasNext())
    {
      d2 = ((Number)paramIterable.next()).floatValue();
      Double.isNaN(d2);
      d2 = d1 + d2;
      int j = i + 1;
      d1 = d2;
      i = j;
      if (j < 0)
      {
        CollectionsKt__CollectionsKt.throwCountOverflow();
        d1 = d2;
        i = j;
      }
    }
    if (i == 0) {
      return DoubleCompanionObject.INSTANCE.getNaN();
    }
    double d2 = i;
    Double.isNaN(d2);
    return d1 / d2;
  }
  
  public static final double averageOfInt(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$average");
    paramIterable = paramIterable.iterator();
    double d1 = 0.0D;
    int i = 0;
    while (paramIterable.hasNext())
    {
      d2 = ((Number)paramIterable.next()).intValue();
      Double.isNaN(d2);
      d2 = d1 + d2;
      int j = i + 1;
      d1 = d2;
      i = j;
      if (j < 0)
      {
        CollectionsKt__CollectionsKt.throwCountOverflow();
        d1 = d2;
        i = j;
      }
    }
    if (i == 0) {
      return DoubleCompanionObject.INSTANCE.getNaN();
    }
    double d2 = i;
    Double.isNaN(d2);
    return d1 / d2;
  }
  
  public static final double averageOfLong(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$average");
    paramIterable = paramIterable.iterator();
    double d1 = 0.0D;
    int i = 0;
    while (paramIterable.hasNext())
    {
      d2 = ((Number)paramIterable.next()).longValue();
      Double.isNaN(d2);
      d2 = d1 + d2;
      int j = i + 1;
      d1 = d2;
      i = j;
      if (j < 0)
      {
        CollectionsKt__CollectionsKt.throwCountOverflow();
        d1 = d2;
        i = j;
      }
    }
    if (i == 0) {
      return DoubleCompanionObject.INSTANCE.getNaN();
    }
    double d2 = i;
    Double.isNaN(d2);
    return d1 / d2;
  }
  
  public static final double averageOfShort(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$average");
    paramIterable = paramIterable.iterator();
    double d1 = 0.0D;
    int i = 0;
    while (paramIterable.hasNext())
    {
      d2 = ((Number)paramIterable.next()).shortValue();
      Double.isNaN(d2);
      d2 = d1 + d2;
      int j = i + 1;
      d1 = d2;
      i = j;
      if (j < 0)
      {
        CollectionsKt__CollectionsKt.throwCountOverflow();
        d1 = d2;
        i = j;
      }
    }
    if (i == 0) {
      return DoubleCompanionObject.INSTANCE.getNaN();
    }
    double d2 = i;
    Double.isNaN(d2);
    return d1 / d2;
  }
  
  public static final List chunked(Iterable paramIterable, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$chunked");
    return windowed(paramIterable, paramInt, paramInt, true);
  }
  
  public static final List chunked(Iterable paramIterable, int paramInt, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$chunked");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    return windowed(paramIterable, paramInt, paramInt, true, paramFunction1);
  }
  
  private static final Object component1(List paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$component1");
    return paramList.get(0);
  }
  
  private static final Object component2(List paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$component2");
    return paramList.get(1);
  }
  
  private static final Object component3(List paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$component3");
    return paramList.get(2);
  }
  
  private static final Object component4(List paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$component4");
    return paramList.get(3);
  }
  
  private static final Object component5(List paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$component5");
    return paramList.get(4);
  }
  
  public static final boolean contains(Iterable paramIterable, Object paramObject)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$contains");
    if ((paramIterable instanceof Collection)) {
      return ((Collection)paramIterable).contains(paramObject);
    }
    return indexOf(paramIterable, paramObject) >= 0;
  }
  
  public static final int count(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$count");
    if ((paramIterable instanceof Collection)) {
      return ((Collection)paramIterable).size();
    }
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      paramIterable.next();
      int j = i + 1;
      i = j;
      if (j < 0)
      {
        CollectionsKt__CollectionsKt.throwCountOverflow();
        i = j;
      }
    }
    return i;
  }
  
  public static final int count(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$count");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    if (((paramIterable instanceof Collection)) && (((Collection)paramIterable).isEmpty())) {
      return 0;
    }
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext()) {
      if (((Boolean)paramFunction1.invoke(paramIterable.next())).booleanValue())
      {
        int j = i + 1;
        i = j;
        if (j < 0) {
          if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0))
          {
            CollectionsKt__CollectionsKt.throwCountOverflow();
            i = j;
          }
          else
          {
            throw ((Throwable)new ArithmeticException("Count overflow has happened."));
          }
        }
      }
    }
    return i;
  }
  
  private static final int count(Collection paramCollection)
  {
    return paramCollection.size();
  }
  
  public static final List distinct(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$distinct");
    return toList((Iterable)toMutableSet(paramIterable));
  }
  
  public static final List distinctBy(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$distinctBy");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    HashSet localHashSet = new HashSet();
    ArrayList localArrayList = new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (localHashSet.add(paramFunction1.invoke(localObject))) {
        localArrayList.add(localObject);
      }
    }
    return (List)localArrayList;
  }
  
  public static final List drop(Iterable paramIterable, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$drop");
    int j = 0;
    int i;
    if (paramInt >= 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0)
    {
      if (paramInt == 0) {
        return toList(paramIterable);
      }
      Object localObject2;
      Object localObject1;
      if ((paramIterable instanceof Collection))
      {
        Collection localCollection = (Collection)paramIterable;
        i = localCollection.size() - paramInt;
        if (i <= 0) {
          return CollectionsKt__CollectionsKt.emptyList();
        }
        if (i == 1) {
          return CollectionsKt__CollectionsJVMKt.listOf(last(paramIterable));
        }
        localObject2 = new ArrayList(i);
        localObject1 = localObject2;
        if ((paramIterable instanceof List))
        {
          if ((paramIterable instanceof RandomAccess))
          {
            i = localCollection.size();
            while (paramInt < i)
            {
              ((ArrayList)localObject2).add(((List)paramIterable).get(paramInt));
              paramInt += 1;
            }
          }
          paramIterable = (Iterator)((List)paramIterable).listIterator(paramInt);
          while (paramIterable.hasNext()) {
            ((ArrayList)localObject2).add(paramIterable.next());
          }
          return (List)localObject2;
        }
      }
      else
      {
        localObject1 = new ArrayList();
      }
      paramIterable = paramIterable.iterator();
      i = j;
      while (paramIterable.hasNext())
      {
        localObject2 = paramIterable.next();
        if (i >= paramInt) {
          ((ArrayList)localObject1).add(localObject2);
        } else {
          i += 1;
        }
      }
      return CollectionsKt__CollectionsKt.optimizeReadOnlyList((List)localObject1);
    }
    paramIterable = new StringBuilder();
    paramIterable.append("Requested element count ");
    paramIterable.append(paramInt);
    paramIterable.append(" is less than zero.");
    paramIterable = (Throwable)new IllegalArgumentException(paramIterable.toString().toString());
    throw paramIterable;
  }
  
  public static final List dropLast(List paramList, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$dropLast");
    int i;
    if (paramInt >= 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0) {
      return take((Iterable)paramList, RangesKt___RangesKt.coerceAtLeast(paramList.size() - paramInt, 0));
    }
    paramList = new StringBuilder();
    paramList.append("Requested element count ");
    paramList.append(paramInt);
    paramList.append(" is less than zero.");
    throw ((Throwable)new IllegalArgumentException(paramList.toString().toString()));
  }
  
  public static final List dropLastWhile(List paramList, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$dropLastWhile");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    if (!paramList.isEmpty())
    {
      ListIterator localListIterator = paramList.listIterator(paramList.size());
      while (localListIterator.hasPrevious()) {
        if (!((Boolean)paramFunction1.invoke(localListIterator.previous())).booleanValue()) {
          return take((Iterable)paramList, localListIterator.nextIndex() + 1);
        }
      }
    }
    return CollectionsKt__CollectionsKt.emptyList();
  }
  
  public static final List dropWhile(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$dropWhile");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    ArrayList localArrayList = new ArrayList();
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i != 0)
      {
        localArrayList.add(localObject);
      }
      else if (!((Boolean)paramFunction1.invoke(localObject)).booleanValue())
      {
        localArrayList.add(localObject);
        i = 1;
      }
    }
    return (List)localArrayList;
  }
  
  public static final Object elementAt(Iterable paramIterable, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$elementAt");
    if ((paramIterable instanceof List)) {
      return ((List)paramIterable).get(paramInt);
    }
    elementAtOrElse(paramIterable, paramInt, (Function1)new Lambda(paramInt)
    {
      public final Void invoke(int paramAnonymousInt)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Collection doesn't contain element at index ");
        localStringBuilder.append($index);
        localStringBuilder.append('.');
        throw ((Throwable)new IndexOutOfBoundsException(localStringBuilder.toString()));
      }
    });
  }
  
  private static final Object elementAt(List paramList, int paramInt)
  {
    return paramList.get(paramInt);
  }
  
  public static final Object elementAtOrElse(Iterable paramIterable, int paramInt, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$elementAtOrElse");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "defaultValue");
    if ((paramIterable instanceof List))
    {
      paramIterable = (List)paramIterable;
      if ((paramInt >= 0) && (paramInt <= CollectionsKt__CollectionsKt.getLastIndex(paramIterable))) {
        return paramIterable.get(paramInt);
      }
      return paramFunction1.invoke(Integer.valueOf(paramInt));
    }
    if (paramInt < 0) {
      return paramFunction1.invoke(Integer.valueOf(paramInt));
    }
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (paramInt == i) {
        return localObject;
      }
      i += 1;
    }
    return paramFunction1.invoke(Integer.valueOf(paramInt));
  }
  
  private static final Object elementAtOrElse(List paramList, int paramInt, Function1 paramFunction1)
  {
    if ((paramInt >= 0) && (paramInt <= CollectionsKt__CollectionsKt.getLastIndex(paramList))) {
      return paramList.get(paramInt);
    }
    return paramFunction1.invoke(Integer.valueOf(paramInt));
  }
  
  public static final Object elementAtOrNull(Iterable paramIterable, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$elementAtOrNull");
    if ((paramIterable instanceof List)) {
      return getOrNull((List)paramIterable, paramInt);
    }
    if (paramInt < 0) {
      return null;
    }
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (paramInt == i) {
        return localObject;
      }
      i += 1;
    }
    return null;
  }
  
  private static final Object elementAtOrNull(List paramList, int paramInt)
  {
    return getOrNull(paramList, paramInt);
  }
  
  public static final List filter(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$filter");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  public static final boolean filter(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$any");
    if ((paramIterable instanceof Collection)) {
      return ((Collection)paramIterable).isEmpty() ^ true;
    }
    return paramIterable.iterator().hasNext();
  }
  
  public static final List filterIndexed(Iterable paramIterable, Function2 paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$filterIndexed");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "predicate");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
          CollectionsKt__CollectionsKt.throwIndexOverflow();
        } else {
          throw ((Throwable)new ArithmeticException("Index overflow has happened."));
        }
      }
      if (((Boolean)paramFunction2.invoke(Integer.valueOf(i), localObject)).booleanValue()) {
        localCollection.add(localObject);
      }
      i += 1;
    }
    return (List)localCollection;
  }
  
  public static final Collection filterIndexedTo(Iterable paramIterable, Collection paramCollection, Function2 paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$filterIndexedTo");
    Intrinsics.checkParameterIsNotNull(paramCollection, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "predicate");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
          CollectionsKt__CollectionsKt.throwIndexOverflow();
        } else {
          throw ((Throwable)new ArithmeticException("Index overflow has happened."));
        }
      }
      if (((Boolean)paramFunction2.invoke(Integer.valueOf(i), localObject)).booleanValue()) {
        paramCollection.add(localObject);
      }
      i += 1;
    }
    return paramCollection;
  }
  
  public static final List filterNot(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$filterNot");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  public static final List filterNotNull(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$filterNotNull");
    return (List)filterNotNullTo(paramIterable, (Collection)new ArrayList());
  }
  
  public static final Collection filterNotNullTo(Iterable paramIterable, Collection paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$filterNotNullTo");
    Intrinsics.checkParameterIsNotNull(paramCollection, "destination");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (localObject != null) {
        paramCollection.add(localObject);
      }
    }
    return paramCollection;
  }
  
  public static final Collection filterNotTo(Iterable paramIterable, Collection paramCollection, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$filterNotTo");
    Intrinsics.checkParameterIsNotNull(paramCollection, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        paramCollection.add(localObject);
      }
    }
    return paramCollection;
  }
  
  public static final Collection filterTo(Iterable paramIterable, Collection paramCollection, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$filterTo");
    Intrinsics.checkParameterIsNotNull(paramCollection, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        paramCollection.add(localObject);
      }
    }
    return paramCollection;
  }
  
  private static final Object find(Iterable paramIterable, Function1 paramFunction1)
  {
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return localObject;
      }
    }
    return null;
  }
  
  private static final Object findLast(Iterable paramIterable, Function1 paramFunction1)
  {
    Iterator localIterator = paramIterable.iterator();
    paramIterable = null;
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        paramIterable = localObject;
      }
    }
    return paramIterable;
  }
  
  private static final Object findLast(List paramList, Function1 paramFunction1)
  {
    paramList = paramList.listIterator(paramList.size());
    while (paramList.hasPrevious())
    {
      Object localObject = paramList.previous();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return localObject;
      }
    }
    return null;
  }
  
  public static final Object first(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$first");
    if ((paramIterable instanceof List)) {
      return first((List)paramIterable);
    }
    paramIterable = paramIterable.iterator();
    if (paramIterable.hasNext()) {
      return paramIterable.next();
    }
    throw ((Throwable)new NoSuchElementException("Collection is empty."));
  }
  
  public static final Object first(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$first");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return localObject;
      }
    }
    paramIterable = (Throwable)new NoSuchElementException("Collection contains no element matching the predicate.");
    throw paramIterable;
  }
  
  public static final Object first(List paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$first");
    if (!paramList.isEmpty()) {
      return paramList.get(0);
    }
    throw ((Throwable)new NoSuchElementException("List is empty."));
  }
  
  public static final Object firstOrNull(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$firstOrNull");
    if ((paramIterable instanceof List))
    {
      paramIterable = (List)paramIterable;
      if (paramIterable.isEmpty()) {
        return null;
      }
      return paramIterable.get(0);
    }
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    return paramIterable.next();
  }
  
  public static final Object firstOrNull(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$firstOrNull");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return localObject;
      }
    }
    return null;
  }
  
  public static final Object firstOrNull(List paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$firstOrNull");
    if (paramList.isEmpty()) {
      return null;
    }
    return paramList.get(0);
  }
  
  public static final List flatMap(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$flatMap");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      CollectionsKt__MutableCollectionsKt.addAll(localCollection, (Iterable)paramFunction1.invoke(paramIterable.next()));
    }
    return (List)localCollection;
  }
  
  public static final Collection flatMapTo(Iterable paramIterable, Collection paramCollection, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$flatMapTo");
    Intrinsics.checkParameterIsNotNull(paramCollection, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      CollectionsKt__MutableCollectionsKt.addAll(paramCollection, (Iterable)paramFunction1.invoke(paramIterable.next()));
    }
    return paramCollection;
  }
  
  public static final Object fold(Iterable paramIterable, Object paramObject, Function2 paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$fold");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "operation");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      paramObject = paramFunction2.invoke(paramObject, paramIterable.next());
    }
    return paramObject;
  }
  
  public static final Object foldIndexed(Iterable paramIterable, Object paramObject, Function3 paramFunction3)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$foldIndexed");
    Intrinsics.checkParameterIsNotNull(paramFunction3, "operation");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
          CollectionsKt__CollectionsKt.throwIndexOverflow();
        } else {
          throw ((Throwable)new ArithmeticException("Index overflow has happened."));
        }
      }
      paramObject = paramFunction3.invoke(Integer.valueOf(i), paramObject, localObject);
      i += 1;
    }
    return paramObject;
  }
  
  public static final Object foldRight(List paramList, Object paramObject, Function2 paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$foldRight");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "operation");
    Object localObject = paramObject;
    if (!paramList.isEmpty())
    {
      paramList = paramList.listIterator(paramList.size());
      for (;;)
      {
        localObject = paramObject;
        if (!paramList.hasPrevious()) {
          break;
        }
        paramObject = paramFunction2.invoke(paramList.previous(), paramObject);
      }
    }
    return localObject;
  }
  
  public static final Object foldRightIndexed(List paramList, Object paramObject, Function3 paramFunction3)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$foldRightIndexed");
    Intrinsics.checkParameterIsNotNull(paramFunction3, "operation");
    Object localObject = paramObject;
    if (!paramList.isEmpty())
    {
      paramList = paramList.listIterator(paramList.size());
      for (;;)
      {
        localObject = paramObject;
        if (!paramList.hasPrevious()) {
          break;
        }
        paramObject = paramFunction3.invoke(Integer.valueOf(paramList.previousIndex()), paramList.previous(), paramObject);
      }
    }
    return localObject;
  }
  
  public static final void forEach(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$forEach");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "action");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      paramFunction1.invoke(paramIterable.next());
    }
  }
  
  public static final void forEachIndexed(Iterable paramIterable, Function2 paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$forEachIndexed");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "action");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
          CollectionsKt__CollectionsKt.throwIndexOverflow();
        } else {
          throw ((Throwable)new ArithmeticException("Index overflow has happened."));
        }
      }
      paramFunction2.invoke(Integer.valueOf(i), localObject);
      i += 1;
    }
  }
  
  private static final Object getOrElse(List paramList, int paramInt, Function1 paramFunction1)
  {
    if ((paramInt >= 0) && (paramInt <= CollectionsKt__CollectionsKt.getLastIndex(paramList))) {
      return paramList.get(paramInt);
    }
    return paramFunction1.invoke(Integer.valueOf(paramInt));
  }
  
  public static final Object getOrNull(List paramList, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$getOrNull");
    if ((paramInt >= 0) && (paramInt <= CollectionsKt__CollectionsKt.getLastIndex(paramList))) {
      return paramList.get(paramInt);
    }
    return null;
  }
  
  public static final Map groupBy(Iterable paramIterable, Function1 paramFunction1)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a9 = a8\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static final Map groupBy(Iterable paramIterable, Function1 paramFunction11, Function1 paramFunction12)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a10 = a9\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static final Map groupByTo(Iterable paramIterable, Map paramMap, Function1 paramFunction1)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a9 = a8\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static final Map groupByTo(Iterable paramIterable, Map paramMap, Function1 paramFunction11, Function1 paramFunction12)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: fail exe a10 = a9\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:92)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.exec(BaseAnalyze.java:1)\n\tat com.googlecode.dex2jar.ir.ts.Cfg.dfs(Cfg.java:255)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze0(BaseAnalyze.java:75)\n\tat com.googlecode.dex2jar.ir.ts.an.BaseAnalyze.analyze(BaseAnalyze.java:69)\n\tat com.googlecode.dex2jar.ir.ts.UnSSATransformer.transform(UnSSATransformer.java:274)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:163)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\nCaused by: java.lang.NullPointerException\n");
  }
  
  public static final Grouping groupingBy(Iterable paramIterable, final Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$groupingBy");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "keySelector");
    (Grouping)new Grouping()
    {
      public Object keyOf(Object paramAnonymousObject)
      {
        return paramFunction1.invoke(paramAnonymousObject);
      }
      
      public Iterator sourceIterator()
      {
        return iterator();
      }
    };
  }
  
  public static final int indexOf(Iterable paramIterable, Object paramObject)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$indexOf");
    if ((paramIterable instanceof List)) {
      return ((List)paramIterable).indexOf(paramObject);
    }
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        CollectionsKt__CollectionsKt.throwIndexOverflow();
      }
      if (Intrinsics.areEqual(paramObject, localObject)) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  public static final int indexOf(List paramList, Object paramObject)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$indexOf");
    return paramList.indexOf(paramObject);
  }
  
  public static final int indexOfFirst(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$indexOfFirst");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
          CollectionsKt__CollectionsKt.throwIndexOverflow();
        } else {
          throw ((Throwable)new ArithmeticException("Index overflow has happened."));
        }
      }
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  public static final int indexOfFirst(List paramList, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$indexOfFirst");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramList = paramList.iterator();
    int i = 0;
    while (paramList.hasNext())
    {
      if (((Boolean)paramFunction1.invoke(paramList.next())).booleanValue()) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  public static final int indexOfLast(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$indexOfLast");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramIterable = paramIterable.iterator();
    int j = -1;
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
          CollectionsKt__CollectionsKt.throwIndexOverflow();
        } else {
          throw ((Throwable)new ArithmeticException("Index overflow has happened."));
        }
      }
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        j = i;
      }
      i += 1;
    }
    return j;
  }
  
  public static final int indexOfLast(List paramList, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$indexOfLast");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramList = paramList.listIterator(paramList.size());
    while (paramList.hasPrevious()) {
      if (((Boolean)paramFunction1.invoke(paramList.previous())).booleanValue()) {
        return paramList.nextIndex();
      }
    }
    return -1;
  }
  
  public static final Set intersect(Iterable paramIterable1, Iterable paramIterable2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable1, "$this$intersect");
    Intrinsics.checkParameterIsNotNull(paramIterable2, "other");
    paramIterable1 = toMutableSet(paramIterable1);
    CollectionsKt__MutableCollectionsKt.retainAll((Collection)paramIterable1, paramIterable2);
    return paramIterable1;
  }
  
  public static final Appendable joinTo(Iterable paramIterable, Appendable paramAppendable, CharSequence paramCharSequence1, CharSequence paramCharSequence2, CharSequence paramCharSequence3, int paramInt, CharSequence paramCharSequence4, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$joinTo");
    Intrinsics.checkParameterIsNotNull(paramAppendable, "buffer");
    Intrinsics.checkParameterIsNotNull(paramCharSequence1, "separator");
    Intrinsics.checkParameterIsNotNull(paramCharSequence2, "prefix");
    Intrinsics.checkParameterIsNotNull(paramCharSequence3, "postfix");
    Intrinsics.checkParameterIsNotNull(paramCharSequence4, "truncated");
    paramAppendable.append(paramCharSequence2);
    paramIterable = paramIterable.iterator();
    int i = 0;
    int j;
    for (;;)
    {
      j = i;
      if (!paramIterable.hasNext()) {
        break;
      }
      paramCharSequence2 = paramIterable.next();
      i += 1;
      if (i > 1) {
        paramAppendable.append(paramCharSequence1);
      }
      if (paramInt >= 0)
      {
        j = i;
        if (i > paramInt) {
          break;
        }
      }
      StringsKt__StringBuilderKt.appendElement(paramAppendable, paramCharSequence2, paramFunction1);
    }
    if ((paramInt >= 0) && (j > paramInt)) {
      paramAppendable.append(paramCharSequence4);
    }
    paramAppendable.append(paramCharSequence3);
    return paramAppendable;
  }
  
  public static final String joinToString(Iterable paramIterable, CharSequence paramCharSequence1, CharSequence paramCharSequence2, CharSequence paramCharSequence3, int paramInt, CharSequence paramCharSequence4, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$joinToString");
    Intrinsics.checkParameterIsNotNull(paramCharSequence1, "separator");
    Intrinsics.checkParameterIsNotNull(paramCharSequence2, "prefix");
    Intrinsics.checkParameterIsNotNull(paramCharSequence3, "postfix");
    Intrinsics.checkParameterIsNotNull(paramCharSequence4, "truncated");
    paramIterable = ((StringBuilder)joinTo(paramIterable, (Appendable)new StringBuilder(), paramCharSequence1, paramCharSequence2, paramCharSequence3, paramInt, paramCharSequence4, paramFunction1)).toString();
    Intrinsics.checkExpressionValueIsNotNull(paramIterable, "joinTo(StringBuilder(), ?ed, transform).toString()");
    return paramIterable;
  }
  
  public static final Object last(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$last");
    if ((paramIterable instanceof List)) {
      return last((List)paramIterable);
    }
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = localIterator.next()) {}
      return paramIterable;
    }
    paramIterable = (Throwable)new NoSuchElementException("Collection is empty.");
    throw paramIterable;
  }
  
  public static final Object last(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$last");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    Iterator localIterator = paramIterable.iterator();
    paramIterable = null;
    int i = 0;
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue())
      {
        paramIterable = localObject;
        i = 1;
      }
    }
    if (i != 0) {
      return paramIterable;
    }
    paramIterable = (Throwable)new NoSuchElementException("Collection contains no element matching the predicate.");
    throw paramIterable;
  }
  
  public static final Object last(List paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$last");
    if (!paramList.isEmpty()) {
      return paramList.get(CollectionsKt__CollectionsKt.getLastIndex(paramList));
    }
    throw ((Throwable)new NoSuchElementException("List is empty."));
  }
  
  public static final Object last(List paramList, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$last");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramList = paramList.listIterator(paramList.size());
    while (paramList.hasPrevious())
    {
      Object localObject = paramList.previous();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return localObject;
      }
    }
    paramList = (Throwable)new NoSuchElementException("List contains no element matching the predicate.");
    throw paramList;
  }
  
  public static final int lastIndexOf(Iterable paramIterable, Object paramObject)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$lastIndexOf");
    if ((paramIterable instanceof List)) {
      return ((List)paramIterable).lastIndexOf(paramObject);
    }
    int j = -1;
    int i = 0;
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        CollectionsKt__CollectionsKt.throwIndexOverflow();
      }
      if (Intrinsics.areEqual(paramObject, localObject)) {
        j = i;
      }
      i += 1;
    }
    return j;
  }
  
  public static final int lastIndexOf(List paramList, Object paramObject)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$lastIndexOf");
    return paramList.lastIndexOf(paramObject);
  }
  
  public static final Object lastOrNull(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$lastOrNull");
    if ((paramIterable instanceof List))
    {
      paramIterable = (List)paramIterable;
      if (paramIterable.isEmpty()) {
        return null;
      }
      return paramIterable.get(paramIterable.size() - 1);
    }
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = localIterator.next()) {}
    return paramIterable;
  }
  
  public static final Object lastOrNull(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$lastOrNull");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    Iterator localIterator = paramIterable.iterator();
    paramIterable = null;
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        paramIterable = localObject;
      }
    }
    return paramIterable;
  }
  
  public static final Object lastOrNull(List paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$lastOrNull");
    if (paramList.isEmpty()) {
      return null;
    }
    return paramList.get(paramList.size() - 1);
  }
  
  public static final Object lastOrNull(List paramList, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$lastOrNull");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    paramList = paramList.listIterator(paramList.size());
    while (paramList.hasPrevious())
    {
      Object localObject = paramList.previous();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        return localObject;
      }
    }
    return null;
  }
  
  public static final List map(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$map");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    Collection localCollection = (Collection)new ArrayList(CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable, 10));
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      localCollection.add(paramFunction1.invoke(paramIterable.next()));
    }
    return (List)localCollection;
  }
  
  public static final List mapIndexed(Iterable paramIterable, Function2 paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$mapIndexed");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "transform");
    Collection localCollection = (Collection)new ArrayList(CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable, 10));
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
          CollectionsKt__CollectionsKt.throwIndexOverflow();
        } else {
          throw ((Throwable)new ArithmeticException("Index overflow has happened."));
        }
      }
      localCollection.add(paramFunction2.invoke(Integer.valueOf(i), localObject));
      i += 1;
    }
    return (List)localCollection;
  }
  
  public static final List mapIndexedNotNull(Iterable paramIterable, Function2 paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$mapIndexedNotNull");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "transform");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
          CollectionsKt__CollectionsKt.throwIndexOverflow();
        } else {
          throw ((Throwable)new ArithmeticException("Index overflow has happened."));
        }
      }
      localObject = paramFunction2.invoke(Integer.valueOf(i), localObject);
      if (localObject != null) {
        localCollection.add(localObject);
      }
      i += 1;
    }
    return (List)localCollection;
  }
  
  public static final Collection mapIndexedNotNullTo(Iterable paramIterable, Collection paramCollection, Function2 paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$mapIndexedNotNullTo");
    Intrinsics.checkParameterIsNotNull(paramCollection, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "transform");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
          CollectionsKt__CollectionsKt.throwIndexOverflow();
        } else {
          throw ((Throwable)new ArithmeticException("Index overflow has happened."));
        }
      }
      localObject = paramFunction2.invoke(Integer.valueOf(i), localObject);
      if (localObject != null) {
        paramCollection.add(localObject);
      }
      i += 1;
    }
    return paramCollection;
  }
  
  public static final Collection mapIndexedTo(Iterable paramIterable, Collection paramCollection, Function2 paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$mapIndexedTo");
    Intrinsics.checkParameterIsNotNull(paramCollection, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "transform");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i < 0) {
        if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
          CollectionsKt__CollectionsKt.throwIndexOverflow();
        } else {
          throw ((Throwable)new ArithmeticException("Index overflow has happened."));
        }
      }
      paramCollection.add(paramFunction2.invoke(Integer.valueOf(i), localObject));
      i += 1;
    }
    return paramCollection;
  }
  
  public static final List mapNotNull(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$mapNotNull");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramFunction1.invoke(paramIterable.next());
      if (localObject != null) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  public static final Collection mapNotNullTo(Iterable paramIterable, Collection paramCollection, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$mapNotNullTo");
    Intrinsics.checkParameterIsNotNull(paramCollection, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramFunction1.invoke(paramIterable.next());
      if (localObject != null) {
        paramCollection.add(localObject);
      }
    }
    return paramCollection;
  }
  
  public static final Collection mapTo(Iterable paramIterable, Collection paramCollection, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$mapTo");
    Intrinsics.checkParameterIsNotNull(paramCollection, "destination");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      paramCollection.add(paramFunction1.invoke(paramIterable.next()));
    }
    return paramCollection;
  }
  
  public static final Comparable max(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$max");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = (Comparable)localIterator.next();
    while (localIterator.hasNext())
    {
      Comparable localComparable = (Comparable)localIterator.next();
      if (paramIterable.compareTo(localComparable) < 0) {
        paramIterable = localComparable;
      }
    }
    return paramIterable;
  }
  
  public static final Double max(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$max");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    double d2 = ((Number)paramIterable.next()).doubleValue();
    double d1 = d2;
    if (Double.isNaN(d2)) {
      return Double.valueOf(d2);
    }
    while (paramIterable.hasNext())
    {
      d2 = ((Number)paramIterable.next()).doubleValue();
      if (Double.isNaN(d2)) {
        return Double.valueOf(d2);
      }
      if (d1 < d2) {
        d1 = d2;
      }
    }
    return Double.valueOf(d1);
  }
  
  public static final Float max(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$max");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    float f2 = ((Number)paramIterable.next()).floatValue();
    float f1 = f2;
    if (Float.isNaN(f2)) {
      return Float.valueOf(f2);
    }
    while (paramIterable.hasNext())
    {
      f2 = ((Number)paramIterable.next()).floatValue();
      if (Float.isNaN(f2)) {
        return Float.valueOf(f2);
      }
      if (f1 < f2) {
        f1 = f2;
      }
    }
    return Float.valueOf(f1);
  }
  
  public static final Object maxBy(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$maxBy");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = localIterator.next();
    Object localObject2 = paramIterable;
    if (!localIterator.hasNext()) {
      return paramIterable;
    }
    paramIterable = (Comparable)paramFunction1.invoke(paramIterable);
    Object localObject3;
    do
    {
      Object localObject4 = localIterator.next();
      Comparable localComparable = (Comparable)paramFunction1.invoke(localObject4);
      localObject3 = localObject2;
      Object localObject1 = paramIterable;
      if (paramIterable.compareTo(localComparable) < 0)
      {
        localObject3 = localObject4;
        localObject1 = localComparable;
      }
      localObject2 = localObject3;
      paramIterable = (Iterable)localObject1;
    } while (localIterator.hasNext());
    return localObject3;
  }
  
  public static final Object maxWith(Iterable paramIterable, Comparator paramComparator)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$maxWith");
    Intrinsics.checkParameterIsNotNull(paramComparator, "comparator");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = localIterator.next();
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (paramComparator.compare(paramIterable, localObject) < 0) {
        paramIterable = localObject;
      }
    }
    return paramIterable;
  }
  
  public static final Comparable min(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$min");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = (Comparable)localIterator.next();
    while (localIterator.hasNext())
    {
      Comparable localComparable = (Comparable)localIterator.next();
      if (paramIterable.compareTo(localComparable) > 0) {
        paramIterable = localComparable;
      }
    }
    return paramIterable;
  }
  
  public static final Double min(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$min");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    double d2 = ((Number)paramIterable.next()).doubleValue();
    double d1 = d2;
    if (Double.isNaN(d2)) {
      return Double.valueOf(d2);
    }
    while (paramIterable.hasNext())
    {
      d2 = ((Number)paramIterable.next()).doubleValue();
      if (Double.isNaN(d2)) {
        return Double.valueOf(d2);
      }
      if (d1 > d2) {
        d1 = d2;
      }
    }
    return Double.valueOf(d1);
  }
  
  public static final Float min(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$min");
    paramIterable = paramIterable.iterator();
    if (!paramIterable.hasNext()) {
      return null;
    }
    float f2 = ((Number)paramIterable.next()).floatValue();
    float f1 = f2;
    if (Float.isNaN(f2)) {
      return Float.valueOf(f2);
    }
    while (paramIterable.hasNext())
    {
      f2 = ((Number)paramIterable.next()).floatValue();
      if (Float.isNaN(f2)) {
        return Float.valueOf(f2);
      }
      if (f1 > f2) {
        f1 = f2;
      }
    }
    return Float.valueOf(f1);
  }
  
  public static final Object minBy(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$minBy");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = localIterator.next();
    Object localObject2 = paramIterable;
    if (!localIterator.hasNext()) {
      return paramIterable;
    }
    paramIterable = (Comparable)paramFunction1.invoke(paramIterable);
    Object localObject3;
    do
    {
      Object localObject4 = localIterator.next();
      Comparable localComparable = (Comparable)paramFunction1.invoke(localObject4);
      localObject3 = localObject2;
      Object localObject1 = paramIterable;
      if (paramIterable.compareTo(localComparable) > 0)
      {
        localObject3 = localObject4;
        localObject1 = localComparable;
      }
      localObject2 = localObject3;
      paramIterable = (Iterable)localObject1;
    } while (localIterator.hasNext());
    return localObject3;
  }
  
  public static final Object minWith(Iterable paramIterable, Comparator paramComparator)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$minWith");
    Intrinsics.checkParameterIsNotNull(paramComparator, "comparator");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return null;
    }
    paramIterable = localIterator.next();
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (paramComparator.compare(paramIterable, localObject) > 0) {
        paramIterable = localObject;
      }
    }
    return paramIterable;
  }
  
  public static final List minus(Iterable paramIterable1, Iterable paramIterable2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable1, "$this$minus");
    Intrinsics.checkParameterIsNotNull(paramIterable2, "elements");
    paramIterable2 = CollectionsKt__IterablesKt.convertToSetForSetOperationWith(paramIterable2, paramIterable1);
    if (paramIterable2.isEmpty()) {
      return toList(paramIterable1);
    }
    Collection localCollection = (Collection)new ArrayList();
    paramIterable1 = paramIterable1.iterator();
    while (paramIterable1.hasNext())
    {
      Object localObject = paramIterable1.next();
      if (!paramIterable2.contains(localObject)) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  public static final List minus(Iterable paramIterable, Object paramObject)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$minus");
    ArrayList localArrayList = new ArrayList(CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable, 10));
    paramIterable = paramIterable.iterator();
    int j = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      int m = 1;
      int k = j;
      int i = m;
      if (j == 0)
      {
        k = j;
        i = m;
        if (Intrinsics.areEqual(localObject, paramObject))
        {
          k = 1;
          i = 0;
        }
      }
      j = k;
      if (i != 0)
      {
        ((Collection)localArrayList).add(localObject);
        j = k;
      }
    }
    return (List)localArrayList;
  }
  
  public static final List minus(Iterable paramIterable, Sequence paramSequence)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$minus");
    Intrinsics.checkParameterIsNotNull(paramSequence, "elements");
    paramSequence = SequencesKt___SequencesKt.toHashSet(paramSequence);
    if (paramSequence.isEmpty()) {
      return toList(paramIterable);
    }
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!paramSequence.contains(localObject)) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  public static final List minus(Iterable paramIterable, Object[] paramArrayOfObject)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$minus");
    Intrinsics.checkParameterIsNotNull(paramArrayOfObject, "elements");
    int i;
    if (paramArrayOfObject.length == 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0) {
      return toList(paramIterable);
    }
    paramArrayOfObject = ArraysKt___ArraysKt.toHashSet(paramArrayOfObject);
    Collection localCollection = (Collection)new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!paramArrayOfObject.contains(localObject)) {
        localCollection.add(localObject);
      }
    }
    return (List)localCollection;
  }
  
  private static final List minusElement(Iterable paramIterable, Object paramObject)
  {
    return minus(paramIterable, paramObject);
  }
  
  public static final boolean none(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$none");
    if ((paramIterable instanceof Collection)) {
      return ((Collection)paramIterable).isEmpty();
    }
    return paramIterable.iterator().hasNext() ^ true;
  }
  
  public static final boolean none(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$none");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    if (((paramIterable instanceof Collection)) && (((Collection)paramIterable).isEmpty())) {
      return true;
    }
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      if (((Boolean)paramFunction1.invoke(paramIterable.next())).booleanValue()) {
        return false;
      }
    }
    return true;
  }
  
  public static final Iterable onEach(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$onEach");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "action");
    Iterator localIterator = paramIterable.iterator();
    while (localIterator.hasNext()) {
      paramFunction1.invoke(localIterator.next());
    }
    return paramIterable;
  }
  
  public static final Pair partition(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$partition");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    ArrayList localArrayList1 = new ArrayList();
    ArrayList localArrayList2 = new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        localArrayList1.add(localObject);
      } else {
        localArrayList2.add(localObject);
      }
    }
    return new Pair(localArrayList1, localArrayList2);
  }
  
  public static final List plus(Iterable paramIterable1, Iterable paramIterable2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable1, "$this$plus");
    Intrinsics.checkParameterIsNotNull(paramIterable2, "elements");
    if ((paramIterable1 instanceof Collection)) {
      return plus((Collection)paramIterable1, paramIterable2);
    }
    ArrayList localArrayList = new ArrayList();
    Collection localCollection = (Collection)localArrayList;
    CollectionsKt__MutableCollectionsKt.addAll(localCollection, paramIterable1);
    CollectionsKt__MutableCollectionsKt.addAll(localCollection, paramIterable2);
    return (List)localArrayList;
  }
  
  public static final List plus(Iterable paramIterable, Object paramObject)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$plus");
    if ((paramIterable instanceof Collection)) {
      return plus((Collection)paramIterable, paramObject);
    }
    ArrayList localArrayList = new ArrayList();
    CollectionsKt__MutableCollectionsKt.addAll((Collection)localArrayList, paramIterable);
    localArrayList.add(paramObject);
    return (List)localArrayList;
  }
  
  public static final List plus(Iterable paramIterable, Sequence paramSequence)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$plus");
    Intrinsics.checkParameterIsNotNull(paramSequence, "elements");
    ArrayList localArrayList = new ArrayList();
    Collection localCollection = (Collection)localArrayList;
    CollectionsKt__MutableCollectionsKt.addAll(localCollection, paramIterable);
    CollectionsKt__MutableCollectionsKt.addAll(localCollection, paramSequence);
    return (List)localArrayList;
  }
  
  public static final List plus(Iterable paramIterable, Object[] paramArrayOfObject)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$plus");
    Intrinsics.checkParameterIsNotNull(paramArrayOfObject, "elements");
    if ((paramIterable instanceof Collection)) {
      return plus((Collection)paramIterable, paramArrayOfObject);
    }
    ArrayList localArrayList = new ArrayList();
    Collection localCollection = (Collection)localArrayList;
    CollectionsKt__MutableCollectionsKt.addAll(localCollection, paramIterable);
    CollectionsKt__MutableCollectionsKt.addAll(localCollection, paramArrayOfObject);
    return (List)localArrayList;
  }
  
  public static final List plus(Collection paramCollection, Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$this$plus");
    Intrinsics.checkParameterIsNotNull(paramIterable, "elements");
    if ((paramIterable instanceof Collection))
    {
      int i = paramCollection.size();
      Collection localCollection = (Collection)paramIterable;
      paramIterable = new ArrayList(i + localCollection.size());
      paramIterable.addAll(paramCollection);
      paramIterable.addAll(localCollection);
      return (List)paramIterable;
    }
    paramCollection = new ArrayList(paramCollection);
    CollectionsKt__MutableCollectionsKt.addAll((Collection)paramCollection, paramIterable);
    return (List)paramCollection;
  }
  
  public static final List plus(Collection paramCollection, Object paramObject)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$this$plus");
    ArrayList localArrayList = new ArrayList(paramCollection.size() + 1);
    localArrayList.addAll(paramCollection);
    localArrayList.add(paramObject);
    return (List)localArrayList;
  }
  
  public static final List plus(Collection paramCollection, Sequence paramSequence)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$this$plus");
    Intrinsics.checkParameterIsNotNull(paramSequence, "elements");
    ArrayList localArrayList = new ArrayList(paramCollection.size() + 10);
    localArrayList.addAll(paramCollection);
    CollectionsKt__MutableCollectionsKt.addAll((Collection)localArrayList, paramSequence);
    return (List)localArrayList;
  }
  
  public static final List plus(Collection paramCollection, Object[] paramArrayOfObject)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$this$plus");
    Intrinsics.checkParameterIsNotNull(paramArrayOfObject, "elements");
    ArrayList localArrayList = new ArrayList(paramCollection.size() + paramArrayOfObject.length);
    localArrayList.addAll(paramCollection);
    CollectionsKt__MutableCollectionsKt.addAll((Collection)localArrayList, paramArrayOfObject);
    return (List)localArrayList;
  }
  
  private static final List plusElement(Iterable paramIterable, Object paramObject)
  {
    return plus(paramIterable, paramObject);
  }
  
  private static final List plusElement(Collection paramCollection, Object paramObject)
  {
    return plus(paramCollection, paramObject);
  }
  
  private static final Object random(Collection paramCollection)
  {
    return random(paramCollection, (Random)Random.Default);
  }
  
  public static final Object random(Collection paramCollection, Random paramRandom)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$this$random");
    Intrinsics.checkParameterIsNotNull(paramRandom, "random");
    if (!paramCollection.isEmpty()) {
      return elementAt((Iterable)paramCollection, paramRandom.nextInt(paramCollection.size()));
    }
    throw ((Throwable)new NoSuchElementException("Collection is empty."));
  }
  
  public static final Object reduce(Iterable paramIterable, Function2 paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$reduce");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "operation");
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = paramFunction2.invoke(paramIterable, localIterator.next())) {}
      return paramIterable;
    }
    paramIterable = (Throwable)new UnsupportedOperationException("Empty collection can't be reduced.");
    throw paramIterable;
  }
  
  public static final Object reduceIndexed(Iterable paramIterable, Function3 paramFunction3)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$reduceIndexed");
    Intrinsics.checkParameterIsNotNull(paramFunction3, "operation");
    Iterator localIterator = paramIterable.iterator();
    if (localIterator.hasNext())
    {
      paramIterable = localIterator.next();
      int i = 1;
      while (localIterator.hasNext())
      {
        if (i < 0) {
          if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
            CollectionsKt__CollectionsKt.throwIndexOverflow();
          } else {
            throw ((Throwable)new ArithmeticException("Index overflow has happened."));
          }
        }
        paramIterable = paramFunction3.invoke(Integer.valueOf(i), paramIterable, localIterator.next());
        i += 1;
      }
      return paramIterable;
    }
    paramIterable = (Throwable)new UnsupportedOperationException("Empty collection can't be reduced.");
    throw paramIterable;
  }
  
  public static final Object reduceRight(List paramList, Function2 paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$reduceRight");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "operation");
    ListIterator localListIterator = paramList.listIterator(paramList.size());
    if (localListIterator.hasPrevious())
    {
      for (paramList = localListIterator.previous(); localListIterator.hasPrevious(); paramList = paramFunction2.invoke(localListIterator.previous(), paramList)) {}
      return paramList;
    }
    paramList = (Throwable)new UnsupportedOperationException("Empty list can't be reduced.");
    throw paramList;
  }
  
  public static final Object reduceRightIndexed(List paramList, Function3 paramFunction3)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$reduceRightIndexed");
    Intrinsics.checkParameterIsNotNull(paramFunction3, "operation");
    ListIterator localListIterator = paramList.listIterator(paramList.size());
    if (localListIterator.hasPrevious())
    {
      for (paramList = localListIterator.previous(); localListIterator.hasPrevious(); paramList = paramFunction3.invoke(Integer.valueOf(localListIterator.previousIndex()), localListIterator.previous(), paramList)) {}
      return paramList;
    }
    paramList = (Throwable)new UnsupportedOperationException("Empty list can't be reduced.");
    throw paramList;
  }
  
  public static final Iterable requireNoNulls(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$requireNoNulls");
    Object localObject = paramIterable.iterator();
    while (((Iterator)localObject).hasNext()) {
      if (((Iterator)localObject).next() == null)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("null element found in ");
        ((StringBuilder)localObject).append(paramIterable);
        ((StringBuilder)localObject).append('.');
        throw ((Throwable)new IllegalArgumentException(((StringBuilder)localObject).toString()));
      }
    }
    return paramIterable;
  }
  
  public static final List requireNoNulls(List paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$requireNoNulls");
    Object localObject = paramList.iterator();
    while (((Iterator)localObject).hasNext()) {
      if (((Iterator)localObject).next() == null)
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("null element found in ");
        ((StringBuilder)localObject).append(paramList);
        ((StringBuilder)localObject).append('.');
        throw ((Throwable)new IllegalArgumentException(((StringBuilder)localObject).toString()));
      }
    }
    return paramList;
  }
  
  public static final List reversed(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$reversed");
    if (((paramIterable instanceof Collection)) && (((Collection)paramIterable).size() <= 1)) {
      return toList(paramIterable);
    }
    paramIterable = toMutableList(paramIterable);
    CollectionsKt___CollectionsJvmKt.reverse(paramIterable);
    return paramIterable;
  }
  
  public static final Object single(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$single");
    if ((paramIterable instanceof List)) {
      return single((List)paramIterable);
    }
    paramIterable = paramIterable.iterator();
    if (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!paramIterable.hasNext()) {
        return localObject;
      }
      throw ((Throwable)new IllegalArgumentException("Collection has more than one element."));
    }
    throw ((Throwable)new NoSuchElementException("Collection is empty."));
  }
  
  public static final Object single(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$single");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    Iterator localIterator = paramIterable.iterator();
    paramIterable = null;
    int i = 0;
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        if (i == 0)
        {
          paramIterable = localObject;
          i = 1;
        }
        else
        {
          throw ((Throwable)new IllegalArgumentException("Collection contains more than one matching element."));
        }
      }
    }
    if (i != 0) {
      return paramIterable;
    }
    paramIterable = (Throwable)new NoSuchElementException("Collection contains no element matching the predicate.");
    throw paramIterable;
  }
  
  public static final Object single(List paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$single");
    int i = paramList.size();
    if (i != 0)
    {
      if (i == 1) {
        return paramList.get(0);
      }
      throw ((Throwable)new IllegalArgumentException("List has more than one element."));
    }
    throw ((Throwable)new NoSuchElementException("List is empty."));
  }
  
  public static final Object singleOrNull(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$singleOrNull");
    if ((paramIterable instanceof List))
    {
      paramIterable = (List)paramIterable;
      if (paramIterable.size() == 1) {
        return paramIterable.get(0);
      }
    }
    else
    {
      paramIterable = paramIterable.iterator();
      if (!paramIterable.hasNext()) {
        return null;
      }
      Object localObject = paramIterable.next();
      if (paramIterable.hasNext()) {
        return null;
      }
      return localObject;
    }
    return null;
  }
  
  public static final Object singleOrNull(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$singleOrNull");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    Iterator localIterator = paramIterable.iterator();
    int i = 0;
    paramIterable = null;
    while (localIterator.hasNext())
    {
      Object localObject = localIterator.next();
      if (((Boolean)paramFunction1.invoke(localObject)).booleanValue())
      {
        if (i != 0) {
          return null;
        }
        i = 1;
        paramIterable = localObject;
      }
    }
    if (i == 0) {
      return null;
    }
    return paramIterable;
  }
  
  public static final Object singleOrNull(List paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$singleOrNull");
    if (paramList.size() == 1) {
      return paramList.get(0);
    }
    return null;
  }
  
  public static final List slice(List paramList, Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$slice");
    Intrinsics.checkParameterIsNotNull(paramIterable, "indices");
    int i = CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable, 10);
    if (i == 0) {
      return CollectionsKt__CollectionsKt.emptyList();
    }
    ArrayList localArrayList = new ArrayList(i);
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      localArrayList.add(paramList.get(((Number)paramIterable.next()).intValue()));
    }
    return (List)localArrayList;
  }
  
  public static final List slice(List paramList, IntRange paramIntRange)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$slice");
    Intrinsics.checkParameterIsNotNull(paramIntRange, "indices");
    if (paramIntRange.isEmpty()) {
      return CollectionsKt__CollectionsKt.emptyList();
    }
    return toList((Iterable)paramList.subList(paramIntRange.getStart().intValue(), paramIntRange.getEndInclusive().intValue() + 1));
  }
  
  public static final void sortBy(List paramList, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$sortBy");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    if (paramList.size() > 1) {
      CollectionsKt__MutableCollectionsJVMKt.sortWith(paramList, (Comparator)new ComparisonsKt__ComparisonsKt.compareBy.2(paramFunction1));
    }
  }
  
  public static final void sortByDescending(List paramList, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$sortByDescending");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    if (paramList.size() > 1) {
      CollectionsKt__MutableCollectionsJVMKt.sortWith(paramList, (Comparator)new ComparisonsKt__ComparisonsKt.compareByDescending.1(paramFunction1));
    }
  }
  
  public static final void sortDescending(List paramList)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$sortDescending");
    CollectionsKt__MutableCollectionsJVMKt.sortWith(paramList, ComparisonsKt__ComparisonsKt.reverseOrder());
  }
  
  public static final List sorted(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$sorted");
    if ((paramIterable instanceof Collection))
    {
      Collection localCollection = (Collection)paramIterable;
      if (localCollection.size() <= 1) {
        return toList(paramIterable);
      }
      paramIterable = localCollection.toArray(new Comparable[0]);
      if (paramIterable != null)
      {
        if (paramIterable != null)
        {
          paramIterable = (Comparable[])paramIterable;
          if (paramIterable != null)
          {
            paramIterable = (Object[])paramIterable;
            ArraysKt___ArraysJvmKt.sort(paramIterable);
            return ArraysKt___ArraysJvmKt.asList(paramIterable);
          }
          throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
      }
      throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
    }
    paramIterable = toMutableList(paramIterable);
    CollectionsKt__MutableCollectionsJVMKt.sort(paramIterable);
    return paramIterable;
  }
  
  public static final List sortedBy(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$sortedBy");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    return sortedWith(paramIterable, (Comparator)new ComparisonsKt__ComparisonsKt.compareBy.2(paramFunction1));
  }
  
  public static final List sortedByDescending(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$sortedByDescending");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    return sortedWith(paramIterable, (Comparator)new ComparisonsKt__ComparisonsKt.compareByDescending.1(paramFunction1));
  }
  
  public static final List sortedDescending(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$sortedDescending");
    return sortedWith(paramIterable, ComparisonsKt__ComparisonsKt.reverseOrder());
  }
  
  public static final List sortedWith(Iterable paramIterable, Comparator paramComparator)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$sortedWith");
    Intrinsics.checkParameterIsNotNull(paramComparator, "comparator");
    if ((paramIterable instanceof Collection))
    {
      Collection localCollection = (Collection)paramIterable;
      if (localCollection.size() <= 1) {
        return toList(paramIterable);
      }
      paramIterable = localCollection.toArray(new Object[0]);
      if (paramIterable != null)
      {
        if (paramIterable != null)
        {
          ArraysKt___ArraysJvmKt.sortWith(paramIterable, paramComparator);
          return ArraysKt___ArraysJvmKt.asList(paramIterable);
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
      }
      throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
    }
    paramIterable = toMutableList(paramIterable);
    CollectionsKt__MutableCollectionsJVMKt.sortWith(paramIterable, paramComparator);
    return paramIterable;
  }
  
  public static final Set subtract(Iterable paramIterable1, Iterable paramIterable2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable1, "$this$subtract");
    Intrinsics.checkParameterIsNotNull(paramIterable2, "other");
    paramIterable1 = toMutableSet(paramIterable1);
    CollectionsKt__MutableCollectionsKt.removeAll((Collection)paramIterable1, paramIterable2);
    return paramIterable1;
  }
  
  public static final int sumBy(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$sumBy");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext()) {
      i += ((Number)paramFunction1.invoke(paramIterable.next())).intValue();
    }
    return i;
  }
  
  public static final double sumByDouble(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$sumByDouble");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "selector");
    paramIterable = paramIterable.iterator();
    for (double d = 0.0D; paramIterable.hasNext(); d += ((Number)paramFunction1.invoke(paramIterable.next())).doubleValue()) {}
    return d;
  }
  
  public static final int sumOfByte(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$sum");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext()) {
      i += ((Number)paramIterable.next()).byteValue();
    }
    return i;
  }
  
  public static final double sumOfDouble(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$sum");
    paramIterable = paramIterable.iterator();
    for (double d = 0.0D; paramIterable.hasNext(); d += ((Number)paramIterable.next()).doubleValue()) {}
    return d;
  }
  
  public static final float sumOfFloat(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$sum");
    paramIterable = paramIterable.iterator();
    for (float f = 0.0F; paramIterable.hasNext(); f += ((Number)paramIterable.next()).floatValue()) {}
    return f;
  }
  
  public static final int sumOfInt(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$sum");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext()) {
      i += ((Number)paramIterable.next()).intValue();
    }
    return i;
  }
  
  public static final long sumOfLong(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$sum");
    paramIterable = paramIterable.iterator();
    for (long l = 0L; paramIterable.hasNext(); l += ((Number)paramIterable.next()).longValue()) {}
    return l;
  }
  
  public static final int sumOfShort(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$sum");
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext()) {
      i += ((Number)paramIterable.next()).shortValue();
    }
    return i;
  }
  
  public static final List take(Iterable paramIterable, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$take");
    int j = 0;
    int i;
    if (paramInt >= 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0)
    {
      if (paramInt == 0) {
        return CollectionsKt__CollectionsKt.emptyList();
      }
      if ((paramIterable instanceof Collection))
      {
        if (paramInt >= ((Collection)paramIterable).size()) {
          return toList(paramIterable);
        }
        if (paramInt == 1) {
          return CollectionsKt__CollectionsJVMKt.listOf(first(paramIterable));
        }
      }
      ArrayList localArrayList = new ArrayList(paramInt);
      paramIterable = paramIterable.iterator();
      i = j;
      do
      {
        if (!paramIterable.hasNext()) {
          break;
        }
        localArrayList.add(paramIterable.next());
        j = i + 1;
        i = j;
      } while (j != paramInt);
      return CollectionsKt__CollectionsKt.optimizeReadOnlyList((List)localArrayList);
    }
    paramIterable = new StringBuilder();
    paramIterable.append("Requested element count ");
    paramIterable.append(paramInt);
    paramIterable.append(" is less than zero.");
    paramIterable = (Throwable)new IllegalArgumentException(paramIterable.toString().toString());
    throw paramIterable;
  }
  
  public static final List takeLast(List paramList, int paramInt)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$takeLast");
    int i;
    if (paramInt >= 0) {
      i = 1;
    } else {
      i = 0;
    }
    if (i != 0)
    {
      if (paramInt == 0) {
        return CollectionsKt__CollectionsKt.emptyList();
      }
      i = paramList.size();
      if (paramInt >= i) {
        return toList((Iterable)paramList);
      }
      if (paramInt == 1) {
        return CollectionsKt__CollectionsJVMKt.listOf(last(paramList));
      }
      ArrayList localArrayList = new ArrayList(paramInt);
      if ((paramList instanceof RandomAccess))
      {
        paramInt = i - paramInt;
        while (paramInt < i)
        {
          localArrayList.add(paramList.get(paramInt));
          paramInt += 1;
        }
      }
      paramList = (Iterator)paramList.listIterator(i - paramInt);
      while (paramList.hasNext()) {
        localArrayList.add(paramList.next());
      }
      return (List)localArrayList;
    }
    paramList = new StringBuilder();
    paramList.append("Requested element count ");
    paramList.append(paramInt);
    paramList.append(" is less than zero.");
    paramList = (Throwable)new IllegalArgumentException(paramList.toString().toString());
    throw paramList;
  }
  
  public static final List takeLastWhile(List paramList, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramList, "$this$takeLastWhile");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    if (paramList.isEmpty()) {
      return CollectionsKt__CollectionsKt.emptyList();
    }
    ListIterator localListIterator = paramList.listIterator(paramList.size());
    while (localListIterator.hasPrevious()) {
      if (!((Boolean)paramFunction1.invoke(localListIterator.previous())).booleanValue())
      {
        localListIterator.next();
        int i = paramList.size() - localListIterator.nextIndex();
        if (i == 0) {
          return CollectionsKt__CollectionsKt.emptyList();
        }
        paramList = new ArrayList(i);
        while (localListIterator.hasNext()) {
          paramList.add(localListIterator.next());
        }
        return (List)paramList;
      }
    }
    return toList((Iterable)paramList);
  }
  
  public static final List takeWhile(Iterable paramIterable, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$takeWhile");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "predicate");
    ArrayList localArrayList = new ArrayList();
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (!((Boolean)paramFunction1.invoke(localObject)).booleanValue()) {
        break;
      }
      localArrayList.add(localObject);
    }
    return (List)localArrayList;
  }
  
  public static final boolean[] toBooleanArray(Collection paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$this$toBooleanArray");
    boolean[] arrayOfBoolean = new boolean[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfBoolean[i] = ((Boolean)paramCollection.next()).booleanValue();
      i += 1;
    }
    return arrayOfBoolean;
  }
  
  public static final byte[] toByteArray(Collection paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$this$toByteArray");
    byte[] arrayOfByte = new byte[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfByte[i] = ((Number)paramCollection.next()).byteValue();
      i += 1;
    }
    return arrayOfByte;
  }
  
  public static final char[] toCharArray(Collection paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$this$toCharArray");
    char[] arrayOfChar = new char[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfChar[i] = ((Character)paramCollection.next()).charValue();
      i += 1;
    }
    return arrayOfChar;
  }
  
  public static final Collection toCollection(Iterable paramIterable, Collection paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$toCollection");
    Intrinsics.checkParameterIsNotNull(paramCollection, "destination");
    paramIterable = paramIterable.iterator();
    while (paramIterable.hasNext()) {
      paramCollection.add(paramIterable.next());
    }
    return paramCollection;
  }
  
  public static final double[] toDoubleArray(Collection paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$this$toDoubleArray");
    double[] arrayOfDouble = new double[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfDouble[i] = ((Number)paramCollection.next()).doubleValue();
      i += 1;
    }
    return arrayOfDouble;
  }
  
  public static final float[] toFloatArray(Collection paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$this$toFloatArray");
    float[] arrayOfFloat = new float[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfFloat[i] = ((Number)paramCollection.next()).floatValue();
      i += 1;
    }
    return arrayOfFloat;
  }
  
  public static final HashSet toHashSet(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$toHashSet");
    return (HashSet)toCollection(paramIterable, (Collection)new HashSet(MapsKt__MapsKt.mapCapacity(CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable, 12))));
  }
  
  public static final int[] toIntArray(Collection paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$this$toIntArray");
    int[] arrayOfInt = new int[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfInt[i] = ((Number)paramCollection.next()).intValue();
      i += 1;
    }
    return arrayOfInt;
  }
  
  public static final List toList(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$toList");
    if ((paramIterable instanceof Collection))
    {
      Collection localCollection = (Collection)paramIterable;
      int i = localCollection.size();
      if (i != 0)
      {
        if (i != 1) {
          return toMutableList(localCollection);
        }
        if ((paramIterable instanceof List)) {
          paramIterable = ((List)paramIterable).get(0);
        } else {
          paramIterable = paramIterable.iterator().next();
        }
        return CollectionsKt__CollectionsJVMKt.listOf(paramIterable);
      }
      return CollectionsKt__CollectionsKt.emptyList();
    }
    return CollectionsKt__CollectionsKt.optimizeReadOnlyList(toMutableList(paramIterable));
  }
  
  public static final long[] toLongArray(Collection paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$this$toLongArray");
    long[] arrayOfLong = new long[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfLong[i] = ((Number)paramCollection.next()).longValue();
      i += 1;
    }
    return arrayOfLong;
  }
  
  public static final List toMutableList(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$toMutableList");
    if ((paramIterable instanceof Collection)) {
      return toMutableList((Collection)paramIterable);
    }
    return (List)toCollection(paramIterable, (Collection)new ArrayList());
  }
  
  public static final List toMutableList(Collection paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$this$toMutableList");
    return (List)new ArrayList(paramCollection);
  }
  
  public static final Set toMutableSet(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$toMutableSet");
    if ((paramIterable instanceof Collection)) {
      return (Set)new LinkedHashSet((Collection)paramIterable);
    }
    return (Set)toCollection(paramIterable, (Collection)new LinkedHashSet());
  }
  
  public static final Set toSet(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$toSet");
    if ((paramIterable instanceof Collection))
    {
      Collection localCollection = (Collection)paramIterable;
      int i = localCollection.size();
      if (i != 0)
      {
        if (i != 1) {
          return (Set)toCollection(paramIterable, (Collection)new LinkedHashSet(MapsKt__MapsKt.mapCapacity(localCollection.size())));
        }
        if ((paramIterable instanceof List)) {
          paramIterable = ((List)paramIterable).get(0);
        } else {
          paramIterable = paramIterable.iterator().next();
        }
        return SetsKt__SetsJVMKt.setOf(paramIterable);
      }
      return SetsKt__SetsKt.emptySet();
    }
    return SetsKt__SetsKt.optimizeReadOnlySet((Set)toCollection(paramIterable, (Collection)new LinkedHashSet()));
  }
  
  public static final short[] toShortArray(Collection paramCollection)
  {
    Intrinsics.checkParameterIsNotNull(paramCollection, "$this$toShortArray");
    short[] arrayOfShort = new short[paramCollection.size()];
    paramCollection = paramCollection.iterator();
    int i = 0;
    while (paramCollection.hasNext())
    {
      arrayOfShort[i] = ((Number)paramCollection.next()).shortValue();
      i += 1;
    }
    return arrayOfShort;
  }
  
  public static final Set union(Iterable paramIterable1, Iterable paramIterable2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable1, "$this$union");
    Intrinsics.checkParameterIsNotNull(paramIterable2, "other");
    paramIterable1 = toMutableSet(paramIterable1);
    CollectionsKt__MutableCollectionsKt.addAll((Collection)paramIterable1, paramIterable2);
    return paramIterable1;
  }
  
  public static final List windowed(Iterable paramIterable, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$windowed");
    SlidingWindowKt.checkWindowSizeStep(paramInt1, paramInt2);
    if (((paramIterable instanceof RandomAccess)) && ((paramIterable instanceof List)))
    {
      paramIterable = (List)paramIterable;
      int k = paramIterable.size();
      int j = k / paramInt2;
      if (k % paramInt2 == 0) {
        i = 0;
      } else {
        i = 1;
      }
      localArrayList1 = new ArrayList(j + i);
      int i = 0;
      while ((i >= 0) && (k > i))
      {
        int m = RangesKt___RangesKt.coerceAtMost(paramInt1, k - i);
        if ((m < paramInt1) && (!paramBoolean)) {
          break;
        }
        ArrayList localArrayList2 = new ArrayList(m);
        j = 0;
        while (j < m)
        {
          localArrayList2.add(paramIterable.get(j + i));
          j += 1;
        }
        localArrayList1.add((List)localArrayList2);
        i += paramInt2;
      }
      return (List)localArrayList1;
    }
    ArrayList localArrayList1 = new ArrayList();
    paramIterable = SlidingWindowKt.windowedIterator(paramIterable.iterator(), paramInt1, paramInt2, paramBoolean, false);
    while (paramIterable.hasNext()) {
      localArrayList1.add((List)paramIterable.next());
    }
    return (List)localArrayList1;
  }
  
  public static final List windowed(Iterable paramIterable, int paramInt1, int paramInt2, boolean paramBoolean, Function1 paramFunction1)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$windowed");
    Intrinsics.checkParameterIsNotNull(paramFunction1, "transform");
    SlidingWindowKt.checkWindowSizeStep(paramInt1, paramInt2);
    boolean bool = paramIterable instanceof RandomAccess;
    int i = 1;
    if ((bool) && ((paramIterable instanceof List)))
    {
      localObject = (List)paramIterable;
      int k = ((List)localObject).size();
      int m = k / paramInt2;
      int j = 0;
      if (k % paramInt2 == 0) {
        i = 0;
      }
      paramIterable = new ArrayList(m + i);
      localObject = new MovingSubList((List)localObject);
      i = j;
      while ((i >= 0) && (k > i))
      {
        j = RangesKt___RangesKt.coerceAtMost(paramInt1, k - i);
        if ((!paramBoolean) && (j < paramInt1)) {
          break;
        }
        ((MovingSubList)localObject).move(i, j + i);
        paramIterable.add(paramFunction1.invoke(localObject));
        i += paramInt2;
      }
      return (List)paramIterable;
    }
    Object localObject = new ArrayList();
    paramIterable = SlidingWindowKt.windowedIterator(paramIterable.iterator(), paramInt1, paramInt2, paramBoolean, true);
    while (paramIterable.hasNext()) {
      ((ArrayList)localObject).add(paramFunction1.invoke((List)paramIterable.next()));
    }
    return (List)localObject;
  }
  
  public static final Iterable withIndex(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$withIndex");
    (Iterable)new IndexingIterable((Function0)new Lambda(paramIterable)
    {
      public final Iterator invoke()
      {
        return iterator();
      }
    });
  }
  
  public static final List zip(Iterable paramIterable1, Iterable paramIterable2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable1, "$this$zip");
    Intrinsics.checkParameterIsNotNull(paramIterable2, "other");
    Iterator localIterator1 = paramIterable1.iterator();
    Iterator localIterator2 = paramIterable2.iterator();
    paramIterable1 = new ArrayList(Math.min(CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable1, 10), CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable2, 10)));
    while ((localIterator1.hasNext()) && (localIterator2.hasNext())) {
      paramIterable1.add(TuplesKt.to(localIterator1.next(), localIterator2.next()));
    }
    return (List)paramIterable1;
  }
  
  public static final List zip(Iterable paramIterable1, Iterable paramIterable2, Function2 paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable1, "$this$zip");
    Intrinsics.checkParameterIsNotNull(paramIterable2, "other");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "transform");
    Iterator localIterator1 = paramIterable1.iterator();
    Iterator localIterator2 = paramIterable2.iterator();
    paramIterable1 = new ArrayList(Math.min(CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable1, 10), CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable2, 10)));
    while ((localIterator1.hasNext()) && (localIterator2.hasNext())) {
      paramIterable1.add(paramFunction2.invoke(localIterator1.next(), localIterator2.next()));
    }
    return (List)paramIterable1;
  }
  
  public static final List zip(Iterable paramIterable, Object[] paramArrayOfObject)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$zip");
    Intrinsics.checkParameterIsNotNull(paramArrayOfObject, "other");
    int j = paramArrayOfObject.length;
    ArrayList localArrayList = new ArrayList(Math.min(CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable, 10), j));
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i >= j) {
        break;
      }
      localArrayList.add(TuplesKt.to(localObject, paramArrayOfObject[i]));
      i += 1;
    }
    return (List)localArrayList;
  }
  
  public static final List zip(Iterable paramIterable, Object[] paramArrayOfObject, Function2 paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$zip");
    Intrinsics.checkParameterIsNotNull(paramArrayOfObject, "other");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "transform");
    int j = paramArrayOfObject.length;
    ArrayList localArrayList = new ArrayList(Math.min(CollectionsKt__IterablesKt.collectionSizeOrDefault(paramIterable, 10), j));
    paramIterable = paramIterable.iterator();
    int i = 0;
    while (paramIterable.hasNext())
    {
      Object localObject = paramIterable.next();
      if (i >= j) {
        break;
      }
      localArrayList.add(paramFunction2.invoke(localObject, paramArrayOfObject[i]));
      i += 1;
    }
    return (List)localArrayList;
  }
  
  public static final List zipWithNext(Iterable paramIterable)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$zipWithNext");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return CollectionsKt__CollectionsKt.emptyList();
    }
    List localList = (List)new ArrayList();
    Object localObject;
    for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = localObject)
    {
      localObject = localIterator.next();
      localList.add(TuplesKt.to(paramIterable, localObject));
    }
    return localList;
  }
  
  public static final List zipWithNext(Iterable paramIterable, Function2 paramFunction2)
  {
    Intrinsics.checkParameterIsNotNull(paramIterable, "$this$zipWithNext");
    Intrinsics.checkParameterIsNotNull(paramFunction2, "transform");
    Iterator localIterator = paramIterable.iterator();
    if (!localIterator.hasNext()) {
      return CollectionsKt__CollectionsKt.emptyList();
    }
    List localList = (List)new ArrayList();
    Object localObject;
    for (paramIterable = localIterator.next(); localIterator.hasNext(); paramIterable = localObject)
    {
      localObject = localIterator.next();
      localList.add(paramFunction2.invoke(paramIterable, localObject));
    }
    return localList;
  }
}
