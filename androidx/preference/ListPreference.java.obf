package androidx.preference;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.Log;
import androidx.core.content.res.TypedArrayUtils;

public class ListPreference
  extends DialogPreference
{
  private static final String TAG = "ListPreference";
  private CharSequence[] mEntries;
  private CharSequence[] mEntryValues;
  private String mSummary;
  private String mValue;
  private boolean mValueSet;
  
  public ListPreference(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public ListPreference(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, TypedArrayUtils.getAttr(paramContext, R.attr.dialogPreferenceStyle, 16842897));
  }
  
  public ListPreference(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    this(paramContext, paramAttributeSet, paramInt, 0);
  }
  
  public ListPreference(Context paramContext, AttributeSet paramAttributeSet, int paramInt1, int paramInt2)
  {
    super(paramContext, paramAttributeSet, paramInt1, paramInt2);
    TypedArray localTypedArray = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.ListPreference, paramInt1, paramInt2);
    mEntries = TypedArrayUtils.getTextArray(localTypedArray, R.styleable.ListPreference_entries, R.styleable.ListPreference_android_entries);
    mEntryValues = TypedArrayUtils.getTextArray(localTypedArray, R.styleable.ListPreference_entryValues, R.styleable.ListPreference_android_entryValues);
    if (TypedArrayUtils.getBoolean(localTypedArray, R.styleable.ListPreference_useSimpleSummaryProvider, R.styleable.ListPreference_useSimpleSummaryProvider, false)) {
      setSummaryProvider(SimpleSummaryProvider.getInstance());
    }
    localTypedArray.recycle();
    paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.Preference, paramInt1, paramInt2);
    mSummary = TypedArrayUtils.getString(paramContext, R.styleable.Preference_summary, R.styleable.Preference_android_summary);
    paramContext.recycle();
  }
  
  private int getValueIndex()
  {
    return findIndexOfValue(mValue);
  }
  
  public int findIndexOfValue(String paramString)
  {
    if (paramString != null)
    {
      CharSequence[] arrayOfCharSequence = mEntryValues;
      if (arrayOfCharSequence != null)
      {
        int i = arrayOfCharSequence.length - 1;
        while (i >= 0)
        {
          if (mEntryValues[i].equals(paramString)) {
            return i;
          }
          i -= 1;
        }
      }
    }
    return -1;
  }
  
  public CharSequence[] getEntries()
  {
    return mEntries;
  }
  
  public CharSequence getEntry()
  {
    int i = getValueIndex();
    if (i >= 0)
    {
      CharSequence[] arrayOfCharSequence = mEntries;
      if (arrayOfCharSequence != null) {
        return arrayOfCharSequence[i];
      }
    }
    return null;
  }
  
  public CharSequence[] getEntryValues()
  {
    return mEntryValues;
  }
  
  public CharSequence getSummary()
  {
    if (getSummaryProvider() != null) {
      return getSummaryProvider().provideSummary(this);
    }
    CharSequence localCharSequence1 = getEntry();
    CharSequence localCharSequence2 = super.getSummary();
    String str = mSummary;
    if (str == null) {
      return localCharSequence2;
    }
    Object localObject = localCharSequence1;
    if (localCharSequence1 == null) {
      localObject = "";
    }
    localObject = String.format(str, new Object[] { localObject });
    if (TextUtils.equals((CharSequence)localObject, localCharSequence2)) {
      return localCharSequence2;
    }
    Log.w("ListPreference", "Setting a summary with a String formatting marker is no longer supported. You should use a SummaryProvider instead.");
    return localObject;
  }
  
  public String getValue()
  {
    return mValue;
  }
  
  protected Object onGetDefaultValue(TypedArray paramTypedArray, int paramInt)
  {
    return paramTypedArray.getString(paramInt);
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if ((paramParcelable != null) && (paramParcelable.getClass().equals(SavedState.class)))
    {
      paramParcelable = (SavedState)paramParcelable;
      super.onRestoreInstanceState(paramParcelable.getSuperState());
      setValue(mValue);
      return;
    }
    super.onRestoreInstanceState(paramParcelable);
  }
  
  protected Parcelable onSaveInstanceState()
  {
    Object localObject = super.onSaveInstanceState();
    if (isPersistent()) {
      return localObject;
    }
    localObject = new SavedState((Parcelable)localObject);
    mValue = getValue();
    return localObject;
  }
  
  protected void onSetInitialValue(Object paramObject)
  {
    setValue(getPersistedString((String)paramObject));
  }
  
  public void setEntries(int paramInt)
  {
    setEntries(getContext().getResources().getTextArray(paramInt));
  }
  
  public void setEntries(CharSequence[] paramArrayOfCharSequence)
  {
    mEntries = paramArrayOfCharSequence;
  }
  
  public void setEntryValues(int paramInt)
  {
    setEntryValues(getContext().getResources().getTextArray(paramInt));
  }
  
  public void setEntryValues(CharSequence[] paramArrayOfCharSequence)
  {
    mEntryValues = paramArrayOfCharSequence;
  }
  
  public void setSummary(CharSequence paramCharSequence)
  {
    super.setSummary(paramCharSequence);
    if ((paramCharSequence == null) && (mSummary != null))
    {
      mSummary = null;
      return;
    }
    if ((paramCharSequence != null) && (!paramCharSequence.equals(mSummary))) {
      mSummary = paramCharSequence.toString();
    }
  }
  
  public void setValue(String paramString)
  {
    boolean bool = TextUtils.equals(mValue, paramString) ^ true;
    if ((bool) || (!mValueSet))
    {
      mValue = paramString;
      mValueSet = true;
      persistString(paramString);
      if (bool) {
        notifyChanged();
      }
    }
  }
  
  public void setValueIndex(int paramInt)
  {
    CharSequence[] arrayOfCharSequence = mEntryValues;
    if (arrayOfCharSequence != null) {
      setValue(arrayOfCharSequence[paramInt].toString());
    }
  }
  
  private static class SavedState
    extends Preference.BaseSavedState
  {
    public static final Parcelable.Creator<SavedState> CREATOR = new Parcelable.Creator()
    {
      public ListPreference.SavedState createFromParcel(Parcel paramAnonymousParcel)
      {
        return new ListPreference.SavedState(paramAnonymousParcel);
      }
      
      public ListPreference.SavedState[] newArray(int paramAnonymousInt)
      {
        return new ListPreference.SavedState[paramAnonymousInt];
      }
    };
    String mValue;
    
    SavedState(Parcel paramParcel)
    {
      super();
      mValue = paramParcel.readString();
    }
    
    SavedState(Parcelable paramParcelable)
    {
      super();
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      super.writeToParcel(paramParcel, paramInt);
      paramParcel.writeString(mValue);
    }
  }
  
  public static final class SimpleSummaryProvider
    implements Preference.SummaryProvider<ListPreference>
  {
    private static SimpleSummaryProvider sSimpleSummaryProvider;
    
    private SimpleSummaryProvider() {}
    
    public static SimpleSummaryProvider getInstance()
    {
      if (sSimpleSummaryProvider == null) {
        sSimpleSummaryProvider = new SimpleSummaryProvider();
      }
      return sSimpleSummaryProvider;
    }
    
    public CharSequence provideSummary(ListPreference paramListPreference)
    {
      if (TextUtils.isEmpty(paramListPreference.getEntry())) {
        return paramListPreference.getContext().getString(R.string.not_set);
      }
      return paramListPreference.getEntry();
    }
  }
}
