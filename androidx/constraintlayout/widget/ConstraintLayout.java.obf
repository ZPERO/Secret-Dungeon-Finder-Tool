package androidx.constraintlayout.widget;

import android.content.Context;
import android.content.res.Resources.NotFoundException;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.os.Build.VERSION;
import android.util.AttributeSet;
import android.util.Log;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import androidx.constraintlayout.solver.Metrics;
import androidx.constraintlayout.solver.widgets.Analyzer;
import androidx.constraintlayout.solver.widgets.ConstraintAnchor;
import androidx.constraintlayout.solver.widgets.ConstraintAnchor.Type;
import androidx.constraintlayout.solver.widgets.ConstraintWidget;
import androidx.constraintlayout.solver.widgets.ConstraintWidget.DimensionBehaviour;
import androidx.constraintlayout.solver.widgets.ConstraintWidgetContainer;
import androidx.constraintlayout.solver.widgets.ResolutionAnchor;
import androidx.constraintlayout.solver.widgets.ResolutionDimension;
import java.util.ArrayList;
import java.util.HashMap;

public class ConstraintLayout
  extends ViewGroup
{
  static final boolean ALLOWS_EMBEDDED = false;
  private static final boolean CACHE_MEASURED_DIMENSION = false;
  private static final boolean DEBUG = false;
  public static final int DESIGN_INFO_ID = 0;
  private static final String TAG = "ConstraintLayout";
  private static final boolean USE_CONSTRAINTS_HELPER = true;
  public static final String VERSION = "ConstraintLayout-1.1.3";
  SparseArray<View> mChildrenByIds = new SparseArray();
  private ArrayList<ConstraintHelper> mConstraintHelpers = new ArrayList(4);
  private ConstraintSet mConstraintSet = null;
  private int mConstraintSetId = -1;
  private HashMap<String, Integer> mDesignIds = new HashMap();
  private boolean mDirtyHierarchy = true;
  private int mLastMeasureHeight = -1;
  int mLastMeasureHeightMode = 0;
  int mLastMeasureHeightSize = -1;
  private int mLastMeasureWidth = -1;
  int mLastMeasureWidthMode = 0;
  int mLastMeasureWidthSize = -1;
  ConstraintWidgetContainer mLayoutWidget = new ConstraintWidgetContainer();
  private int mMaxHeight = Integer.MAX_VALUE;
  private int mMaxWidth = Integer.MAX_VALUE;
  private Metrics mMetrics;
  private int mMinHeight = 0;
  private int mMinWidth = 0;
  private int mOptimizationLevel = 7;
  private final ArrayList<ConstraintWidget> mVariableDimensionsWidgets = new ArrayList(100);
  
  public ConstraintLayout(Context paramContext)
  {
    super(paramContext);
    init(null);
  }
  
  public ConstraintLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    init(paramAttributeSet);
  }
  
  public ConstraintLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    init(paramAttributeSet);
  }
  
  private final ConstraintWidget getTargetWidget(int paramInt)
  {
    if (paramInt == 0) {
      return mLayoutWidget;
    }
    View localView2 = (View)mChildrenByIds.get(paramInt);
    View localView1 = localView2;
    if (localView2 == null)
    {
      localView2 = findViewById(paramInt);
      localView1 = localView2;
      if (localView2 != null)
      {
        localView1 = localView2;
        if (localView2 != this)
        {
          localView1 = localView2;
          if (localView2.getParent() == this)
          {
            onViewAdded(localView2);
            localView1 = localView2;
          }
        }
      }
    }
    if (localView1 == this) {
      return mLayoutWidget;
    }
    if (localView1 == null) {
      return null;
    }
    return getLayoutParamswidget;
  }
  
  private void init(AttributeSet paramAttributeSet)
  {
    mLayoutWidget.setCompanionWidget(this);
    mChildrenByIds.put(getId(), this);
    mConstraintSet = null;
    if (paramAttributeSet != null)
    {
      paramAttributeSet = getContext().obtainStyledAttributes(paramAttributeSet, R.styleable.ConstraintLayout_Layout);
      int j = paramAttributeSet.getIndexCount();
      int i = 0;
      while (i < j)
      {
        int k = paramAttributeSet.getIndex(i);
        if (k == R.styleable.ConstraintLayout_Layout_android_minWidth) {
          mMinWidth = paramAttributeSet.getDimensionPixelOffset(k, mMinWidth);
        } else if (k == R.styleable.ConstraintLayout_Layout_android_minHeight) {
          mMinHeight = paramAttributeSet.getDimensionPixelOffset(k, mMinHeight);
        } else if (k == R.styleable.ConstraintLayout_Layout_android_maxWidth) {
          mMaxWidth = paramAttributeSet.getDimensionPixelOffset(k, mMaxWidth);
        } else if (k == R.styleable.ConstraintLayout_Layout_android_maxHeight) {
          mMaxHeight = paramAttributeSet.getDimensionPixelOffset(k, mMaxHeight);
        } else if (k == R.styleable.ConstraintLayout_Layout_layout_optimizationLevel) {
          mOptimizationLevel = paramAttributeSet.getInt(k, mOptimizationLevel);
        } else if (k == R.styleable.ConstraintLayout_Layout_constraintSet) {
          k = paramAttributeSet.getResourceId(k, 0);
        }
        try
        {
          mConstraintSet = new ConstraintSet();
          mConstraintSet.load(getContext(), k);
        }
        catch (Resources.NotFoundException localNotFoundException)
        {
          for (;;) {}
        }
        mConstraintSet = null;
        mConstraintSetId = k;
        i += 1;
      }
      paramAttributeSet.recycle();
    }
    mLayoutWidget.setOptimizationLevel(mOptimizationLevel);
  }
  
  private void internalMeasureChildren(int paramInt1, int paramInt2)
  {
    int i3 = getPaddingTop() + getPaddingBottom();
    int i4 = getPaddingLeft() + getPaddingRight();
    int i5 = getChildCount();
    int n = 0;
    while (n < i5)
    {
      View localView = getChildAt(n);
      if (localView.getVisibility() != 8)
      {
        LayoutParams localLayoutParams = (LayoutParams)localView.getLayoutParams();
        ConstraintWidget localConstraintWidget = widget;
        if ((!isGuideline) && (!isHelper))
        {
          localConstraintWidget.setVisibility(localView.getVisibility());
          int i1 = width;
          int i2 = height;
          int i;
          if ((!horizontalDimensionFixed) && (!verticalDimensionFixed) && ((horizontalDimensionFixed) || (matchConstraintDefaultWidth != 1)) && (width != -1) && ((verticalDimensionFixed) || ((matchConstraintDefaultHeight != 1) && (height != -1)))) {
            i = 0;
          } else {
            i = 1;
          }
          int k;
          int m;
          int j;
          if (i != 0)
          {
            if (i1 == 0)
            {
              k = getChildMeasureSpec(paramInt1, i4, -2);
              i = 1;
            }
            else if (i1 == -1)
            {
              k = getChildMeasureSpec(paramInt1, i4, -1);
              i = 0;
            }
            else
            {
              if (i1 == -2) {
                i = 1;
              } else {
                i = 0;
              }
              k = getChildMeasureSpec(paramInt1, i4, i1);
            }
            if (i2 == 0)
            {
              m = getChildMeasureSpec(paramInt2, i3, -2);
              j = 1;
            }
            else if (i2 == -1)
            {
              m = getChildMeasureSpec(paramInt2, i3, -1);
              j = 0;
            }
            else
            {
              if (i2 == -2) {
                j = 1;
              } else {
                j = 0;
              }
              m = getChildMeasureSpec(paramInt2, i3, i2);
            }
            localView.measure(k, m);
            Metrics localMetrics = mMetrics;
            if (localMetrics != null) {
              measures += 1L;
            }
            boolean bool;
            if (i1 == -2) {
              bool = true;
            } else {
              bool = false;
            }
            localConstraintWidget.setWidthWrapContent(bool);
            if (i2 == -2) {
              bool = true;
            } else {
              bool = false;
            }
            localConstraintWidget.setHeightWrapContent(bool);
            k = localView.getMeasuredWidth();
            m = localView.getMeasuredHeight();
          }
          else
          {
            i = 0;
            j = 0;
            m = i2;
            k = i1;
          }
          localConstraintWidget.setWidth(k);
          localConstraintWidget.setHeight(m);
          if (i != 0) {
            localConstraintWidget.setWrapWidth(k);
          }
          if (j != 0) {
            localConstraintWidget.setWrapHeight(m);
          }
          if (needsBaseline)
          {
            i = localView.getBaseline();
            if (i != -1) {
              localConstraintWidget.setBaselineDistance(i);
            }
          }
        }
      }
      n += 1;
    }
  }
  
  private void internalMeasureDimensions(int paramInt1, int paramInt2)
  {
    Object localObject1 = this;
    int i2 = getPaddingTop() + getPaddingBottom();
    int i8 = getPaddingLeft() + getPaddingRight();
    int i3 = getChildCount();
    int i = 0;
    long l1;
    Object localObject2;
    Object localObject3;
    Object localObject4;
    int m;
    int n;
    int j;
    int i1;
    int k;
    Object localObject5;
    boolean bool;
    for (;;)
    {
      l1 = 1L;
      if (i >= i3) {
        break;
      }
      localObject2 = ((ConstraintLayout)localObject1).getChildAt(i);
      if (((View)localObject2).getVisibility() != 8)
      {
        localObject3 = (LayoutParams)((View)localObject2).getLayoutParams();
        localObject4 = widget;
        if ((!isGuideline) && (!isHelper))
        {
          ((ConstraintWidget)localObject4).setVisibility(((View)localObject2).getVisibility());
          m = width;
          n = height;
          if ((m != 0) && (n != 0))
          {
            if (m == -2) {
              j = 1;
            } else {
              j = 0;
            }
            i1 = getChildMeasureSpec(paramInt1, i8, m);
            if (n == -2) {
              k = 1;
            } else {
              k = 0;
            }
            ((View)localObject2).measure(i1, getChildMeasureSpec(paramInt2, i2, n));
            localObject5 = mMetrics;
            if (localObject5 != null) {
              measures += 1L;
            }
            if (m == -2) {
              bool = true;
            } else {
              bool = false;
            }
            ((ConstraintWidget)localObject4).setWidthWrapContent(bool);
            if (n == -2) {
              bool = true;
            } else {
              bool = false;
            }
            ((ConstraintWidget)localObject4).setHeightWrapContent(bool);
            m = ((View)localObject2).getMeasuredWidth();
            n = ((View)localObject2).getMeasuredHeight();
            ((ConstraintWidget)localObject4).setWidth(m);
            ((ConstraintWidget)localObject4).setHeight(n);
            if (j != 0) {
              ((ConstraintWidget)localObject4).setWrapWidth(m);
            }
            if (k != 0) {
              ((ConstraintWidget)localObject4).setWrapHeight(n);
            }
            if (needsBaseline)
            {
              j = ((View)localObject2).getBaseline();
              if (j != -1) {
                ((ConstraintWidget)localObject4).setBaselineDistance(j);
              }
            }
            if ((horizontalDimensionFixed) && (verticalDimensionFixed))
            {
              ((ConstraintWidget)localObject4).getResolutionWidth().resolve(m);
              ((ConstraintWidget)localObject4).getResolutionHeight().resolve(n);
            }
          }
          else
          {
            ((ConstraintWidget)localObject4).getResolutionWidth().invalidate();
            ((ConstraintWidget)localObject4).getResolutionHeight().invalidate();
          }
        }
      }
      i += 1;
    }
    mLayoutWidget.solveGraph();
    int i4 = 0;
    while (i4 < i3)
    {
      localObject2 = ((ConstraintLayout)localObject1).getChildAt(i4);
      if (((View)localObject2).getVisibility() != 8)
      {
        localObject4 = (LayoutParams)((View)localObject2).getLayoutParams();
        localObject3 = widget;
        if ((!isGuideline) && (!isHelper))
        {
          ((ConstraintWidget)localObject3).setVisibility(((View)localObject2).getVisibility());
          n = width;
          i1 = height;
          if ((n == 0) || (i1 == 0))
          {
            localObject5 = ((ConstraintWidget)localObject3).getAnchor(ConstraintAnchor.Type.LEFT).getResolutionNode();
            ResolutionAnchor localResolutionAnchor1 = ((ConstraintWidget)localObject3).getAnchor(ConstraintAnchor.Type.RIGHT).getResolutionNode();
            if ((((ConstraintWidget)localObject3).getAnchor(ConstraintAnchor.Type.LEFT).getTarget() != null) && (((ConstraintWidget)localObject3).getAnchor(ConstraintAnchor.Type.RIGHT).getTarget() != null)) {
              j = 1;
            } else {
              j = 0;
            }
            ResolutionAnchor localResolutionAnchor2 = ((ConstraintWidget)localObject3).getAnchor(ConstraintAnchor.Type.TOP).getResolutionNode();
            ResolutionAnchor localResolutionAnchor3 = ((ConstraintWidget)localObject3).getAnchor(ConstraintAnchor.Type.BOTTOM).getResolutionNode();
            if ((((ConstraintWidget)localObject3).getAnchor(ConstraintAnchor.Type.TOP).getTarget() != null) && (((ConstraintWidget)localObject3).getAnchor(ConstraintAnchor.Type.BOTTOM).getTarget() != null)) {
              i7 = 1;
            } else {
              i7 = 0;
            }
            if ((n == 0) && (i1 == 0) && (j != 0) && (i7 != 0))
            {
              l1 = 1L;
              localObject2 = localObject1;
              break label1310;
            }
            if (mLayoutWidget.getHorizontalDimensionBehaviour() != ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {
              m = 1;
            } else {
              m = 0;
            }
            if (mLayoutWidget.getVerticalDimensionBehaviour() != ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {
              i = 1;
            } else {
              i = 0;
            }
            if (m == 0) {
              ((ConstraintWidget)localObject3).getResolutionWidth().invalidate();
            }
            if (i == 0) {
              ((ConstraintWidget)localObject3).getResolutionHeight().invalidate();
            }
            if (n == 0)
            {
              if ((m != 0) && (((ConstraintWidget)localObject3).isSpreadWidth()) && (j != 0) && (((ResolutionAnchor)localObject5).isResolved()) && (localResolutionAnchor1.isResolved()))
              {
                n = (int)(localResolutionAnchor1.getResolvedValue() - ((ResolutionAnchor)localObject5).getResolvedValue());
                ((ConstraintWidget)localObject3).getResolutionWidth().resolve(n);
                k = getChildMeasureSpec(paramInt1, i8, n);
              }
              else
              {
                k = getChildMeasureSpec(paramInt1, i8, -2);
                j = 1;
                i5 = 0;
                i6 = n;
                break label908;
              }
            }
            else
            {
              if (n != -1) {
                break label874;
              }
              k = getChildMeasureSpec(paramInt1, i8, -1);
            }
            j = 0;
            int i5 = m;
            int i6 = n;
            break label908;
            label874:
            if (n == -2) {
              j = 1;
            } else {
              j = 0;
            }
            k = getChildMeasureSpec(paramInt1, i8, n);
            i6 = n;
            i5 = m;
            label908:
            if (i1 == 0)
            {
              if ((i != 0) && (((ConstraintWidget)localObject3).isSpreadHeight()) && (i7 != 0) && (localResolutionAnchor2.isResolved()) && (localResolutionAnchor3.isResolved()))
              {
                i1 = (int)(localResolutionAnchor3.getResolvedValue() - localResolutionAnchor2.getResolvedValue());
                ((ConstraintWidget)localObject3).getResolutionHeight().resolve(i1);
                m = getChildMeasureSpec(paramInt2, i2, i1);
              }
              else
              {
                m = getChildMeasureSpec(paramInt2, i2, -2);
                i = 1;
                n = 0;
                break label1060;
              }
            }
            else
            {
              if (i1 != -1) {
                break label1024;
              }
              m = getChildMeasureSpec(paramInt2, i2, -1);
            }
            n = i;
            i = 0;
            break label1060;
            label1024:
            if (i1 == -2) {
              m = 1;
            } else {
              m = 0;
            }
            int i7 = getChildMeasureSpec(paramInt2, i2, i1);
            n = i;
            i = m;
            m = i7;
            label1060:
            ((View)localObject2).measure(k, m);
            localObject1 = this;
            localObject5 = mMetrics;
            if (localObject5 != null) {
              measures += 1L;
            }
            long l2 = 1L;
            if (i6 == -2) {
              bool = true;
            } else {
              bool = false;
            }
            ((ConstraintWidget)localObject3).setWidthWrapContent(bool);
            if (i1 == -2) {
              bool = true;
            } else {
              bool = false;
            }
            ((ConstraintWidget)localObject3).setHeightWrapContent(bool);
            k = ((View)localObject2).getMeasuredWidth();
            m = ((View)localObject2).getMeasuredHeight();
            ((ConstraintWidget)localObject3).setWidth(k);
            ((ConstraintWidget)localObject3).setHeight(m);
            if (j != 0) {
              ((ConstraintWidget)localObject3).setWrapWidth(k);
            }
            if (i != 0) {
              ((ConstraintWidget)localObject3).setWrapHeight(m);
            }
            if (i5 != 0) {
              ((ConstraintWidget)localObject3).getResolutionWidth().resolve(k);
            } else {
              ((ConstraintWidget)localObject3).getResolutionWidth().remove();
            }
            if (n != 0) {
              ((ConstraintWidget)localObject3).getResolutionHeight().resolve(m);
            } else {
              ((ConstraintWidget)localObject3).getResolutionHeight().remove();
            }
            if (needsBaseline)
            {
              i = ((View)localObject2).getBaseline();
              localObject2 = localObject1;
              l1 = l2;
              if (i == -1) {
                break label1310;
              }
              ((ConstraintWidget)localObject3).setBaselineDistance(i);
              localObject2 = localObject1;
              l1 = l2;
              break label1310;
            }
            localObject2 = localObject1;
            l1 = l2;
            break label1310;
          }
        }
      }
      localObject2 = localObject1;
      label1310:
      i4 += 1;
      localObject1 = localObject2;
    }
  }
  
  private void setChildrenConstraints()
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: can not merge Z and I\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
  }
  
  private void setSelfDimensionBehaviour(int paramInt1, int paramInt2)
  {
    int m = View.MeasureSpec.getMode(paramInt1);
    paramInt1 = View.MeasureSpec.getSize(paramInt1);
    int i = View.MeasureSpec.getMode(paramInt2);
    paramInt2 = View.MeasureSpec.getSize(paramInt2);
    int j = getPaddingTop();
    int k = getPaddingBottom();
    int n = getPaddingLeft();
    int i1 = getPaddingRight();
    ConstraintWidget.DimensionBehaviour localDimensionBehaviour1 = ConstraintWidget.DimensionBehaviour.FIXED;
    ConstraintWidget.DimensionBehaviour localDimensionBehaviour2 = ConstraintWidget.DimensionBehaviour.FIXED;
    getLayoutParams();
    if (m != Integer.MIN_VALUE)
    {
      if (m != 0) {
        if (m == 1073741824) {}
      }
      for (;;)
      {
        paramInt1 = 0;
        break;
        paramInt1 = Math.min(mMaxWidth, paramInt1) - (n + i1);
        break;
        localDimensionBehaviour1 = ConstraintWidget.DimensionBehaviour.WRAP_CONTENT;
      }
    }
    localDimensionBehaviour1 = ConstraintWidget.DimensionBehaviour.WRAP_CONTENT;
    if (i != Integer.MIN_VALUE)
    {
      if (i != 0) {
        if (i == 1073741824) {}
      }
      for (;;)
      {
        paramInt2 = 0;
        break;
        paramInt2 = Math.min(mMaxHeight, paramInt2) - (j + k);
        break;
        localDimensionBehaviour2 = ConstraintWidget.DimensionBehaviour.WRAP_CONTENT;
      }
    }
    localDimensionBehaviour2 = ConstraintWidget.DimensionBehaviour.WRAP_CONTENT;
    mLayoutWidget.setMinWidth(0);
    mLayoutWidget.setMinHeight(0);
    mLayoutWidget.setHorizontalDimensionBehaviour(localDimensionBehaviour1);
    mLayoutWidget.setWidth(paramInt1);
    mLayoutWidget.setVerticalDimensionBehaviour(localDimensionBehaviour2);
    mLayoutWidget.setHeight(paramInt2);
    mLayoutWidget.setMinWidth(mMinWidth - getPaddingLeft() - getPaddingRight());
    mLayoutWidget.setMinHeight(mMinHeight - getPaddingTop() - getPaddingBottom());
  }
  
  private void updateHierarchy()
  {
    int m = getChildCount();
    int k = 0;
    int i = 0;
    int j;
    for (;;)
    {
      j = k;
      if (i >= m) {
        break;
      }
      if (getChildAt(i).isLayoutRequested())
      {
        j = 1;
        break;
      }
      i += 1;
    }
    if (j != 0)
    {
      mVariableDimensionsWidgets.clear();
      setChildrenConstraints();
    }
  }
  
  private void updatePostMeasures()
  {
    int k = getChildCount();
    int j = 0;
    int i = 0;
    while (i < k)
    {
      View localView = getChildAt(i);
      if ((localView instanceof Placeholder)) {
        ((Placeholder)localView).updatePostMeasure(this);
      }
      i += 1;
    }
    k = mConstraintHelpers.size();
    if (k > 0)
    {
      i = j;
      while (i < k)
      {
        ((ConstraintHelper)mConstraintHelpers.get(i)).updatePostMeasure(this);
        i += 1;
      }
    }
  }
  
  public void addView(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams)
  {
    super.addView(paramView, paramInt, paramLayoutParams);
    if (Build.VERSION.SDK_INT < 14) {
      onViewAdded(paramView);
    }
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return paramLayoutParams instanceof LayoutParams;
  }
  
  public void dispatchDraw(Canvas paramCanvas)
  {
    super.dispatchDraw(paramCanvas);
    if (isInEditMode())
    {
      int j = getChildCount();
      float f1 = getWidth();
      float f2 = getHeight();
      int i = 0;
      while (i < j)
      {
        Object localObject = getChildAt(i);
        if (((View)localObject).getVisibility() != 8)
        {
          localObject = ((View)localObject).getTag();
          if ((localObject != null) && ((localObject instanceof String)))
          {
            localObject = ((String)localObject).split(",");
            if (localObject.length == 4)
            {
              int m = Integer.parseInt(localObject[0]);
              int i1 = Integer.parseInt(localObject[1]);
              int n = Integer.parseInt(localObject[2]);
              int k = Integer.parseInt(localObject[3]);
              m = (int)(m / 1080.0F * f1);
              i1 = (int)(i1 / 1920.0F * f2);
              n = (int)(n / 1080.0F * f1);
              k = (int)(k / 1920.0F * f2);
              localObject = new Paint();
              ((Paint)localObject).setColor(-65536);
              float f3 = m;
              float f4 = i1;
              float f5 = m + n;
              paramCanvas.drawLine(f3, f4, f5, f4, (Paint)localObject);
              float f6 = i1 + k;
              paramCanvas.drawLine(f5, f4, f5, f6, (Paint)localObject);
              paramCanvas.drawLine(f5, f6, f3, f6, (Paint)localObject);
              paramCanvas.drawLine(f3, f6, f3, f4, (Paint)localObject);
              ((Paint)localObject).setColor(-16711936);
              paramCanvas.drawLine(f3, f4, f5, f6, (Paint)localObject);
              paramCanvas.drawLine(f3, f6, f5, f4, (Paint)localObject);
            }
          }
        }
        i += 1;
      }
    }
  }
  
  public void fillMetrics(Metrics paramMetrics)
  {
    mMetrics = paramMetrics;
    mLayoutWidget.fillMetrics(paramMetrics);
  }
  
  protected LayoutParams generateDefaultLayoutParams()
  {
    return new LayoutParams(-2, -2);
  }
  
  protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return new LayoutParams(paramLayoutParams);
  }
  
  public LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new LayoutParams(getContext(), paramAttributeSet);
  }
  
  public Object getDesignInformation(int paramInt, Object paramObject)
  {
    if ((paramInt == 0) && ((paramObject instanceof String)))
    {
      paramObject = (String)paramObject;
      HashMap localHashMap = mDesignIds;
      if ((localHashMap != null) && (localHashMap.containsKey(paramObject))) {
        return mDesignIds.get(paramObject);
      }
    }
    return null;
  }
  
  public int getMaxHeight()
  {
    return mMaxHeight;
  }
  
  public int getMaxWidth()
  {
    return mMaxWidth;
  }
  
  public int getMinHeight()
  {
    return mMinHeight;
  }
  
  public int getMinWidth()
  {
    return mMinWidth;
  }
  
  public int getOptimizationLevel()
  {
    return mLayoutWidget.getOptimizationLevel();
  }
  
  public View getViewById(int paramInt)
  {
    return (View)mChildrenByIds.get(paramInt);
  }
  
  public final ConstraintWidget getViewWidget(View paramView)
  {
    if (paramView == this) {
      return mLayoutWidget;
    }
    if (paramView == null) {
      return null;
    }
    return getLayoutParamswidget;
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt3 = getChildCount();
    paramBoolean = isInEditMode();
    paramInt2 = 0;
    paramInt1 = 0;
    while (paramInt1 < paramInt3)
    {
      View localView = getChildAt(paramInt1);
      LayoutParams localLayoutParams = (LayoutParams)localView.getLayoutParams();
      ConstraintWidget localConstraintWidget = widget;
      if (((localView.getVisibility() != 8) || (isGuideline) || (isHelper) || (paramBoolean)) && (!isInPlaceholder))
      {
        paramInt4 = localConstraintWidget.getDrawX();
        int i = localConstraintWidget.getDrawY();
        int j = localConstraintWidget.getWidth() + paramInt4;
        int k = localConstraintWidget.getHeight() + i;
        localView.layout(paramInt4, i, j, k);
        if ((localView instanceof Placeholder))
        {
          localView = ((Placeholder)localView).getContent();
          if (localView != null)
          {
            localView.setVisibility(0);
            localView.layout(paramInt4, i, j, k);
          }
        }
      }
      paramInt1 += 1;
    }
    paramInt3 = mConstraintHelpers.size();
    if (paramInt3 > 0)
    {
      paramInt1 = paramInt2;
      while (paramInt1 < paramInt3)
      {
        ((ConstraintHelper)mConstraintHelpers.get(paramInt1)).updatePostLayout(this);
        paramInt1 += 1;
      }
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    System.currentTimeMillis();
    int m = View.MeasureSpec.getMode(paramInt1);
    int n = View.MeasureSpec.getSize(paramInt1);
    int i2 = View.MeasureSpec.getMode(paramInt2);
    int i3 = View.MeasureSpec.getSize(paramInt2);
    int j = getPaddingLeft();
    int k = getPaddingTop();
    mLayoutWidget.setX(j);
    mLayoutWidget.setY(k);
    mLayoutWidget.setMaxWidth(mMaxWidth);
    mLayoutWidget.setMaxHeight(mMaxHeight);
    Object localObject;
    if (Build.VERSION.SDK_INT >= 17)
    {
      localObject = mLayoutWidget;
      boolean bool;
      if (getLayoutDirection() == 1) {
        bool = true;
      } else {
        bool = false;
      }
      ((ConstraintWidgetContainer)localObject).setRtl(bool);
    }
    setSelfDimensionBehaviour(paramInt1, paramInt2);
    int i6 = mLayoutWidget.getWidth();
    int i5 = mLayoutWidget.getHeight();
    if (mDirtyHierarchy)
    {
      mDirtyHierarchy = false;
      updateHierarchy();
      i = 1;
    }
    else
    {
      i = 0;
    }
    int i1;
    if ((mOptimizationLevel & 0x8) == 8) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    if (i1 != 0)
    {
      mLayoutWidget.preOptimize();
      mLayoutWidget.optimizeForDimensions(i6, i5);
      internalMeasureDimensions(paramInt1, paramInt2);
    }
    else
    {
      internalMeasureChildren(paramInt1, paramInt2);
    }
    updatePostMeasures();
    if ((getChildCount() > 0) && (i != 0)) {
      Analyzer.determineGroups(mLayoutWidget);
    }
    if (mLayoutWidget.mGroupsWrapOptimized)
    {
      if ((mLayoutWidget.mHorizontalWrapOptimized) && (m == Integer.MIN_VALUE))
      {
        if (mLayoutWidget.mWrapFixedWidth < n)
        {
          localObject = mLayoutWidget;
          ((ConstraintWidgetContainer)localObject).setWidth(mWrapFixedWidth);
        }
        mLayoutWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.FIXED);
      }
      if ((mLayoutWidget.mVerticalWrapOptimized) && (i2 == Integer.MIN_VALUE))
      {
        if (mLayoutWidget.mWrapFixedHeight < i3)
        {
          localObject = mLayoutWidget;
          ((ConstraintWidgetContainer)localObject).setHeight(mWrapFixedHeight);
        }
        mLayoutWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.FIXED);
      }
    }
    if ((mOptimizationLevel & 0x20) == 32)
    {
      i = mLayoutWidget.getWidth();
      i4 = mLayoutWidget.getHeight();
      if ((mLastMeasureWidth != i) && (m == 1073741824)) {
        Analyzer.setPosition(mLayoutWidget.mWidgetGroups, 0, i);
      }
      if ((mLastMeasureHeight != i4) && (i2 == 1073741824)) {
        Analyzer.setPosition(mLayoutWidget.mWidgetGroups, 1, i4);
      }
      if ((mLayoutWidget.mHorizontalWrapOptimized) && (mLayoutWidget.mWrapFixedWidth > n)) {
        Analyzer.setPosition(mLayoutWidget.mWidgetGroups, 0, n);
      }
      if ((mLayoutWidget.mVerticalWrapOptimized) && (mLayoutWidget.mWrapFixedHeight > i3)) {
        Analyzer.setPosition(mLayoutWidget.mWidgetGroups, 1, i3);
      }
    }
    if (getChildCount() > 0) {
      solveLinearSystem("First pass");
    }
    int i4 = mVariableDimensionsWidgets.size();
    int i9 = k + getPaddingBottom();
    int i10 = j + getPaddingRight();
    if (i4 > 0)
    {
      if (mLayoutWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {
        i2 = 1;
      } else {
        i2 = 0;
      }
      if (mLayoutWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {
        i3 = 1;
      } else {
        i3 = 0;
      }
      k = Math.max(mLayoutWidget.getWidth(), mMinWidth);
      j = Math.max(mLayoutWidget.getHeight(), mMinHeight);
      int i7 = 0;
      m = 0;
      i = 0;
      View localView;
      while (i7 < i4)
      {
        localObject = (ConstraintWidget)mVariableDimensionsWidgets.get(i7);
        localView = (View)((ConstraintWidget)localObject).getCompanionWidget();
        if (localView != null)
        {
          LayoutParams localLayoutParams = (LayoutParams)localView.getLayoutParams();
          if ((!isHelper) && (!isGuideline))
          {
            int i8 = localView.getVisibility();
            n = m;
            if (i8 != 8)
            {
              while ((i1 != 0) && (((ConstraintWidget)localObject).getResolutionWidth().isResolved()) && (((ConstraintWidget)localObject).getResolutionHeight().isResolved())) {}
              if ((width == -2) && (horizontalDimensionFixed)) {
                m = getChildMeasureSpec(paramInt1, i10, width);
              } else {
                m = View.MeasureSpec.makeMeasureSpec(((ConstraintWidget)localObject).getWidth(), 1073741824);
              }
              if ((height == -2) && (verticalDimensionFixed)) {
                i8 = getChildMeasureSpec(paramInt2, i9, height);
              } else {
                i8 = View.MeasureSpec.makeMeasureSpec(((ConstraintWidget)localObject).getHeight(), 1073741824);
              }
              localView.measure(m, i8);
              Metrics localMetrics = mMetrics;
              if (localMetrics != null) {
                additionalMeasures += 1L;
              }
              int i11 = localView.getMeasuredWidth();
              i8 = localView.getMeasuredHeight();
              m = k;
              if (i11 != ((ConstraintWidget)localObject).getWidth())
              {
                ((ConstraintWidget)localObject).setWidth(i11);
                if (i1 != 0) {
                  ((ConstraintWidget)localObject).getResolutionWidth().resolve(i11);
                }
                m = k;
                if (i2 != 0)
                {
                  m = k;
                  if (((ConstraintWidget)localObject).getRight() > k) {
                    m = Math.max(k, ((ConstraintWidget)localObject).getRight() + ((ConstraintWidget)localObject).getAnchor(ConstraintAnchor.Type.RIGHT).getMargin());
                  }
                }
                n = 1;
              }
              k = j;
              if (i8 != ((ConstraintWidget)localObject).getHeight())
              {
                ((ConstraintWidget)localObject).setHeight(i8);
                if (i1 != 0) {
                  ((ConstraintWidget)localObject).getResolutionHeight().resolve(i8);
                }
                k = j;
                if (i3 != 0)
                {
                  k = j;
                  if (((ConstraintWidget)localObject).getBottom() > j) {
                    k = Math.max(j, ((ConstraintWidget)localObject).getBottom() + ((ConstraintWidget)localObject).getAnchor(ConstraintAnchor.Type.BOTTOM).getMargin());
                  }
                }
                n = 1;
              }
              j = n;
              if (needsBaseline)
              {
                i8 = localView.getBaseline();
                j = n;
                if (i8 != -1)
                {
                  j = n;
                  if (i8 != ((ConstraintWidget)localObject).getBaselineDistance())
                  {
                    ((ConstraintWidget)localObject).setBaselineDistance(i8);
                    j = 1;
                  }
                }
              }
              if (Build.VERSION.SDK_INT >= 11)
              {
                i = combineMeasuredStates(i, localView.getMeasuredState());
                n = k;
                k = m;
                m = j;
                break label1197;
              }
              n = k;
              k = m;
              m = j;
              break label1197;
            }
          }
        }
        n = j;
        label1197:
        i7 += 1;
        j = n;
      }
      n = i;
      if (m != 0)
      {
        mLayoutWidget.setWidth(i6);
        mLayoutWidget.setHeight(i5);
        if (i1 != 0) {
          mLayoutWidget.solveGraph();
        }
        solveLinearSystem("2nd pass");
        if (mLayoutWidget.getWidth() < k)
        {
          mLayoutWidget.setWidth(k);
          i = 1;
        }
        else
        {
          i = 0;
        }
        if (mLayoutWidget.getHeight() < j)
        {
          mLayoutWidget.setHeight(j);
          i = 1;
        }
        if (i != 0) {
          solveLinearSystem("3rd pass");
        }
      }
      j = 0;
      for (;;)
      {
        i = n;
        if (j >= i4) {
          break;
        }
        localObject = (ConstraintWidget)mVariableDimensionsWidgets.get(j);
        localView = (View)((ConstraintWidget)localObject).getCompanionWidget();
        if (localView != null)
        {
          while (((localView.getMeasuredWidth() == ((ConstraintWidget)localObject).getWidth()) && (localView.getMeasuredHeight() == ((ConstraintWidget)localObject).getHeight())) || (((ConstraintWidget)localObject).getVisibility() == 8)) {}
          localView.measure(View.MeasureSpec.makeMeasureSpec(((ConstraintWidget)localObject).getWidth(), 1073741824), View.MeasureSpec.makeMeasureSpec(((ConstraintWidget)localObject).getHeight(), 1073741824));
          localObject = mMetrics;
          if (localObject != null) {
            additionalMeasures += 1L;
          }
        }
        j += 1;
      }
    }
    int i = 0;
    j = mLayoutWidget.getWidth() + i10;
    k = mLayoutWidget.getHeight() + i9;
    if (Build.VERSION.SDK_INT >= 11)
    {
      paramInt1 = resolveSizeAndState(j, paramInt1, i);
      i = resolveSizeAndState(k, paramInt2, i << 16);
      paramInt2 = Math.min(mMaxWidth, paramInt1 & 0xFFFFFF);
      i = Math.min(mMaxHeight, i & 0xFFFFFF);
      paramInt1 = paramInt2;
      if (mLayoutWidget.isWidthMeasuredTooSmall()) {
        paramInt1 = paramInt2 | 0x1000000;
      }
      paramInt2 = i;
      if (mLayoutWidget.isHeightMeasuredTooSmall()) {
        paramInt2 = i | 0x1000000;
      }
      setMeasuredDimension(paramInt1, paramInt2);
      mLastMeasureWidth = paramInt1;
      mLastMeasureHeight = paramInt2;
      return;
    }
    setMeasuredDimension(j, k);
    mLastMeasureWidth = j;
    mLastMeasureHeight = k;
  }
  
  public void onViewAdded(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 14) {
      super.onViewAdded(paramView);
    }
    Object localObject = getViewWidget(paramView);
    if (((paramView instanceof Guideline)) && (!(localObject instanceof androidx.constraintlayout.solver.widgets.Guideline)))
    {
      localObject = (LayoutParams)paramView.getLayoutParams();
      widget = new androidx.constraintlayout.solver.widgets.Guideline();
      isGuideline = true;
      ((androidx.constraintlayout.solver.widgets.Guideline)widget).setOrientation(orientation);
    }
    if ((paramView instanceof ConstraintHelper))
    {
      localObject = (ConstraintHelper)paramView;
      ((ConstraintHelper)localObject).validateParams();
      getLayoutParamsisHelper = true;
      if (!mConstraintHelpers.contains(localObject)) {
        mConstraintHelpers.add(localObject);
      }
    }
    mChildrenByIds.put(paramView.getId(), paramView);
    mDirtyHierarchy = true;
  }
  
  public void onViewRemoved(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 14) {
      super.onViewRemoved(paramView);
    }
    mChildrenByIds.remove(paramView.getId());
    ConstraintWidget localConstraintWidget = getViewWidget(paramView);
    mLayoutWidget.remove(localConstraintWidget);
    mConstraintHelpers.remove(paramView);
    mVariableDimensionsWidgets.remove(localConstraintWidget);
    mDirtyHierarchy = true;
  }
  
  public void removeView(View paramView)
  {
    super.removeView(paramView);
    if (Build.VERSION.SDK_INT < 14) {
      onViewRemoved(paramView);
    }
  }
  
  public void requestLayout()
  {
    super.requestLayout();
    mDirtyHierarchy = true;
    mLastMeasureWidth = -1;
    mLastMeasureHeight = -1;
    mLastMeasureWidthSize = -1;
    mLastMeasureHeightSize = -1;
    mLastMeasureWidthMode = 0;
    mLastMeasureHeightMode = 0;
  }
  
  public void setConstraintSet(ConstraintSet paramConstraintSet)
  {
    mConstraintSet = paramConstraintSet;
  }
  
  public void setDesignInformation(int paramInt, Object paramObject1, Object paramObject2)
  {
    if ((paramInt == 0) && ((paramObject1 instanceof String)) && ((paramObject2 instanceof Integer)))
    {
      if (mDesignIds == null) {
        mDesignIds = new HashMap();
      }
      String str = (String)paramObject1;
      paramInt = str.indexOf("/");
      paramObject1 = str;
      if (paramInt != -1) {
        paramObject1 = str.substring(paramInt + 1);
      }
      paramInt = ((Integer)paramObject2).intValue();
      mDesignIds.put(paramObject1, Integer.valueOf(paramInt));
    }
  }
  
  public void setId(int paramInt)
  {
    mChildrenByIds.remove(getId());
    super.setId(paramInt);
    mChildrenByIds.put(getId(), this);
  }
  
  public void setMaxHeight(int paramInt)
  {
    if (paramInt == mMaxHeight) {
      return;
    }
    mMaxHeight = paramInt;
    requestLayout();
  }
  
  public void setMaxWidth(int paramInt)
  {
    if (paramInt == mMaxWidth) {
      return;
    }
    mMaxWidth = paramInt;
    requestLayout();
  }
  
  public void setMinHeight(int paramInt)
  {
    if (paramInt == mMinHeight) {
      return;
    }
    mMinHeight = paramInt;
    requestLayout();
  }
  
  public void setMinWidth(int paramInt)
  {
    if (paramInt == mMinWidth) {
      return;
    }
    mMinWidth = paramInt;
    requestLayout();
  }
  
  public void setOptimizationLevel(int paramInt)
  {
    mLayoutWidget.setOptimizationLevel(paramInt);
  }
  
  public boolean shouldDelayChildPressedState()
  {
    return false;
  }
  
  protected void solveLinearSystem(String paramString)
  {
    mLayoutWidget.layout();
    paramString = mMetrics;
    if (paramString != null) {
      resolutions += 1L;
    }
  }
  
  public static class LayoutParams
    extends ViewGroup.MarginLayoutParams
  {
    public static final int BASELINE = 5;
    public static final int BOTTOM = 4;
    public static final int CHAIN_PACKED = 2;
    public static final int CHAIN_SPREAD = 0;
    public static final int CHAIN_SPREAD_INSIDE = 1;
    public static final int END = 7;
    public static final int HORIZONTAL = 0;
    public static final int LEFT = 1;
    public static final int MATCH_CONSTRAINT = 0;
    public static final int MATCH_CONSTRAINT_PERCENT = 2;
    public static final int MATCH_CONSTRAINT_SPREAD = 0;
    public static final int MATCH_CONSTRAINT_WRAP = 1;
    public static final int PARENT_ID = 0;
    public static final int RIGHT = 2;
    public static final int START = 6;
    public static final int TOP = 3;
    public static final int UNSET = -1;
    public static final int VERTICAL = 1;
    public int baselineToBaseline = -1;
    public int bottomToBottom = -1;
    public int bottomToTop = -1;
    public float circleAngle = 0.0F;
    public int circleConstraint = -1;
    public int circleRadius = 0;
    public boolean constrainedHeight = false;
    public boolean constrainedWidth = false;
    public String dimensionRatio = null;
    int dimensionRatioSide = 1;
    float dimensionRatioValue = 0.0F;
    public int editorAbsoluteX = -1;
    public int editorAbsoluteY = -1;
    public int endToEnd = -1;
    public int endToStart = -1;
    public int goneBottomMargin = -1;
    public int goneEndMargin = -1;
    public int goneLeftMargin = -1;
    public int goneRightMargin = -1;
    public int goneStartMargin = -1;
    public int goneTopMargin = -1;
    public int guideBegin = -1;
    public int guideEnd = -1;
    public float guidePercent = -1.0F;
    public boolean helped = false;
    public float horizontalBias = 0.5F;
    public int horizontalChainStyle = 0;
    boolean horizontalDimensionFixed = true;
    public float horizontalWeight = -1.0F;
    boolean isGuideline = false;
    boolean isHelper = false;
    boolean isInPlaceholder = false;
    public int leftToLeft = -1;
    public int leftToRight = -1;
    public int matchConstraintDefaultHeight = 0;
    public int matchConstraintDefaultWidth = 0;
    public int matchConstraintMaxHeight = 0;
    public int matchConstraintMaxWidth = 0;
    public int matchConstraintMinHeight = 0;
    public int matchConstraintMinWidth = 0;
    public float matchConstraintPercentHeight = 1.0F;
    public float matchConstraintPercentWidth = 1.0F;
    boolean needsBaseline = false;
    public int orientation = -1;
    int resolveGoneLeftMargin = -1;
    int resolveGoneRightMargin = -1;
    int resolvedGuideBegin;
    int resolvedGuideEnd;
    float resolvedGuidePercent;
    float resolvedHorizontalBias = 0.5F;
    int resolvedLeftToLeft = -1;
    int resolvedLeftToRight = -1;
    int resolvedRightToLeft = -1;
    int resolvedRightToRight = -1;
    public int rightToLeft = -1;
    public int rightToRight = -1;
    public int startToEnd = -1;
    public int startToStart = -1;
    public int topToBottom = -1;
    public int topToTop = -1;
    public float verticalBias = 0.5F;
    public int verticalChainStyle = 0;
    boolean verticalDimensionFixed = true;
    public float verticalWeight = -1.0F;
    ConstraintWidget widget = new ConstraintWidget();
    
    public LayoutParams(int paramInt1, int paramInt2)
    {
      super(paramInt2);
    }
    
    public LayoutParams(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.ConstraintLayout_Layout);
      int k = paramContext.getIndexCount();
      int i = 0;
      while (i < k)
      {
        int j = paramContext.getIndex(i);
        String str;
        switch (Table.map.get(j))
        {
        case 43: 
        default: 
          break;
        case 50: 
          editorAbsoluteY = paramContext.getDimensionPixelOffset(j, editorAbsoluteY);
          break;
        case 49: 
          editorAbsoluteX = paramContext.getDimensionPixelOffset(j, editorAbsoluteX);
          break;
        case 48: 
          verticalChainStyle = paramContext.getInt(j, 0);
          break;
        case 47: 
          horizontalChainStyle = paramContext.getInt(j, 0);
          break;
        case 46: 
          verticalWeight = paramContext.getFloat(j, verticalWeight);
          break;
        case 45: 
          horizontalWeight = paramContext.getFloat(j, horizontalWeight);
          break;
        case 44: 
          dimensionRatio = paramContext.getString(j);
          dimensionRatioValue = NaN.0F;
          dimensionRatioSide = -1;
          paramAttributeSet = dimensionRatio;
          if (paramAttributeSet != null)
          {
            int m = paramAttributeSet.length();
            j = dimensionRatio.indexOf(',');
            if ((j > 0) && (j < m - 1))
            {
              paramAttributeSet = dimensionRatio.substring(0, j);
              if (paramAttributeSet.equalsIgnoreCase("W")) {
                dimensionRatioSide = 0;
              } else if (paramAttributeSet.equalsIgnoreCase("H")) {
                dimensionRatioSide = 1;
              }
              j += 1;
            }
            else
            {
              j = 0;
            }
            int n = dimensionRatio.indexOf(':');
            if ((n >= 0) && (n < m - 1))
            {
              paramAttributeSet = dimensionRatio.substring(j, n);
              str = dimensionRatio.substring(n + 1);
              if ((paramAttributeSet.length() <= 0) || (str.length() <= 0)) {
                break label2030;
              }
            }
          }
          break;
        }
        try
        {
          f1 = Float.parseFloat(paramAttributeSet);
          float f2 = Float.parseFloat(str);
          if ((f1 <= 0.0F) || (f2 <= 0.0F)) {
            break label2030;
          }
          if (dimensionRatioSide == 1) {
            dimensionRatioValue = Math.abs(f2 / f1);
          } else {
            dimensionRatioValue = Math.abs(f1 / f2);
          }
        }
        catch (NumberFormatException paramAttributeSet)
        {
          float f1;
          for (;;) {}
        }
        paramAttributeSet = dimensionRatio.substring(j);
        if (paramAttributeSet.length() > 0)
        {
          dimensionRatioValue = Float.parseFloat(paramAttributeSet);
          break label2030;
          matchConstraintPercentHeight = Math.max(0.0F, paramContext.getFloat(j, matchConstraintPercentHeight));
        }
        try
        {
          matchConstraintMaxHeight = paramContext.getDimensionPixelSize(j, matchConstraintMaxHeight);
        }
        catch (Exception paramAttributeSet)
        {
          for (;;) {}
        }
        if (paramContext.getInt(j, matchConstraintMaxHeight) == -2) {
          matchConstraintMaxHeight = -2;
        }
        try
        {
          matchConstraintMinHeight = paramContext.getDimensionPixelSize(j, matchConstraintMinHeight);
        }
        catch (Exception paramAttributeSet)
        {
          for (;;) {}
        }
        if (paramContext.getInt(j, matchConstraintMinHeight) == -2)
        {
          matchConstraintMinHeight = -2;
          break label2030;
          matchConstraintPercentWidth = Math.max(0.0F, paramContext.getFloat(j, matchConstraintPercentWidth));
        }
        try
        {
          matchConstraintMaxWidth = paramContext.getDimensionPixelSize(j, matchConstraintMaxWidth);
        }
        catch (Exception paramAttributeSet)
        {
          for (;;) {}
        }
        if (paramContext.getInt(j, matchConstraintMaxWidth) == -2) {
          matchConstraintMaxWidth = -2;
        }
        try
        {
          matchConstraintMinWidth = paramContext.getDimensionPixelSize(j, matchConstraintMinWidth);
        }
        catch (Exception paramAttributeSet)
        {
          for (;;) {}
        }
        if (paramContext.getInt(j, matchConstraintMinWidth) == -2)
        {
          matchConstraintMinWidth = -2;
          break label2030;
          matchConstraintDefaultHeight = paramContext.getInt(j, 0);
          if (matchConstraintDefaultHeight == 1)
          {
            Log.e("ConstraintLayout", "layout_constraintHeight_default=\"wrap\" is deprecated.\nUse layout_height=\"WRAP_CONTENT\" and layout_constrainedHeight=\"true\" instead.");
            break label2030;
            matchConstraintDefaultWidth = paramContext.getInt(j, 0);
            if (matchConstraintDefaultWidth == 1)
            {
              Log.e("ConstraintLayout", "layout_constraintWidth_default=\"wrap\" is deprecated.\nUse layout_width=\"WRAP_CONTENT\" and layout_constrainedWidth=\"true\" instead.");
              break label2030;
              verticalBias = paramContext.getFloat(j, verticalBias);
              break label2030;
              horizontalBias = paramContext.getFloat(j, horizontalBias);
              break label2030;
              constrainedHeight = paramContext.getBoolean(j, constrainedHeight);
              break label2030;
              constrainedWidth = paramContext.getBoolean(j, constrainedWidth);
              break label2030;
              goneEndMargin = paramContext.getDimensionPixelSize(j, goneEndMargin);
              break label2030;
              goneStartMargin = paramContext.getDimensionPixelSize(j, goneStartMargin);
              break label2030;
              goneBottomMargin = paramContext.getDimensionPixelSize(j, goneBottomMargin);
              break label2030;
              goneRightMargin = paramContext.getDimensionPixelSize(j, goneRightMargin);
              break label2030;
              goneTopMargin = paramContext.getDimensionPixelSize(j, goneTopMargin);
              break label2030;
              goneLeftMargin = paramContext.getDimensionPixelSize(j, goneLeftMargin);
              break label2030;
              endToEnd = paramContext.getResourceId(j, endToEnd);
              if (endToEnd == -1)
              {
                endToEnd = paramContext.getInt(j, -1);
                break label2030;
                endToStart = paramContext.getResourceId(j, endToStart);
                if (endToStart == -1)
                {
                  endToStart = paramContext.getInt(j, -1);
                  break label2030;
                  startToStart = paramContext.getResourceId(j, startToStart);
                  if (startToStart == -1)
                  {
                    startToStart = paramContext.getInt(j, -1);
                    break label2030;
                    startToEnd = paramContext.getResourceId(j, startToEnd);
                    if (startToEnd == -1)
                    {
                      startToEnd = paramContext.getInt(j, -1);
                      break label2030;
                      baselineToBaseline = paramContext.getResourceId(j, baselineToBaseline);
                      if (baselineToBaseline == -1)
                      {
                        baselineToBaseline = paramContext.getInt(j, -1);
                        break label2030;
                        bottomToBottom = paramContext.getResourceId(j, bottomToBottom);
                        if (bottomToBottom == -1)
                        {
                          bottomToBottom = paramContext.getInt(j, -1);
                          break label2030;
                          bottomToTop = paramContext.getResourceId(j, bottomToTop);
                          if (bottomToTop == -1)
                          {
                            bottomToTop = paramContext.getInt(j, -1);
                            break label2030;
                            topToBottom = paramContext.getResourceId(j, topToBottom);
                            if (topToBottom == -1)
                            {
                              topToBottom = paramContext.getInt(j, -1);
                              break label2030;
                              topToTop = paramContext.getResourceId(j, topToTop);
                              if (topToTop == -1)
                              {
                                topToTop = paramContext.getInt(j, -1);
                                break label2030;
                                rightToRight = paramContext.getResourceId(j, rightToRight);
                                if (rightToRight == -1)
                                {
                                  rightToRight = paramContext.getInt(j, -1);
                                  break label2030;
                                  rightToLeft = paramContext.getResourceId(j, rightToLeft);
                                  if (rightToLeft == -1)
                                  {
                                    rightToLeft = paramContext.getInt(j, -1);
                                    break label2030;
                                    leftToRight = paramContext.getResourceId(j, leftToRight);
                                    if (leftToRight == -1)
                                    {
                                      leftToRight = paramContext.getInt(j, -1);
                                      break label2030;
                                      leftToLeft = paramContext.getResourceId(j, leftToLeft);
                                      if (leftToLeft == -1)
                                      {
                                        leftToLeft = paramContext.getInt(j, -1);
                                        break label2030;
                                        guidePercent = paramContext.getFloat(j, guidePercent);
                                        break label2030;
                                        guideEnd = paramContext.getDimensionPixelOffset(j, guideEnd);
                                        break label2030;
                                        guideBegin = paramContext.getDimensionPixelOffset(j, guideBegin);
                                        break label2030;
                                        circleAngle = (paramContext.getFloat(j, circleAngle) % 360.0F);
                                        f1 = circleAngle;
                                        if (f1 < 0.0F)
                                        {
                                          circleAngle = ((360.0F - f1) % 360.0F);
                                          break label2030;
                                          circleRadius = paramContext.getDimensionPixelSize(j, circleRadius);
                                          break label2030;
                                          circleConstraint = paramContext.getResourceId(j, circleConstraint);
                                          if (circleConstraint == -1)
                                          {
                                            circleConstraint = paramContext.getInt(j, -1);
                                            break label2030;
                                            orientation = paramContext.getInt(j, orientation);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        label2030:
        i += 1;
      }
      paramContext.recycle();
      validate();
    }
    
    public LayoutParams(ViewGroup.LayoutParams paramLayoutParams)
    {
      super();
    }
    
    public LayoutParams(LayoutParams paramLayoutParams)
    {
      super();
      guideBegin = guideBegin;
      guideEnd = guideEnd;
      guidePercent = guidePercent;
      leftToLeft = leftToLeft;
      leftToRight = leftToRight;
      rightToLeft = rightToLeft;
      rightToRight = rightToRight;
      topToTop = topToTop;
      topToBottom = topToBottom;
      bottomToTop = bottomToTop;
      bottomToBottom = bottomToBottom;
      baselineToBaseline = baselineToBaseline;
      circleConstraint = circleConstraint;
      circleRadius = circleRadius;
      circleAngle = circleAngle;
      startToEnd = startToEnd;
      startToStart = startToStart;
      endToStart = endToStart;
      endToEnd = endToEnd;
      goneLeftMargin = goneLeftMargin;
      goneTopMargin = goneTopMargin;
      goneRightMargin = goneRightMargin;
      goneBottomMargin = goneBottomMargin;
      goneStartMargin = goneStartMargin;
      goneEndMargin = goneEndMargin;
      horizontalBias = horizontalBias;
      verticalBias = verticalBias;
      dimensionRatio = dimensionRatio;
      dimensionRatioValue = dimensionRatioValue;
      dimensionRatioSide = dimensionRatioSide;
      horizontalWeight = horizontalWeight;
      verticalWeight = verticalWeight;
      horizontalChainStyle = horizontalChainStyle;
      verticalChainStyle = verticalChainStyle;
      constrainedWidth = constrainedWidth;
      constrainedHeight = constrainedHeight;
      matchConstraintDefaultWidth = matchConstraintDefaultWidth;
      matchConstraintDefaultHeight = matchConstraintDefaultHeight;
      matchConstraintMinWidth = matchConstraintMinWidth;
      matchConstraintMaxWidth = matchConstraintMaxWidth;
      matchConstraintMinHeight = matchConstraintMinHeight;
      matchConstraintMaxHeight = matchConstraintMaxHeight;
      matchConstraintPercentWidth = matchConstraintPercentWidth;
      matchConstraintPercentHeight = matchConstraintPercentHeight;
      editorAbsoluteX = editorAbsoluteX;
      editorAbsoluteY = editorAbsoluteY;
      orientation = orientation;
      horizontalDimensionFixed = horizontalDimensionFixed;
      verticalDimensionFixed = verticalDimensionFixed;
      needsBaseline = needsBaseline;
      isGuideline = isGuideline;
      resolvedLeftToLeft = resolvedLeftToLeft;
      resolvedLeftToRight = resolvedLeftToRight;
      resolvedRightToLeft = resolvedRightToLeft;
      resolvedRightToRight = resolvedRightToRight;
      resolveGoneLeftMargin = resolveGoneLeftMargin;
      resolveGoneRightMargin = resolveGoneRightMargin;
      resolvedHorizontalBias = resolvedHorizontalBias;
      widget = widget;
    }
    
    public void reset()
    {
      ConstraintWidget localConstraintWidget = widget;
      if (localConstraintWidget != null) {
        localConstraintWidget.reset();
      }
    }
    
    public void resolveLayoutDirection(int paramInt)
    {
      int j = leftMargin;
      int k = rightMargin;
      super.resolveLayoutDirection(paramInt);
      resolvedRightToLeft = -1;
      resolvedRightToRight = -1;
      resolvedLeftToLeft = -1;
      resolvedLeftToRight = -1;
      resolveGoneLeftMargin = -1;
      resolveGoneRightMargin = -1;
      resolveGoneLeftMargin = goneLeftMargin;
      resolveGoneRightMargin = goneRightMargin;
      resolvedHorizontalBias = horizontalBias;
      resolvedGuideBegin = guideBegin;
      resolvedGuideEnd = guideEnd;
      resolvedGuidePercent = guidePercent;
      paramInt = getLayoutDirection();
      int i = 0;
      if (1 == paramInt) {
        paramInt = 1;
      } else {
        paramInt = 0;
      }
      if (paramInt != 0)
      {
        paramInt = startToEnd;
        if (paramInt != -1) {
          resolvedRightToLeft = paramInt;
        }
        for (;;)
        {
          paramInt = 1;
          break;
          int m = startToStart;
          paramInt = i;
          if (m == -1) {
            break;
          }
          resolvedRightToRight = m;
        }
        i = endToStart;
        if (i != -1)
        {
          resolvedLeftToRight = i;
          paramInt = 1;
        }
        i = endToEnd;
        if (i != -1)
        {
          resolvedLeftToLeft = i;
          paramInt = 1;
        }
        i = goneStartMargin;
        if (i != -1) {
          resolveGoneRightMargin = i;
        }
        i = goneEndMargin;
        if (i != -1) {
          resolveGoneLeftMargin = i;
        }
        if (paramInt != 0) {
          resolvedHorizontalBias = (1.0F - horizontalBias);
        }
        if ((isGuideline) && (orientation == 1))
        {
          float f = guidePercent;
          if (f != -1.0F)
          {
            resolvedGuidePercent = (1.0F - f);
            resolvedGuideBegin = -1;
            resolvedGuideEnd = -1;
          }
          else
          {
            paramInt = guideBegin;
            if (paramInt != -1)
            {
              resolvedGuideEnd = paramInt;
              resolvedGuideBegin = -1;
              resolvedGuidePercent = -1.0F;
            }
            else
            {
              paramInt = guideEnd;
              if (paramInt != -1)
              {
                resolvedGuideBegin = paramInt;
                resolvedGuideEnd = -1;
                resolvedGuidePercent = -1.0F;
              }
            }
          }
        }
      }
      else
      {
        paramInt = startToEnd;
        if (paramInt != -1) {
          resolvedLeftToRight = paramInt;
        }
        paramInt = startToStart;
        if (paramInt != -1) {
          resolvedLeftToLeft = paramInt;
        }
        paramInt = endToStart;
        if (paramInt != -1) {
          resolvedRightToLeft = paramInt;
        }
        paramInt = endToEnd;
        if (paramInt != -1) {
          resolvedRightToRight = paramInt;
        }
        paramInt = goneStartMargin;
        if (paramInt != -1) {
          resolveGoneLeftMargin = paramInt;
        }
        paramInt = goneEndMargin;
        if (paramInt != -1) {
          resolveGoneRightMargin = paramInt;
        }
      }
      if ((endToStart == -1) && (endToEnd == -1) && (startToStart == -1) && (startToEnd == -1))
      {
        paramInt = rightToLeft;
        if (paramInt != -1)
        {
          resolvedRightToLeft = paramInt;
          if ((rightMargin <= 0) && (k > 0)) {
            rightMargin = k;
          }
        }
        else
        {
          paramInt = rightToRight;
          if (paramInt != -1)
          {
            resolvedRightToRight = paramInt;
            if ((rightMargin <= 0) && (k > 0)) {
              rightMargin = k;
            }
          }
        }
        paramInt = leftToLeft;
        if (paramInt != -1)
        {
          resolvedLeftToLeft = paramInt;
          if ((leftMargin <= 0) && (j > 0)) {
            leftMargin = j;
          }
        }
        else
        {
          paramInt = leftToRight;
          if (paramInt != -1)
          {
            resolvedLeftToRight = paramInt;
            if ((leftMargin <= 0) && (j > 0)) {
              leftMargin = j;
            }
          }
        }
      }
    }
    
    public void validate()
    {
      isGuideline = false;
      horizontalDimensionFixed = true;
      verticalDimensionFixed = true;
      if ((width == -2) && (constrainedWidth))
      {
        horizontalDimensionFixed = false;
        matchConstraintDefaultWidth = 1;
      }
      if ((height == -2) && (constrainedHeight))
      {
        verticalDimensionFixed = false;
        matchConstraintDefaultHeight = 1;
      }
      if ((width == 0) || (width == -1))
      {
        horizontalDimensionFixed = false;
        if ((width == 0) && (matchConstraintDefaultWidth == 1))
        {
          width = -2;
          constrainedWidth = true;
        }
      }
      if ((height == 0) || (height == -1))
      {
        verticalDimensionFixed = false;
        if ((height == 0) && (matchConstraintDefaultHeight == 1))
        {
          height = -2;
          constrainedHeight = true;
        }
      }
      if ((guidePercent != -1.0F) || (guideBegin != -1) || (guideEnd != -1))
      {
        isGuideline = true;
        horizontalDimensionFixed = true;
        verticalDimensionFixed = true;
        if (!(widget instanceof androidx.constraintlayout.solver.widgets.Guideline)) {
          widget = new androidx.constraintlayout.solver.widgets.Guideline();
        }
        ((androidx.constraintlayout.solver.widgets.Guideline)widget).setOrientation(orientation);
      }
    }
    
    private static class Table
    {
      public static final int ANDROID_ORIENTATION = 1;
      public static final int LAYOUT_CONSTRAINED_HEIGHT = 28;
      public static final int LAYOUT_CONSTRAINED_WIDTH = 27;
      public static final int LAYOUT_CONSTRAINT_BASELINE_CREATOR = 43;
      public static final int LAYOUT_CONSTRAINT_BASELINE_TO_BASELINE_OF = 16;
      public static final int LAYOUT_CONSTRAINT_BOTTOM_CREATOR = 42;
      public static final int LAYOUT_CONSTRAINT_BOTTOM_TO_BOTTOM_OF = 15;
      public static final int LAYOUT_CONSTRAINT_BOTTOM_TO_TOP_OF = 14;
      public static final int LAYOUT_CONSTRAINT_CIRCLE = 2;
      public static final int LAYOUT_CONSTRAINT_CIRCLE_ANGLE = 4;
      public static final int LAYOUT_CONSTRAINT_CIRCLE_RADIUS = 3;
      public static final int LAYOUT_CONSTRAINT_DIMENSION_RATIO = 44;
      public static final int LAYOUT_CONSTRAINT_END_TO_END_OF = 20;
      public static final int LAYOUT_CONSTRAINT_END_TO_START_OF = 19;
      public static final int LAYOUT_CONSTRAINT_GUIDE_BEGIN = 5;
      public static final int LAYOUT_CONSTRAINT_GUIDE_END = 6;
      public static final int LAYOUT_CONSTRAINT_GUIDE_PERCENT = 7;
      public static final int LAYOUT_CONSTRAINT_HEIGHT_DEFAULT = 32;
      public static final int LAYOUT_CONSTRAINT_HEIGHT_MAX = 37;
      public static final int LAYOUT_CONSTRAINT_HEIGHT_MIN = 36;
      public static final int LAYOUT_CONSTRAINT_HEIGHT_PERCENT = 38;
      public static final int LAYOUT_CONSTRAINT_HORIZONTAL_BIAS = 29;
      public static final int LAYOUT_CONSTRAINT_HORIZONTAL_CHAINSTYLE = 47;
      public static final int LAYOUT_CONSTRAINT_HORIZONTAL_WEIGHT = 45;
      public static final int LAYOUT_CONSTRAINT_LEFT_CREATOR = 39;
      public static final int LAYOUT_CONSTRAINT_LEFT_TO_LEFT_OF = 8;
      public static final int LAYOUT_CONSTRAINT_LEFT_TO_RIGHT_OF = 9;
      public static final int LAYOUT_CONSTRAINT_RIGHT_CREATOR = 41;
      public static final int LAYOUT_CONSTRAINT_RIGHT_TO_LEFT_OF = 10;
      public static final int LAYOUT_CONSTRAINT_RIGHT_TO_RIGHT_OF = 11;
      public static final int LAYOUT_CONSTRAINT_START_TO_END_OF = 17;
      public static final int LAYOUT_CONSTRAINT_START_TO_START_OF = 18;
      public static final int LAYOUT_CONSTRAINT_TOP_CREATOR = 40;
      public static final int LAYOUT_CONSTRAINT_TOP_TO_BOTTOM_OF = 13;
      public static final int LAYOUT_CONSTRAINT_TOP_TO_TOP_OF = 12;
      public static final int LAYOUT_CONSTRAINT_VERTICAL_BIAS = 30;
      public static final int LAYOUT_CONSTRAINT_VERTICAL_CHAINSTYLE = 48;
      public static final int LAYOUT_CONSTRAINT_VERTICAL_WEIGHT = 46;
      public static final int LAYOUT_CONSTRAINT_WIDTH_DEFAULT = 31;
      public static final int LAYOUT_CONSTRAINT_WIDTH_MAX = 34;
      public static final int LAYOUT_CONSTRAINT_WIDTH_MIN = 33;
      public static final int LAYOUT_CONSTRAINT_WIDTH_PERCENT = 35;
      public static final int LAYOUT_EDITOR_ABSOLUTEX = 49;
      public static final int LAYOUT_EDITOR_ABSOLUTEY = 50;
      public static final int LAYOUT_GONE_MARGIN_BOTTOM = 24;
      public static final int LAYOUT_GONE_MARGIN_END = 26;
      public static final int LAYOUT_GONE_MARGIN_LEFT = 21;
      public static final int LAYOUT_GONE_MARGIN_RIGHT = 23;
      public static final int LAYOUT_GONE_MARGIN_START = 25;
      public static final int LAYOUT_GONE_MARGIN_TOP = 22;
      public static final int UNUSED = 0;
      public static final SparseIntArray map = new SparseIntArray();
      
      static
      {
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintLeft_toLeftOf, 8);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintLeft_toRightOf, 9);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintRight_toLeftOf, 10);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintRight_toRightOf, 11);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintTop_toTopOf, 12);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintTop_toBottomOf, 13);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintBottom_toTopOf, 14);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintBottom_toBottomOf, 15);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintBaseline_toBaselineOf, 16);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintCircle, 2);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintCircleRadius, 3);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintCircleAngle, 4);
        map.append(R.styleable.ConstraintLayout_Layout_layout_editor_absoluteX, 49);
        map.append(R.styleable.ConstraintLayout_Layout_layout_editor_absoluteY, 50);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintGuide_begin, 5);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintGuide_end, 6);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintGuide_percent, 7);
        map.append(R.styleable.ConstraintLayout_Layout_android_orientation, 1);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintStart_toEndOf, 17);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintStart_toStartOf, 18);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintEnd_toStartOf, 19);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintEnd_toEndOf, 20);
        map.append(R.styleable.ConstraintLayout_Layout_layout_goneMarginLeft, 21);
        map.append(R.styleable.ConstraintLayout_Layout_layout_goneMarginTop, 22);
        map.append(R.styleable.ConstraintLayout_Layout_layout_goneMarginRight, 23);
        map.append(R.styleable.ConstraintLayout_Layout_layout_goneMarginBottom, 24);
        map.append(R.styleable.ConstraintLayout_Layout_layout_goneMarginStart, 25);
        map.append(R.styleable.ConstraintLayout_Layout_layout_goneMarginEnd, 26);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintHorizontal_bias, 29);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintVertical_bias, 30);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintDimensionRatio, 44);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintHorizontal_weight, 45);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintVertical_weight, 46);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintHorizontal_chainStyle, 47);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintVertical_chainStyle, 48);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constrainedWidth, 27);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constrainedHeight, 28);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintWidth_default, 31);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintHeight_default, 32);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintWidth_min, 33);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintWidth_max, 34);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintWidth_percent, 35);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintHeight_min, 36);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintHeight_max, 37);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintHeight_percent, 38);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintLeft_creator, 39);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintTop_creator, 40);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintRight_creator, 41);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintBottom_creator, 42);
        map.append(R.styleable.ConstraintLayout_Layout_layout_constraintBaseline_creator, 43);
      }
      
      private Table() {}
    }
  }
}
