package androidx.constraintlayout.solver.widgets;

import androidx.constraintlayout.solver.LinearSystem;
import androidx.constraintlayout.solver.Metrics;

public class Optimizer
{
  static final int FLAG_CHAIN_DANGLING = 1;
  static final int FLAG_RECOMPUTE_BOUNDS = 2;
  static final int FLAG_USE_OPTIMIZE = 0;
  public static final int OPTIMIZATION_BARRIER = 2;
  public static final int OPTIMIZATION_CHAIN = 4;
  public static final int OPTIMIZATION_DIMENSIONS = 8;
  public static final int OPTIMIZATION_DIRECT = 1;
  public static final int OPTIMIZATION_GROUPS = 32;
  public static final int OPTIMIZATION_NONE = 0;
  public static final int OPTIMIZATION_RATIO = 16;
  public static final int OPTIMIZATION_STANDARD = 7;
  static boolean[] flags = new boolean[3];
  
  public Optimizer() {}
  
  static void analyze(int paramInt, ConstraintWidget paramConstraintWidget)
  {
    paramConstraintWidget.updateResolutionNodes();
    ResolutionAnchor localResolutionAnchor1 = mLeft.getResolutionNode();
    ResolutionAnchor localResolutionAnchor2 = mTop.getResolutionNode();
    ResolutionAnchor localResolutionAnchor3 = mRight.getResolutionNode();
    ResolutionAnchor localResolutionAnchor4 = mBottom.getResolutionNode();
    if ((paramInt & 0x8) == 8) {
      paramInt = 1;
    } else {
      paramInt = 0;
    }
    int i;
    if ((mListDimensionBehaviors[0] == ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT) && (optimizableMatchConstraint(paramConstraintWidget, 0))) {
      i = 1;
    } else {
      i = 0;
    }
    if ((type != 4) && (type != 4)) {
      if ((mListDimensionBehaviors[0] != ConstraintWidget.DimensionBehaviour.FIXED) && ((i == 0) || (paramConstraintWidget.getVisibility() != 8)))
      {
        if (i != 0)
        {
          i = paramConstraintWidget.getWidth();
          localResolutionAnchor1.setType(1);
          localResolutionAnchor3.setType(1);
          if ((mLeft.mTarget == null) && (mRight.mTarget == null))
          {
            if (paramInt != 0) {
              localResolutionAnchor3.dependsOn(localResolutionAnchor1, 1, paramConstraintWidget.getResolutionWidth());
            } else {
              localResolutionAnchor3.dependsOn(localResolutionAnchor1, i);
            }
          }
          else if ((mLeft.mTarget != null) && (mRight.mTarget == null))
          {
            if (paramInt != 0) {
              localResolutionAnchor3.dependsOn(localResolutionAnchor1, 1, paramConstraintWidget.getResolutionWidth());
            } else {
              localResolutionAnchor3.dependsOn(localResolutionAnchor1, i);
            }
          }
          else if ((mLeft.mTarget == null) && (mRight.mTarget != null))
          {
            if (paramInt != 0) {
              localResolutionAnchor1.dependsOn(localResolutionAnchor3, -1, paramConstraintWidget.getResolutionWidth());
            } else {
              localResolutionAnchor1.dependsOn(localResolutionAnchor3, -i);
            }
          }
          else if ((mLeft.mTarget != null) && (mRight.mTarget != null))
          {
            if (paramInt != 0)
            {
              paramConstraintWidget.getResolutionWidth().addDependent(localResolutionAnchor1);
              paramConstraintWidget.getResolutionWidth().addDependent(localResolutionAnchor3);
            }
            if (mDimensionRatio == 0.0F)
            {
              localResolutionAnchor1.setType(3);
              localResolutionAnchor3.setType(3);
              localResolutionAnchor1.setOpposite(localResolutionAnchor3, 0.0F);
              localResolutionAnchor3.setOpposite(localResolutionAnchor1, 0.0F);
            }
            else
            {
              localResolutionAnchor1.setType(2);
              localResolutionAnchor3.setType(2);
              localResolutionAnchor1.setOpposite(localResolutionAnchor3, -i);
              localResolutionAnchor3.setOpposite(localResolutionAnchor1, i);
              paramConstraintWidget.setWidth(i);
            }
          }
        }
      }
      else if ((mLeft.mTarget == null) && (mRight.mTarget == null))
      {
        localResolutionAnchor1.setType(1);
        localResolutionAnchor3.setType(1);
        if (paramInt != 0) {
          localResolutionAnchor3.dependsOn(localResolutionAnchor1, 1, paramConstraintWidget.getResolutionWidth());
        } else {
          localResolutionAnchor3.dependsOn(localResolutionAnchor1, paramConstraintWidget.getWidth());
        }
      }
      else if ((mLeft.mTarget != null) && (mRight.mTarget == null))
      {
        localResolutionAnchor1.setType(1);
        localResolutionAnchor3.setType(1);
        if (paramInt != 0) {
          localResolutionAnchor3.dependsOn(localResolutionAnchor1, 1, paramConstraintWidget.getResolutionWidth());
        } else {
          localResolutionAnchor3.dependsOn(localResolutionAnchor1, paramConstraintWidget.getWidth());
        }
      }
      else if ((mLeft.mTarget == null) && (mRight.mTarget != null))
      {
        localResolutionAnchor1.setType(1);
        localResolutionAnchor3.setType(1);
        localResolutionAnchor1.dependsOn(localResolutionAnchor3, -paramConstraintWidget.getWidth());
        if (paramInt != 0) {
          localResolutionAnchor1.dependsOn(localResolutionAnchor3, -1, paramConstraintWidget.getResolutionWidth());
        } else {
          localResolutionAnchor1.dependsOn(localResolutionAnchor3, -paramConstraintWidget.getWidth());
        }
      }
      else if ((mLeft.mTarget != null) && (mRight.mTarget != null))
      {
        localResolutionAnchor1.setType(2);
        localResolutionAnchor3.setType(2);
        if (paramInt != 0)
        {
          paramConstraintWidget.getResolutionWidth().addDependent(localResolutionAnchor1);
          paramConstraintWidget.getResolutionWidth().addDependent(localResolutionAnchor3);
          localResolutionAnchor1.setOpposite(localResolutionAnchor3, -1, paramConstraintWidget.getResolutionWidth());
          localResolutionAnchor3.setOpposite(localResolutionAnchor1, 1, paramConstraintWidget.getResolutionWidth());
        }
        else
        {
          localResolutionAnchor1.setOpposite(localResolutionAnchor3, -paramConstraintWidget.getWidth());
          localResolutionAnchor3.setOpposite(localResolutionAnchor1, paramConstraintWidget.getWidth());
        }
      }
    }
    if ((mListDimensionBehaviors[1] == ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT) && (optimizableMatchConstraint(paramConstraintWidget, 1))) {
      i = 1;
    } else {
      i = 0;
    }
    if ((type != 4) && (type != 4)) {
      if ((mListDimensionBehaviors[1] != ConstraintWidget.DimensionBehaviour.FIXED) && ((i == 0) || (paramConstraintWidget.getVisibility() != 8)))
      {
        if (i != 0)
        {
          i = paramConstraintWidget.getHeight();
          localResolutionAnchor2.setType(1);
          localResolutionAnchor4.setType(1);
          if ((mTop.mTarget == null) && (mBottom.mTarget == null))
          {
            if (paramInt != 0)
            {
              localResolutionAnchor4.dependsOn(localResolutionAnchor2, 1, paramConstraintWidget.getResolutionHeight());
              return;
            }
            localResolutionAnchor4.dependsOn(localResolutionAnchor2, i);
            return;
          }
          if ((mTop.mTarget != null) && (mBottom.mTarget == null))
          {
            if (paramInt != 0)
            {
              localResolutionAnchor4.dependsOn(localResolutionAnchor2, 1, paramConstraintWidget.getResolutionHeight());
              return;
            }
            localResolutionAnchor4.dependsOn(localResolutionAnchor2, i);
            return;
          }
          if ((mTop.mTarget == null) && (mBottom.mTarget != null))
          {
            if (paramInt != 0)
            {
              localResolutionAnchor2.dependsOn(localResolutionAnchor4, -1, paramConstraintWidget.getResolutionHeight());
              return;
            }
            localResolutionAnchor2.dependsOn(localResolutionAnchor4, -i);
            return;
          }
          if ((mTop.mTarget != null) && (mBottom.mTarget != null))
          {
            if (paramInt != 0)
            {
              paramConstraintWidget.getResolutionHeight().addDependent(localResolutionAnchor2);
              paramConstraintWidget.getResolutionWidth().addDependent(localResolutionAnchor4);
            }
            if (mDimensionRatio == 0.0F)
            {
              localResolutionAnchor2.setType(3);
              localResolutionAnchor4.setType(3);
              localResolutionAnchor2.setOpposite(localResolutionAnchor4, 0.0F);
              localResolutionAnchor4.setOpposite(localResolutionAnchor2, 0.0F);
              return;
            }
            localResolutionAnchor2.setType(2);
            localResolutionAnchor4.setType(2);
            localResolutionAnchor2.setOpposite(localResolutionAnchor4, -i);
            localResolutionAnchor4.setOpposite(localResolutionAnchor2, i);
            paramConstraintWidget.setHeight(i);
            if (mBaselineDistance > 0) {
              mBaseline.getResolutionNode().dependsOn(1, localResolutionAnchor2, mBaselineDistance);
            }
          }
        }
      }
      else if ((mTop.mTarget == null) && (mBottom.mTarget == null))
      {
        localResolutionAnchor2.setType(1);
        localResolutionAnchor4.setType(1);
        if (paramInt != 0) {
          localResolutionAnchor4.dependsOn(localResolutionAnchor2, 1, paramConstraintWidget.getResolutionHeight());
        } else {
          localResolutionAnchor4.dependsOn(localResolutionAnchor2, paramConstraintWidget.getHeight());
        }
        if (mBaseline.mTarget != null)
        {
          mBaseline.getResolutionNode().setType(1);
          localResolutionAnchor2.dependsOn(1, mBaseline.getResolutionNode(), -mBaselineDistance);
        }
      }
      else if ((mTop.mTarget != null) && (mBottom.mTarget == null))
      {
        localResolutionAnchor2.setType(1);
        localResolutionAnchor4.setType(1);
        if (paramInt != 0) {
          localResolutionAnchor4.dependsOn(localResolutionAnchor2, 1, paramConstraintWidget.getResolutionHeight());
        } else {
          localResolutionAnchor4.dependsOn(localResolutionAnchor2, paramConstraintWidget.getHeight());
        }
        if (mBaselineDistance > 0) {
          mBaseline.getResolutionNode().dependsOn(1, localResolutionAnchor2, mBaselineDistance);
        }
      }
      else if ((mTop.mTarget == null) && (mBottom.mTarget != null))
      {
        localResolutionAnchor2.setType(1);
        localResolutionAnchor4.setType(1);
        if (paramInt != 0) {
          localResolutionAnchor2.dependsOn(localResolutionAnchor4, -1, paramConstraintWidget.getResolutionHeight());
        } else {
          localResolutionAnchor2.dependsOn(localResolutionAnchor4, -paramConstraintWidget.getHeight());
        }
        if (mBaselineDistance > 0) {
          mBaseline.getResolutionNode().dependsOn(1, localResolutionAnchor2, mBaselineDistance);
        }
      }
      else if ((mTop.mTarget != null) && (mBottom.mTarget != null))
      {
        localResolutionAnchor2.setType(2);
        localResolutionAnchor4.setType(2);
        if (paramInt != 0)
        {
          localResolutionAnchor2.setOpposite(localResolutionAnchor4, -1, paramConstraintWidget.getResolutionHeight());
          localResolutionAnchor4.setOpposite(localResolutionAnchor2, 1, paramConstraintWidget.getResolutionHeight());
          paramConstraintWidget.getResolutionHeight().addDependent(localResolutionAnchor2);
          paramConstraintWidget.getResolutionWidth().addDependent(localResolutionAnchor4);
        }
        else
        {
          localResolutionAnchor2.setOpposite(localResolutionAnchor4, -paramConstraintWidget.getHeight());
          localResolutionAnchor4.setOpposite(localResolutionAnchor2, paramConstraintWidget.getHeight());
        }
        if (mBaselineDistance > 0) {
          mBaseline.getResolutionNode().dependsOn(1, localResolutionAnchor2, mBaselineDistance);
        }
      }
    }
  }
  
  static boolean applyChainOptimized(ConstraintWidgetContainer paramConstraintWidgetContainer, LinearSystem paramLinearSystem, int paramInt1, int paramInt2, ChainHead paramChainHead)
  {
    Object localObject1 = mFirst;
    ConstraintWidget localConstraintWidget1 = mLast;
    Object localObject3 = mFirstVisibleWidget;
    ConstraintWidget localConstraintWidget2 = mLastVisibleWidget;
    Object localObject2 = mHead;
    float f7 = mTotalWeight;
    ConstraintWidget localConstraintWidget3 = mFirstMatchConstraintWidget;
    paramChainHead = mLastMatchConstraintWidget;
    paramConstraintWidgetContainer = mListDimensionBehaviors[paramInt1];
    paramConstraintWidgetContainer = ConstraintWidget.DimensionBehaviour.WRAP_CONTENT;
    int i;
    int j;
    int k;
    if (paramInt1 == 0)
    {
      if (mHorizontalChainStyle == 0) {
        i = 1;
      } else {
        i = 0;
      }
      if (mHorizontalChainStyle == 1) {
        j = 1;
      } else {
        j = 0;
      }
      m = i;
      k = j;
      if (mHorizontalChainStyle == 2)
      {
        k = j;
        m = i;
      }
    }
    for (;;)
    {
      i = 1;
      j = m;
      break;
      do
      {
        i = 0;
        j = m;
        break;
        if (mVerticalChainStyle == 0) {
          i = 1;
        } else {
          i = 0;
        }
        if (mVerticalChainStyle == 1) {
          j = 1;
        } else {
          j = 0;
        }
        m = i;
        k = j;
      } while (mVerticalChainStyle != 2);
      m = i;
      k = j;
    }
    paramChainHead = (ChainHead)localObject1;
    int n = 0;
    int i1 = 0;
    int m = 0;
    float f5 = 0.0F;
    float f3 = 0.0F;
    float f1;
    float f2;
    while (i1 == 0)
    {
      int i2 = m;
      f1 = f5;
      f2 = f3;
      if (paramChainHead.getVisibility() != 8)
      {
        i2 = m + 1;
        if (paramInt1 == 0) {
          m = paramChainHead.getWidth();
        } else {
          m = paramChainHead.getHeight();
        }
        f1 = f5 + m;
        f2 = f1;
        if (paramChainHead != localObject3) {
          f2 = f1 + mListAnchors[paramInt2].getMargin();
        }
        f1 = f2;
        if (paramChainHead != localConstraintWidget2) {
          f1 = f2 + mListAnchors[(paramInt2 + 1)].getMargin();
        }
        f2 = f3 + mListAnchors[paramInt2].getMargin() + mListAnchors[(paramInt2 + 1)].getMargin();
      }
      paramConstraintWidgetContainer = mListAnchors[paramInt2];
      m = n;
      if (paramChainHead.getVisibility() != 8)
      {
        m = n;
        if (mListDimensionBehaviors[paramInt1] == ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT)
        {
          m = n + 1;
          if (paramInt1 == 0)
          {
            if (mMatchConstraintDefaultWidth != 0) {
              return false;
            }
            if ((mMatchConstraintMinWidth != 0) || (mMatchConstraintMaxWidth != 0)) {
              return false;
            }
          }
          else
          {
            if (mMatchConstraintDefaultHeight != 0) {
              return false;
            }
            if (mMatchConstraintMinHeight != 0) {
              break label496;
            }
            if (mMatchConstraintMaxHeight != 0) {
              return false;
            }
          }
          if (mDimensionRatio != 0.0F) {
            label496:
            return false;
          }
        }
      }
      paramConstraintWidgetContainer = mListAnchors[(paramInt2 + 1)].mTarget;
      if (paramConstraintWidgetContainer != null)
      {
        paramConstraintWidgetContainer = mOwner;
        if ((mListAnchors[paramInt2].mTarget != null) && (mListAnchors[paramInt2].mTarget.mOwner == paramChainHead)) {
          break label557;
        }
      }
      paramConstraintWidgetContainer = null;
      label557:
      if (paramConstraintWidgetContainer != null)
      {
        n = m;
        paramChainHead = paramConstraintWidgetContainer;
        m = i2;
        f5 = f1;
        f3 = f2;
      }
      else
      {
        i1 = 1;
        n = m;
        m = i2;
        f5 = f1;
        f3 = f2;
      }
    }
    localObject2 = mListAnchors[paramInt2].getResolutionNode();
    paramConstraintWidgetContainer = mListAnchors;
    i1 = paramInt2 + 1;
    paramConstraintWidgetContainer = paramConstraintWidgetContainer[i1].getResolutionNode();
    if ((target != null) && (target != null))
    {
      if ((target.state == 1) && (target.state == 1))
      {
        if ((n > 0) && (n != m)) {
          return false;
        }
        if ((i == 0) && (j == 0) && (k == 0))
        {
          f1 = 0.0F;
        }
        else
        {
          if (localObject3 != null) {
            f2 = mListAnchors[paramInt2].getMargin();
          } else {
            f2 = 0.0F;
          }
          f1 = f2;
          if (localConstraintWidget2 != null) {
            f1 = f2 + mListAnchors[i1].getMargin();
          }
        }
        float f4 = target.resolvedOffset;
        f2 = target.resolvedOffset;
        if (f4 < f2) {
          f2 -= f4;
        } else {
          f2 = f4 - f2;
        }
        float f6 = f2 - f5;
        if ((n > 0) && (n == m))
        {
          if ((paramChainHead.getParent() != null) && (getParentmListDimensionBehaviors[paramInt1] == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT)) {
            return false;
          }
          f2 = f6 + f5 - f3;
          paramConstraintWidgetContainer = (ConstraintWidgetContainer)localObject1;
          while (paramConstraintWidgetContainer != null)
          {
            if (LinearSystem.sMetrics != null)
            {
              paramChainHead = LinearSystem.sMetrics;
              nonresolvedWidgets -= 1L;
              paramChainHead = LinearSystem.sMetrics;
              resolvedWidgets += 1L;
              paramChainHead = LinearSystem.sMetrics;
              chainConnectionResolved += 1L;
            }
            paramChainHead = mNextChainWidget[paramInt1];
            if (paramChainHead == null)
            {
              f1 = f4;
              if (paramConstraintWidgetContainer != localConstraintWidget1) {}
            }
            else
            {
              f1 = f2 / n;
              if (f7 > 0.0F) {
                if (mWeight[paramInt1] == -1.0F) {
                  f1 = 0.0F;
                } else {
                  f1 = mWeight[paramInt1] * f2 / f7;
                }
              }
              if (paramConstraintWidgetContainer.getVisibility() == 8) {
                f1 = 0.0F;
              }
              f3 = f4 + mListAnchors[paramInt2].getMargin();
              mListAnchors[paramInt2].getResolutionNode().resolve(resolvedTarget, f3);
              localObject1 = mListAnchors[i1].getResolutionNode();
              localObject3 = resolvedTarget;
              f1 = f3 + f1;
              ((ResolutionAnchor)localObject1).resolve((ResolutionAnchor)localObject3, f1);
              mListAnchors[paramInt2].getResolutionNode().addResolvedValue(paramLinearSystem);
              mListAnchors[i1].getResolutionNode().addResolvedValue(paramLinearSystem);
              f1 += mListAnchors[i1].getMargin();
            }
            paramConstraintWidgetContainer = paramChainHead;
            f4 = f1;
          }
          return true;
        }
        if (f6 < 0.0F)
        {
          i = 1;
          j = 0;
          k = 0;
        }
        if (i != 0)
        {
          paramConstraintWidgetContainer = (ConstraintWidgetContainer)localObject1;
          for (f1 = f4 + (f6 - f1) * paramConstraintWidgetContainer.getBiasPercent(paramInt1); paramConstraintWidgetContainer != null; f1 = f2)
          {
            if (LinearSystem.sMetrics != null)
            {
              paramChainHead = LinearSystem.sMetrics;
              nonresolvedWidgets -= 1L;
              paramChainHead = LinearSystem.sMetrics;
              resolvedWidgets += 1L;
              paramChainHead = LinearSystem.sMetrics;
              chainConnectionResolved += 1L;
            }
            paramChainHead = mNextChainWidget[paramInt1];
            if (paramChainHead == null)
            {
              f2 = f1;
              if (paramConstraintWidgetContainer != localConstraintWidget1) {}
            }
            else
            {
              if (paramInt1 == 0) {
                i = paramConstraintWidgetContainer.getWidth();
              } else {
                i = paramConstraintWidgetContainer.getHeight();
              }
              f2 = i;
              f1 += mListAnchors[paramInt2].getMargin();
              mListAnchors[paramInt2].getResolutionNode().resolve(resolvedTarget, f1);
              localObject1 = mListAnchors[i1].getResolutionNode();
              localObject3 = resolvedTarget;
              f1 += f2;
              ((ResolutionAnchor)localObject1).resolve((ResolutionAnchor)localObject3, f1);
              mListAnchors[paramInt2].getResolutionNode().addResolvedValue(paramLinearSystem);
              mListAnchors[i1].getResolutionNode().addResolvedValue(paramLinearSystem);
              f2 = f1 + mListAnchors[i1].getMargin();
            }
            paramConstraintWidgetContainer = paramChainHead;
          }
        }
        if ((j == 0) && (k == 0)) {}
        for (;;)
        {
          return true;
          if (j != 0) {}
          do
          {
            f2 = f6 - f1;
            break;
            f2 = f6;
          } while (k != 0);
          f3 = f2 / (m + 1);
          if (k != 0)
          {
            if (m > 1) {
              f1 = m - 1;
            } else {
              f1 = 2.0F;
            }
            f3 = f2 / f1;
          }
          if (((ConstraintWidget)localObject1).getVisibility() != 8) {
            f1 = f4 + f3;
          } else {
            f1 = f4;
          }
          f2 = f1;
          if (k != 0)
          {
            f2 = f1;
            if (m > 1) {
              f2 = mListAnchors[paramInt2].getMargin() + f4;
            }
          }
          paramConstraintWidgetContainer = (ConstraintWidgetContainer)localObject1;
          f1 = f2;
          if (j != 0)
          {
            paramConstraintWidgetContainer = (ConstraintWidgetContainer)localObject1;
            f1 = f2;
            if (localObject3 != null) {
              f1 = f2 + mListAnchors[paramInt2].getMargin();
            }
          }
          for (paramConstraintWidgetContainer = (ConstraintWidgetContainer)localObject1; paramConstraintWidgetContainer != null; paramConstraintWidgetContainer = paramChainHead)
          {
            if (LinearSystem.sMetrics != null)
            {
              paramChainHead = LinearSystem.sMetrics;
              nonresolvedWidgets -= 1L;
              paramChainHead = LinearSystem.sMetrics;
              resolvedWidgets += 1L;
              paramChainHead = LinearSystem.sMetrics;
              chainConnectionResolved += 1L;
            }
            paramChainHead = mNextChainWidget[paramInt1];
            if (paramChainHead == null)
            {
              f2 = f1;
              if (paramConstraintWidgetContainer == localConstraintWidget1) {}
            }
            do
            {
              f1 = f2;
              break;
              if (paramInt1 == 0) {
                i = paramConstraintWidgetContainer.getWidth();
              } else {
                i = paramConstraintWidgetContainer.getHeight();
              }
              f4 = i;
              f2 = f1;
              if (paramConstraintWidgetContainer != localObject3) {
                f2 = f1 + mListAnchors[paramInt2].getMargin();
              }
              mListAnchors[paramInt2].getResolutionNode().resolve(resolvedTarget, f2);
              mListAnchors[i1].getResolutionNode().resolve(resolvedTarget, f2 + f4);
              mListAnchors[paramInt2].getResolutionNode().addResolvedValue(paramLinearSystem);
              mListAnchors[i1].getResolutionNode().addResolvedValue(paramLinearSystem);
              f4 = f2 + (f4 + mListAnchors[i1].getMargin());
              f2 = f4;
            } while (paramChainHead == null);
            f1 = f4;
            if (paramChainHead.getVisibility() != 8) {
              f1 = f4 + f3;
            }
          }
        }
      }
      return false;
    }
    return false;
  }
  
  static void checkMatchParent(ConstraintWidgetContainer paramConstraintWidgetContainer, LinearSystem paramLinearSystem, ConstraintWidget paramConstraintWidget)
  {
    int i;
    int j;
    if ((mListDimensionBehaviors[0] != ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) && (mListDimensionBehaviors[0] == ConstraintWidget.DimensionBehaviour.MATCH_PARENT))
    {
      i = mLeft.mMargin;
      j = paramConstraintWidgetContainer.getWidth() - mRight.mMargin;
      mLeft.mSolverVariable = paramLinearSystem.createObjectVariable(mLeft);
      mRight.mSolverVariable = paramLinearSystem.createObjectVariable(mRight);
      paramLinearSystem.addEquality(mLeft.mSolverVariable, i);
      paramLinearSystem.addEquality(mRight.mSolverVariable, j);
      mHorizontalResolution = 2;
      paramConstraintWidget.setHorizontalDimension(i, j);
    }
    if ((mListDimensionBehaviors[1] != ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) && (mListDimensionBehaviors[1] == ConstraintWidget.DimensionBehaviour.MATCH_PARENT))
    {
      i = mTop.mMargin;
      j = paramConstraintWidgetContainer.getHeight() - mBottom.mMargin;
      mTop.mSolverVariable = paramLinearSystem.createObjectVariable(mTop);
      mBottom.mSolverVariable = paramLinearSystem.createObjectVariable(mBottom);
      paramLinearSystem.addEquality(mTop.mSolverVariable, i);
      paramLinearSystem.addEquality(mBottom.mSolverVariable, j);
      if ((mBaselineDistance > 0) || (paramConstraintWidget.getVisibility() == 8))
      {
        mBaseline.mSolverVariable = paramLinearSystem.createObjectVariable(mBaseline);
        paramLinearSystem.addEquality(mBaseline.mSolverVariable, mBaselineDistance + i);
      }
      mVerticalResolution = 2;
      paramConstraintWidget.setVerticalDimension(i, j);
    }
  }
  
  private static boolean optimizableMatchConstraint(ConstraintWidget paramConstraintWidget, int paramInt)
  {
    if (mListDimensionBehaviors[paramInt] != ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT) {
      return false;
    }
    float f = mDimensionRatio;
    int i = 1;
    if (f != 0.0F)
    {
      paramConstraintWidget = mListDimensionBehaviors;
      if (paramInt == 0) {
        paramInt = i;
      } else {
        paramInt = 0;
      }
      if (paramConstraintWidget[paramInt] == ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT) {}
      return false;
    }
    if (paramInt == 0)
    {
      if (mMatchConstraintDefaultWidth != 0) {
        return false;
      }
      if ((mMatchConstraintMinWidth != 0) || (mMatchConstraintMaxWidth != 0)) {
        return false;
      }
    }
    else
    {
      if (mMatchConstraintDefaultHeight != 0) {
        return false;
      }
      if (mMatchConstraintMinHeight != 0) {
        break label110;
      }
      if (mMatchConstraintMaxHeight != 0) {
        return false;
      }
    }
    return true;
    label110:
    return false;
  }
  
  static void setOptimizedWidget(ConstraintWidget paramConstraintWidget, int paramInt1, int paramInt2)
  {
    int i = paramInt1 * 2;
    int j = i + 1;
    mListAnchors[i].getResolutionNode().resolvedTarget = getParentmLeft.getResolutionNode();
    mListAnchors[i].getResolutionNode().resolvedOffset = paramInt2;
    mListAnchors[i].getResolutionNode().state = 1;
    mListAnchors[j].getResolutionNode().resolvedTarget = mListAnchors[i].getResolutionNode();
    mListAnchors[j].getResolutionNode().resolvedOffset = paramConstraintWidget.getLength(paramInt1);
    mListAnchors[j].getResolutionNode().state = 1;
  }
}
