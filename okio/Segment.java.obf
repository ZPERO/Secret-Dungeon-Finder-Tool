package okio;

import javax.annotation.Nullable;

final class Segment
{
  static final int SHARE_MINIMUM = 1024;
  static final int SIZE = 8192;
  final byte[] data;
  int limit;
  Segment next;
  boolean owner;
  int pos;
  Segment prev;
  boolean shared;
  
  Segment()
  {
    data = new byte['?'];
    owner = true;
    shared = false;
  }
  
  Segment(byte[] paramArrayOfByte, int paramInt1, int paramInt2, boolean paramBoolean1, boolean paramBoolean2)
  {
    data = paramArrayOfByte;
    pos = paramInt1;
    limit = paramInt2;
    shared = paramBoolean1;
    owner = paramBoolean2;
  }
  
  public final void compact()
  {
    Segment localSegment = prev;
    if (localSegment != this)
    {
      if (!owner) {
        return;
      }
      int j = limit - pos;
      int k = limit;
      int i;
      if (shared) {
        i = 0;
      } else {
        i = pos;
      }
      if (j > 8192 - k + i) {
        return;
      }
      writeTo(prev, j);
      pop();
      SegmentPool.recycle(this);
      return;
    }
    throw new IllegalStateException();
  }
  
  @Nullable
  public final Segment pop()
  {
    Segment localSegment1 = next;
    if (localSegment1 == this) {
      localSegment1 = null;
    }
    Segment localSegment2 = prev;
    next = next;
    next.prev = localSegment2;
    next = null;
    prev = null;
    return localSegment1;
  }
  
  public final Segment push(Segment paramSegment)
  {
    prev = this;
    next = next;
    next.prev = paramSegment;
    next = paramSegment;
    return paramSegment;
  }
  
  final Segment sharedCopy()
  {
    shared = true;
    return new Segment(data, pos, limit, true, false);
  }
  
  public final Segment split(int paramInt)
  {
    if ((paramInt > 0) && (paramInt <= limit - pos))
    {
      Segment localSegment;
      if (paramInt >= 1024)
      {
        localSegment = sharedCopy();
      }
      else
      {
        localSegment = SegmentPool.take();
        System.arraycopy(data, pos, data, 0, paramInt);
      }
      limit = (pos + paramInt);
      pos += paramInt;
      prev.push(localSegment);
      return localSegment;
    }
    throw new IllegalArgumentException();
  }
  
  final Segment unsharedCopy()
  {
    return new Segment((byte[])data.clone(), pos, limit, false, true);
  }
  
  public final void writeTo(Segment paramSegment, int paramInt)
  {
    if (owner)
    {
      int i = limit;
      if (i + paramInt > 8192) {
        if (!shared)
        {
          int j = pos;
          if (i + paramInt - j <= 8192)
          {
            byte[] arrayOfByte = data;
            System.arraycopy(arrayOfByte, j, arrayOfByte, 0, i - j);
            limit -= pos;
            pos = 0;
          }
          else
          {
            throw new IllegalArgumentException();
          }
        }
        else
        {
          throw new IllegalArgumentException();
        }
      }
      System.arraycopy(data, pos, data, limit, paramInt);
      limit += paramInt;
      pos += paramInt;
      return;
    }
    throw new IllegalArgumentException();
  }
}
